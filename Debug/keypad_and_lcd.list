
keypad_and_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea8  08008ea8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ea8  08008ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eb0  08008eb0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          0000098c  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a08  20000a08  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001544f  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c19  00000000  00000000  0003553e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a8  00000000  00000000  00039158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d68  00000000  00000000  0003a300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023777  00000000  00000000  0003b068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018ee6  00000000  00000000  0005e7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb1eb  00000000  00000000  000776c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004be0  00000000  00000000  001428b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00147490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e44 	.word	0x08008e44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008e44 	.word	0x08008e44

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Keypad4x4_Init>:
};

//***** Functions definition *****//
//Function(1): Set Keypad pins and ports
void Keypad4x4_Init(Keypad_WiresTypeDef  *KeypadWiringStruct)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	//Step(1): Copy the Keypad wirings to the library
	KeypadStruct = *KeypadWiringStruct;
 80004cc:	4a32      	ldr	r2, [pc, #200]	; (8000598 <Keypad4x4_Init+0xd4>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4614      	mov	r4, r2
 80004d2:	461d      	mov	r5, r3
 80004d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Step(2): Find the positions of the 4 OUT pins
	Keypad4x4_FindPins_positions();
 80004e4:	f000 f85c 	bl	80005a0 <Keypad4x4_FindPins_positions>
	//Step(3): Initialise all pins to set all OUT pins to RESET
	KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 80004e8:	4b2b      	ldr	r3, [pc, #172]	; (8000598 <Keypad4x4_Init+0xd4>)
 80004ea:	691b      	ldr	r3, [r3, #16]
 80004ec:	6859      	ldr	r1, [r3, #4]
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <Keypad4x4_Init+0xd8>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	461a      	mov	r2, r3
 80004f4:	2301      	movs	r3, #1
 80004f6:	fa03 f202 	lsl.w	r2, r3, r2
 80004fa:	4b27      	ldr	r3, [pc, #156]	; (8000598 <Keypad4x4_Init+0xd4>)
 80004fc:	691b      	ldr	r3, [r3, #16]
 80004fe:	430a      	orrs	r2, r1
 8000500:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	6859      	ldr	r1, [r3, #4]
 8000508:	4b24      	ldr	r3, [pc, #144]	; (800059c <Keypad4x4_Init+0xd8>)
 800050a:	785b      	ldrb	r3, [r3, #1]
 800050c:	461a      	mov	r2, r3
 800050e:	2301      	movs	r3, #1
 8000510:	fa03 f202 	lsl.w	r2, r3, r2
 8000514:	4b20      	ldr	r3, [pc, #128]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	430a      	orrs	r2, r1
 800051a:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <Keypad4x4_Init+0xd4>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	6859      	ldr	r1, [r3, #4]
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <Keypad4x4_Init+0xd8>)
 8000524:	789b      	ldrb	r3, [r3, #2]
 8000526:	461a      	mov	r2, r3
 8000528:	2301      	movs	r3, #1
 800052a:	fa03 f202 	lsl.w	r2, r3, r2
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	430a      	orrs	r2, r1
 8000534:	605a      	str	r2, [r3, #4]
	KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	6859      	ldr	r1, [r3, #4]
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <Keypad4x4_Init+0xd8>)
 800053e:	78db      	ldrb	r3, [r3, #3]
 8000540:	461a      	mov	r2, r3
 8000542:	2301      	movs	r3, #1
 8000544:	fa03 f202 	lsl.w	r2, r3, r2
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <Keypad4x4_Init+0xd4>)
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	430a      	orrs	r2, r1
 800054e:	605a      	str	r2, [r3, #4]
	
	HAL_GPIO_WritePin(KeypadStruct.OUT0_Port, KeypadStruct.OUT0pin, GPIO_PIN_SET);
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000552:	691b      	ldr	r3, [r3, #16]
 8000554:	4a10      	ldr	r2, [pc, #64]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000556:	8d11      	ldrh	r1, [r2, #40]	; 0x28
 8000558:	2201      	movs	r2, #1
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fbbe 	bl	8001cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT1_Port, KeypadStruct.OUT1pin, GPIO_PIN_SET);
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a0c      	ldr	r2, [pc, #48]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000566:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8000568:	2201      	movs	r2, #1
 800056a:	4618      	mov	r0, r3
 800056c:	f001 fbb6 	bl	8001cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT2_Port, KeypadStruct.OUT2pin, GPIO_PIN_SET);
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000576:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8000578:	2201      	movs	r2, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fbae 	bl	8001cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KeypadStruct.OUT3_Port, KeypadStruct.OUT3pin, GPIO_PIN_SET);
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <Keypad4x4_Init+0xd4>)
 8000586:	8dd1      	ldrh	r1, [r2, #46]	; 0x2e
 8000588:	2201      	movs	r2, #1
 800058a:	4618      	mov	r0, r3
 800058c:	f001 fba6 	bl	8001cdc <HAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bdb0      	pop	{r4, r5, r7, pc}
 8000598:	20000098 	.word	0x20000098
 800059c:	200000c8 	.word	0x200000c8

080005a0 <Keypad4x4_FindPins_positions>:
//Function(2): Get pin positions for colomn change use, only for out pins
static void Keypad4x4_FindPins_positions(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
	uint8_t idx=0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	71fb      	strb	r3, [r7, #7]
	for(idx=0; idx<16; idx++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	e036      	b.n	800061e <Keypad4x4_FindPins_positions+0x7e>
	{
		if(((KeypadStruct.OUT0pin>>idx)&0x0001) == 0x0001)
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <Keypad4x4_FindPins_positions+0x94>)
 80005b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80005b4:	461a      	mov	r2, r3
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	fa42 f303 	asr.w	r3, r2, r3
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d002      	beq.n	80005ca <Keypad4x4_FindPins_positions+0x2a>
		{
			OutPositions[0] = idx;
 80005c4:	4a1c      	ldr	r2, [pc, #112]	; (8000638 <Keypad4x4_FindPins_positions+0x98>)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	7013      	strb	r3, [r2, #0]
		}
		if(((KeypadStruct.OUT1pin>>idx)&0x0001) == 0x0001)
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <Keypad4x4_FindPins_positions+0x94>)
 80005cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80005ce:	461a      	mov	r2, r3
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	fa42 f303 	asr.w	r3, r2, r3
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <Keypad4x4_FindPins_positions+0x44>
		{
			OutPositions[1] = idx;
 80005de:	4a16      	ldr	r2, [pc, #88]	; (8000638 <Keypad4x4_FindPins_positions+0x98>)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	7053      	strb	r3, [r2, #1]
		}
		if(((KeypadStruct.OUT2pin>>idx)&0x0001) == 0x0001)
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <Keypad4x4_FindPins_positions+0x94>)
 80005e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80005e8:	461a      	mov	r2, r3
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	fa42 f303 	asr.w	r3, r2, r3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <Keypad4x4_FindPins_positions+0x5e>
		{
			OutPositions[2] = idx;
 80005f8:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <Keypad4x4_FindPins_positions+0x98>)
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	7093      	strb	r3, [r2, #2]
		}
		if(((KeypadStruct.OUT3pin>>idx)&0x0001) == 0x0001)
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <Keypad4x4_FindPins_positions+0x94>)
 8000600:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8000602:	461a      	mov	r2, r3
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	fa42 f303 	asr.w	r3, r2, r3
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <Keypad4x4_FindPins_positions+0x78>
		{
			OutPositions[3] = idx;
 8000612:	4a09      	ldr	r2, [pc, #36]	; (8000638 <Keypad4x4_FindPins_positions+0x98>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	70d3      	strb	r3, [r2, #3]
	for(idx=0; idx<16; idx++)
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	3301      	adds	r3, #1
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	2b0f      	cmp	r3, #15
 8000622:	d9c5      	bls.n	80005b0 <Keypad4x4_FindPins_positions+0x10>
		}
	}
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000098 	.word	0x20000098
 8000638:	200000c8 	.word	0x200000c8

0800063c <Keypad4x4_ChangeColomn>:
//Function(3): Change colomn number
static void Keypad4x4_ChangeColomn(uint8_t colNum_0_to_3)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	4603      	mov	r3, r0
 8000644:	71fb      	strb	r3, [r7, #7]
	if(colNum_0_to_3==0)
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d134      	bne.n	80006b6 <Keypad4x4_ChangeColomn+0x7a>
	{
		//Set selected colomn
		KeypadStruct.OUT0_Port->OTYPER &= ~(1UL << OutPositions[0]);
 800064c:	4b70      	ldr	r3, [pc, #448]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	6859      	ldr	r1, [r3, #4]
 8000652:	4b70      	ldr	r3, [pc, #448]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	2301      	movs	r3, #1
 800065a:	4093      	lsls	r3, r2
 800065c:	43da      	mvns	r2, r3
 800065e:	4b6c      	ldr	r3, [pc, #432]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 8000660:	691b      	ldr	r3, [r3, #16]
 8000662:	400a      	ands	r2, r1
 8000664:	605a      	str	r2, [r3, #4]
		
		//Make other colomns floating
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000666:	4b6a      	ldr	r3, [pc, #424]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	6859      	ldr	r1, [r3, #4]
 800066c:	4b69      	ldr	r3, [pc, #420]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 800066e:	785b      	ldrb	r3, [r3, #1]
 8000670:	461a      	mov	r2, r3
 8000672:	2301      	movs	r3, #1
 8000674:	fa03 f202 	lsl.w	r2, r3, r2
 8000678:	4b65      	ldr	r3, [pc, #404]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	430a      	orrs	r2, r1
 800067e:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 8000680:	4b63      	ldr	r3, [pc, #396]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	6859      	ldr	r1, [r3, #4]
 8000686:	4b63      	ldr	r3, [pc, #396]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 8000688:	789b      	ldrb	r3, [r3, #2]
 800068a:	461a      	mov	r2, r3
 800068c:	2301      	movs	r3, #1
 800068e:	fa03 f202 	lsl.w	r2, r3, r2
 8000692:	4b5f      	ldr	r3, [pc, #380]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	430a      	orrs	r2, r1
 8000698:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 800069a:	4b5d      	ldr	r3, [pc, #372]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	6859      	ldr	r1, [r3, #4]
 80006a0:	4b5c      	ldr	r3, [pc, #368]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 80006a2:	78db      	ldrb	r3, [r3, #3]
 80006a4:	461a      	mov	r2, r3
 80006a6:	2301      	movs	r3, #1
 80006a8:	fa03 f202 	lsl.w	r2, r3, r2
 80006ac:	4b58      	ldr	r3, [pc, #352]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	605a      	str	r2, [r3, #4]
		//Make other colomns floating
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
	}
}
 80006b4:	e0a6      	b.n	8000804 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==1)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d134      	bne.n	8000726 <Keypad4x4_ChangeColomn+0xea>
		KeypadStruct.OUT1_Port->OTYPER &= ~(1UL << OutPositions[1]);
 80006bc:	4b54      	ldr	r3, [pc, #336]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	6859      	ldr	r1, [r3, #4]
 80006c2:	4b54      	ldr	r3, [pc, #336]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 80006c4:	785b      	ldrb	r3, [r3, #1]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2301      	movs	r3, #1
 80006ca:	4093      	lsls	r3, r2
 80006cc:	43da      	mvns	r2, r3
 80006ce:	4b50      	ldr	r3, [pc, #320]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	400a      	ands	r2, r1
 80006d4:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 80006d6:	4b4e      	ldr	r3, [pc, #312]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	6859      	ldr	r1, [r3, #4]
 80006dc:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	2301      	movs	r3, #1
 80006e4:	fa03 f202 	lsl.w	r2, r3, r2
 80006e8:	4b49      	ldr	r3, [pc, #292]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	430a      	orrs	r2, r1
 80006ee:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 80006f0:	4b47      	ldr	r3, [pc, #284]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	6859      	ldr	r1, [r3, #4]
 80006f6:	4b47      	ldr	r3, [pc, #284]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 80006f8:	789b      	ldrb	r3, [r3, #2]
 80006fa:	461a      	mov	r2, r3
 80006fc:	2301      	movs	r3, #1
 80006fe:	fa03 f202 	lsl.w	r2, r3, r2
 8000702:	4b43      	ldr	r3, [pc, #268]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	430a      	orrs	r2, r1
 8000708:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 800070a:	4b41      	ldr	r3, [pc, #260]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	6859      	ldr	r1, [r3, #4]
 8000710:	4b40      	ldr	r3, [pc, #256]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 8000712:	78db      	ldrb	r3, [r3, #3]
 8000714:	461a      	mov	r2, r3
 8000716:	2301      	movs	r3, #1
 8000718:	fa03 f202 	lsl.w	r2, r3, r2
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	430a      	orrs	r2, r1
 8000722:	605a      	str	r2, [r3, #4]
}
 8000724:	e06e      	b.n	8000804 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==2)
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d134      	bne.n	8000796 <Keypad4x4_ChangeColomn+0x15a>
		KeypadStruct.OUT2_Port->OTYPER &= ~(1UL << OutPositions[2]);
 800072c:	4b38      	ldr	r3, [pc, #224]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	6859      	ldr	r1, [r3, #4]
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	461a      	mov	r2, r3
 8000738:	2301      	movs	r3, #1
 800073a:	4093      	lsls	r3, r2
 800073c:	43da      	mvns	r2, r3
 800073e:	4b34      	ldr	r3, [pc, #208]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	400a      	ands	r2, r1
 8000744:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 8000746:	4b32      	ldr	r3, [pc, #200]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	6859      	ldr	r1, [r3, #4]
 800074c:	4b31      	ldr	r3, [pc, #196]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	2301      	movs	r3, #1
 8000754:	fa03 f202 	lsl.w	r2, r3, r2
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	430a      	orrs	r2, r1
 800075e:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	6859      	ldr	r1, [r3, #4]
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 8000768:	785b      	ldrb	r3, [r3, #1]
 800076a:	461a      	mov	r2, r3
 800076c:	2301      	movs	r3, #1
 800076e:	fa03 f202 	lsl.w	r2, r3, r2
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	430a      	orrs	r2, r1
 8000778:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT3_Port->OTYPER |= (1UL << OutPositions[3]);
 800077a:	4b25      	ldr	r3, [pc, #148]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	6859      	ldr	r1, [r3, #4]
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 8000782:	78db      	ldrb	r3, [r3, #3]
 8000784:	461a      	mov	r2, r3
 8000786:	2301      	movs	r3, #1
 8000788:	fa03 f202 	lsl.w	r2, r3, r2
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	430a      	orrs	r2, r1
 8000792:	605a      	str	r2, [r3, #4]
}
 8000794:	e036      	b.n	8000804 <Keypad4x4_ChangeColomn+0x1c8>
	else if(colNum_0_to_3==3)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d133      	bne.n	8000804 <Keypad4x4_ChangeColomn+0x1c8>
		KeypadStruct.OUT3_Port->OTYPER &= ~(1UL << OutPositions[3]);
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 800079e:	69db      	ldr	r3, [r3, #28]
 80007a0:	6859      	ldr	r1, [r3, #4]
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 80007a4:	78db      	ldrb	r3, [r3, #3]
 80007a6:	461a      	mov	r2, r3
 80007a8:	2301      	movs	r3, #1
 80007aa:	4093      	lsls	r3, r2
 80007ac:	43da      	mvns	r2, r3
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	400a      	ands	r2, r1
 80007b4:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT0_Port->OTYPER |= (1UL << OutPositions[0]);
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	6859      	ldr	r1, [r3, #4]
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	2301      	movs	r3, #1
 80007c4:	fa03 f202 	lsl.w	r2, r3, r2
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT1_Port->OTYPER |= (1UL << OutPositions[1]);
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	6859      	ldr	r1, [r3, #4]
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 80007d8:	785b      	ldrb	r3, [r3, #1]
 80007da:	461a      	mov	r2, r3
 80007dc:	2301      	movs	r3, #1
 80007de:	fa03 f202 	lsl.w	r2, r3, r2
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	605a      	str	r2, [r3, #4]
		KeypadStruct.OUT2_Port->OTYPER |= (1UL << OutPositions[2]);
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	6859      	ldr	r1, [r3, #4]
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <Keypad4x4_ChangeColomn+0x1d8>)
 80007f2:	789b      	ldrb	r3, [r3, #2]
 80007f4:	461a      	mov	r2, r3
 80007f6:	2301      	movs	r3, #1
 80007f8:	fa03 f202 	lsl.w	r2, r3, r2
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <Keypad4x4_ChangeColomn+0x1d4>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	430a      	orrs	r2, r1
 8000802:	605a      	str	r2, [r3, #4]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	20000098 	.word	0x20000098
 8000814:	200000c8 	.word	0x200000c8

08000818 <Keypad4x4_ReadKeypad>:

//Function(4): Read active keypad button
void Keypad4x4_ReadKeypad(bool keys[16])
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	//Step(1): Make Col0 High and check the rows
	Keypad4x4_ChangeColomn(0);
 8000820:	2000      	movs	r0, #0
 8000822:	f7ff ff0b 	bl	800063c <Keypad4x4_ChangeColomn>
	keys[0] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 8000826:	4b95      	ldr	r3, [pc, #596]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a94      	ldr	r2, [pc, #592]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 800082c:	8c12      	ldrh	r2, [r2, #32]
 800082e:	4611      	mov	r1, r2
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fa3b 	bl	8001cac <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2da      	uxtb	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	701a      	strb	r2, [r3, #0]
	keys[4] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8000846:	4b8d      	ldr	r3, [pc, #564]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	4a8c      	ldr	r2, [pc, #560]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 800084c:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f001 fa2b 	bl	8001cac <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3304      	adds	r3, #4
 800085e:	2a00      	cmp	r2, #0
 8000860:	bf14      	ite	ne
 8000862:	2201      	movne	r2, #1
 8000864:	2200      	moveq	r2, #0
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	701a      	strb	r2, [r3, #0]
	keys[8] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 800086a:	4b84      	ldr	r3, [pc, #528]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	4a83      	ldr	r2, [pc, #524]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000870:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fa19 	bl	8001cac <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	3308      	adds	r3, #8
 8000882:	2a00      	cmp	r2, #0
 8000884:	bf14      	ite	ne
 8000886:	2201      	movne	r2, #1
 8000888:	2200      	moveq	r2, #0
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	701a      	strb	r2, [r3, #0]
	keys[12] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 800088e:	4b7b      	ldr	r3, [pc, #492]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000890:	68db      	ldr	r3, [r3, #12]
 8000892:	4a7a      	ldr	r2, [pc, #488]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000894:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fa07 	bl	8001cac <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	330c      	adds	r3, #12
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2201      	movne	r2, #1
 80008ac:	2200      	moveq	r2, #0
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	701a      	strb	r2, [r3, #0]
	
	//Step(2): Make Col1 High and check the rows
	Keypad4x4_ChangeColomn(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fec2 	bl	800063c <Keypad4x4_ChangeColomn>
	keys[1] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 80008b8:	4b70      	ldr	r3, [pc, #448]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a6f      	ldr	r2, [pc, #444]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 80008be:	8c12      	ldrh	r2, [r2, #32]
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 f9f2 	bl	8001cac <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3301      	adds	r3, #1
 80008d0:	2a00      	cmp	r2, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2201      	movne	r2, #1
 80008d6:	2200      	moveq	r2, #0
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	701a      	strb	r2, [r3, #0]
	keys[5] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 80008dc:	4b67      	ldr	r3, [pc, #412]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	4a66      	ldr	r2, [pc, #408]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 80008e2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80008e4:	4611      	mov	r1, r2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f9e0 	bl	8001cac <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3305      	adds	r3, #5
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	bf14      	ite	ne
 80008f8:	2201      	movne	r2, #1
 80008fa:	2200      	moveq	r2, #0
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	701a      	strb	r2, [r3, #0]
	keys[9] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 8000900:	4b5e      	ldr	r3, [pc, #376]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	4a5d      	ldr	r2, [pc, #372]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000906:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f001 f9ce 	bl	8001cac <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	461a      	mov	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3309      	adds	r3, #9
 8000918:	2a00      	cmp	r2, #0
 800091a:	bf14      	ite	ne
 800091c:	2201      	movne	r2, #1
 800091e:	2200      	moveq	r2, #0
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	701a      	strb	r2, [r3, #0]
	keys[13] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 8000924:	4b55      	ldr	r3, [pc, #340]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4a54      	ldr	r2, [pc, #336]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 800092a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f001 f9bc 	bl	8001cac <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	330d      	adds	r3, #13
 800093c:	2a00      	cmp	r2, #0
 800093e:	bf14      	ite	ne
 8000940:	2201      	movne	r2, #1
 8000942:	2200      	moveq	r2, #0
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	701a      	strb	r2, [r3, #0]
	
	//Step(3): Make Col2 High and check the rows
	Keypad4x4_ChangeColomn(2);
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff fe77 	bl	800063c <Keypad4x4_ChangeColomn>
	keys[2] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 800094e:	4b4b      	ldr	r3, [pc, #300]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a4a      	ldr	r2, [pc, #296]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000954:	8c12      	ldrh	r2, [r2, #32]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f001 f9a7 	bl	8001cac <HAL_GPIO_ReadPin>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3302      	adds	r3, #2
 8000966:	2a00      	cmp	r2, #0
 8000968:	bf14      	ite	ne
 800096a:	2201      	movne	r2, #1
 800096c:	2200      	moveq	r2, #0
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	701a      	strb	r2, [r3, #0]
	keys[6] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8000972:	4b42      	ldr	r3, [pc, #264]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4a41      	ldr	r2, [pc, #260]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000978:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f995 	bl	8001cac <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3306      	adds	r3, #6
 800098a:	2a00      	cmp	r2, #0
 800098c:	bf14      	ite	ne
 800098e:	2201      	movne	r2, #1
 8000990:	2200      	moveq	r2, #0
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	701a      	strb	r2, [r3, #0]
	keys[10] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 8000996:	4b39      	ldr	r3, [pc, #228]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	4a38      	ldr	r2, [pc, #224]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 800099c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 f983 	bl	8001cac <HAL_GPIO_ReadPin>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	330a      	adds	r3, #10
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	bf14      	ite	ne
 80009b2:	2201      	movne	r2, #1
 80009b4:	2200      	moveq	r2, #0
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	701a      	strb	r2, [r3, #0]
	keys[14] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 80009ba:	4b30      	ldr	r3, [pc, #192]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 80009bc:	68db      	ldr	r3, [r3, #12]
 80009be:	4a2f      	ldr	r2, [pc, #188]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 80009c0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 f971 	bl	8001cac <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	330e      	adds	r3, #14
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	bf14      	ite	ne
 80009d6:	2201      	movne	r2, #1
 80009d8:	2200      	moveq	r2, #0
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	701a      	strb	r2, [r3, #0]
	
	//Step(4): Make Col3 High and check the rows
	Keypad4x4_ChangeColomn(3);
 80009de:	2003      	movs	r0, #3
 80009e0:	f7ff fe2c 	bl	800063c <Keypad4x4_ChangeColomn>
	keys[3] = HAL_GPIO_ReadPin(KeypadStruct.IN0_Port, KeypadStruct.IN0pin);
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 80009ea:	8c12      	ldrh	r2, [r2, #32]
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f95c 	bl	8001cac <HAL_GPIO_ReadPin>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3303      	adds	r3, #3
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2201      	movne	r2, #1
 8000a02:	2200      	moveq	r2, #0
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	701a      	strb	r2, [r3, #0]
	keys[7] = HAL_GPIO_ReadPin(KeypadStruct.IN1_Port, KeypadStruct.IN1pin);
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000a0e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 f94a 	bl	8001cac <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3307      	adds	r3, #7
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	bf14      	ite	ne
 8000a24:	2201      	movne	r2, #1
 8000a26:	2200      	moveq	r2, #0
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	701a      	strb	r2, [r3, #0]
	keys[11] = HAL_GPIO_ReadPin(KeypadStruct.IN2_Port, KeypadStruct.IN2pin);
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000a32:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 f938 	bl	8001cac <HAL_GPIO_ReadPin>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	330b      	adds	r3, #11
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	bf14      	ite	ne
 8000a48:	2201      	movne	r2, #1
 8000a4a:	2200      	moveq	r2, #0
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	701a      	strb	r2, [r3, #0]
	keys[15] = HAL_GPIO_ReadPin(KeypadStruct.IN3_Port, KeypadStruct.IN3pin);
 8000a50:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	4a09      	ldr	r2, [pc, #36]	; (8000a7c <Keypad4x4_ReadKeypad+0x264>)
 8000a56:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000a58:	4611      	mov	r1, r2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f926 	bl	8001cac <HAL_GPIO_ReadPin>
 8000a60:	4603      	mov	r3, r0
 8000a62:	461a      	mov	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	330f      	adds	r3, #15
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	2201      	movne	r2, #1
 8000a6e:	2200      	moveq	r2, #0
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	701a      	strb	r2, [r3, #0]
}	
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000098 	.word	0x20000098

08000a80 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f023 030f 	bic.w	r3, r3, #15
 8000a90:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	f043 030c 	orr.w	r3, r3, #12
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000aac:	7bbb      	ldrb	r3, [r7, #14]
 8000aae:	f043 030c 	orr.w	r3, r3, #12
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000ab6:	7bbb      	ldrb	r3, [r7, #14]
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ac0:	f107 0208 	add.w	r2, r7, #8
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	2304      	movs	r3, #4
 8000aca:	214e      	movs	r1, #78	; 0x4e
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <lcd_send_cmd+0x5c>)
 8000ace:	f002 fe6d 	bl	80037ac <HAL_I2C_Master_Transmit>
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000cc 	.word	0x200000cc

08000ae0 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f023 030f 	bic.w	r3, r3, #15
 8000af0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	011b      	lsls	r3, r3, #4
 8000af6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	f043 030d 	orr.w	r3, r3, #13
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	f043 0309 	orr.w	r3, r3, #9
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	f043 030d 	orr.w	r3, r3, #13
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000b16:	7bbb      	ldrb	r3, [r7, #14]
 8000b18:	f043 0309 	orr.w	r3, r3, #9
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b20:	f107 0208 	add.w	r2, r7, #8
 8000b24:	2364      	movs	r3, #100	; 0x64
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2304      	movs	r3, #4
 8000b2a:	214e      	movs	r1, #78	; 0x4e
 8000b2c:	4803      	ldr	r0, [pc, #12]	; (8000b3c <lcd_send_data+0x5c>)
 8000b2e:	f002 fe3d 	bl	80037ac <HAL_I2C_Master_Transmit>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000cc 	.word	0x200000cc

08000b40 <lcd_clear>:

void lcd_clear (void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000b46:	2080      	movs	r0, #128	; 0x80
 8000b48:	f7ff ff9a 	bl	8000a80 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	e005      	b.n	8000b5e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000b52:	2020      	movs	r0, #32
 8000b54:	f7ff ffc4 	bl	8000ae0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b45      	cmp	r3, #69	; 0x45
 8000b62:	ddf6      	ble.n	8000b52 <lcd_clear+0x12>
	}
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
    switch (row)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <lcd_put_cur+0x18>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d005      	beq.n	8000b90 <lcd_put_cur+0x22>
 8000b84:	e009      	b.n	8000b9a <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	603b      	str	r3, [r7, #0]
            break;
 8000b8e:	e004      	b.n	8000b9a <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b96:	603b      	str	r3, [r7, #0]
            break;
 8000b98:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff6e 	bl	8000a80 <lcd_send_cmd>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <lcd_init>:


void lcd_init (void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000bb0:	2032      	movs	r0, #50	; 0x32
 8000bb2:	f000 fda9 	bl	8001708 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bb6:	2030      	movs	r0, #48	; 0x30
 8000bb8:	f7ff ff62 	bl	8000a80 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000bbc:	2005      	movs	r0, #5
 8000bbe:	f000 fda3 	bl	8001708 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bc2:	2030      	movs	r0, #48	; 0x30
 8000bc4:	f7ff ff5c 	bl	8000a80 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 fd9d 	bl	8001708 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bce:	2030      	movs	r0, #48	; 0x30
 8000bd0:	f7ff ff56 	bl	8000a80 <lcd_send_cmd>
	HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f000 fd97 	bl	8001708 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000bda:	2020      	movs	r0, #32
 8000bdc:	f7ff ff50 	bl	8000a80 <lcd_send_cmd>
	HAL_Delay(10);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f000 fd91 	bl	8001708 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000be6:	2028      	movs	r0, #40	; 0x28
 8000be8:	f7ff ff4a 	bl	8000a80 <lcd_send_cmd>
	HAL_Delay(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f000 fd8b 	bl	8001708 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bf2:	2008      	movs	r0, #8
 8000bf4:	f7ff ff44 	bl	8000a80 <lcd_send_cmd>
	HAL_Delay(1);
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fd85 	bl	8001708 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff ff3e 	bl	8000a80 <lcd_send_cmd>
	HAL_Delay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f000 fd7f 	bl	8001708 <HAL_Delay>
	HAL_Delay(1);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 fd7c 	bl	8001708 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000c10:	2006      	movs	r0, #6
 8000c12:	f7ff ff35 	bl	8000a80 <lcd_send_cmd>
	HAL_Delay(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 fd76 	bl	8001708 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000c1c:	200c      	movs	r0, #12
 8000c1e:	f7ff ff2f 	bl	8000a80 <lcd_send_cmd>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000c2e:	e006      	b.n	8000c3e <lcd_send_string+0x18>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	1c5a      	adds	r2, r3, #1
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff51 	bl	8000ae0 <lcd_send_data>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1f4      	bne.n	8000c30 <lcd_send_string+0xa>
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <addressFinder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void addressFinder() //this func. is find lcd slave address
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	for(LCD_ADDRESS = 0; LCD_ADDRESS<=255; LCD_ADDRESS++)
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <addressFinder+0x34>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDRESS, 1, 100)==HAL_OK)
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <addressFinder+0x34>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b299      	uxth	r1, r3
 8000c60:	2364      	movs	r3, #100	; 0x64
 8000c62:	2201      	movs	r2, #1
 8000c64:	4808      	ldr	r0, [pc, #32]	; (8000c88 <addressFinder+0x38>)
 8000c66:	f002 fe9f 	bl	80039a8 <HAL_I2C_IsDeviceReady>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d006      	beq.n	8000c7e <addressFinder+0x2e>
	for(LCD_ADDRESS = 0; LCD_ADDRESS<=255; LCD_ADDRESS++)
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <addressFinder+0x34>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <addressFinder+0x34>)
 8000c7a:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_IsDeviceReady(&hi2c1, LCD_ADDRESS, 1, 100)==HAL_OK)
 8000c7c:	e7ed      	b.n	8000c5a <addressFinder+0xa>
			break;
 8000c7e:	bf00      	nop
	}
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200001c0 	.word	0x200001c0
 8000c88:	200000cc 	.word	0x200000cc

08000c8c <write_KeyPad_to_LCDdisplay>:


void write_KeyPad_to_LCDdisplay()
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
    for(int i=0; i<16; i++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	e073      	b.n	8000d80 <write_KeyPad_to_LCDdisplay+0xf4>
    {
    	if(myKeys[i])
 8000c98:	4a3d      	ldr	r2, [pc, #244]	; (8000d90 <write_KeyPad_to_LCDdisplay+0x104>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d06a      	beq.n	8000d7a <write_KeyPad_to_LCDdisplay+0xee>

    	{
            switch (i)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b0f      	cmp	r3, #15
 8000ca8:	d862      	bhi.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
 8000caa:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <write_KeyPad_to_LCDdisplay+0x24>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000cf1 	.word	0x08000cf1
 8000cb4:	08000cf9 	.word	0x08000cf9
 8000cb8:	08000d01 	.word	0x08000d01
 8000cbc:	08000d09 	.word	0x08000d09
 8000cc0:	08000d11 	.word	0x08000d11
 8000cc4:	08000d19 	.word	0x08000d19
 8000cc8:	08000d21 	.word	0x08000d21
 8000ccc:	08000d29 	.word	0x08000d29
 8000cd0:	08000d31 	.word	0x08000d31
 8000cd4:	08000d39 	.word	0x08000d39
 8000cd8:	08000d41 	.word	0x08000d41
 8000cdc:	08000d49 	.word	0x08000d49
 8000ce0:	08000d51 	.word	0x08000d51
 8000ce4:	08000d59 	.word	0x08000d59
 8000ce8:	08000d61 	.word	0x08000d61
 8000cec:	08000d69 	.word	0x08000d69
            {
                case 0: pressedKey = '1'; break;
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000cf2:	2231      	movs	r2, #49	; 0x31
 8000cf4:	701a      	strb	r2, [r3, #0]
 8000cf6:	e03b      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 1: pressedKey = '2'; break;
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000cfa:	2232      	movs	r2, #50	; 0x32
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e037      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 2: pressedKey = '3'; break;
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d02:	2233      	movs	r2, #51	; 0x33
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e033      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 3: pressedKey = 'A'; break;
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d0a:	2241      	movs	r2, #65	; 0x41
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	e02f      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 4: pressedKey = '4'; break;
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d12:	2234      	movs	r2, #52	; 0x34
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	e02b      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 5: pressedKey = '5'; break;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d1a:	2235      	movs	r2, #53	; 0x35
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	e027      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 6: pressedKey = '6'; break;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d22:	2236      	movs	r2, #54	; 0x36
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e023      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 7: pressedKey = 'B'; break;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d2a:	2242      	movs	r2, #66	; 0x42
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	e01f      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 8: pressedKey = '7'; break;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d32:	2237      	movs	r2, #55	; 0x37
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	e01b      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 9: pressedKey = '8'; break;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d3a:	2238      	movs	r2, #56	; 0x38
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e017      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 10: pressedKey = '9'; break;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d42:	2239      	movs	r2, #57	; 0x39
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e013      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 11: pressedKey = 'C'; break;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d4a:	2243      	movs	r2, #67	; 0x43
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e00f      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 12: pressedKey = '*'; break;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d52:	222a      	movs	r2, #42	; 0x2a
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	e00b      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 13: pressedKey = '0'; break;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d5a:	2230      	movs	r2, #48	; 0x30
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e007      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 14: pressedKey = '#'; break;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d62:	2223      	movs	r2, #35	; 0x23
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	e003      	b.n	8000d70 <write_KeyPad_to_LCDdisplay+0xe4>
                case 15: pressedKey = 'D'; break;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d6a:	2244      	movs	r2, #68	; 0x44
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	bf00      	nop
            }
            lcd_send_data(pressedKey);
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <write_KeyPad_to_LCDdisplay+0x108>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff feb3 	bl	8000ae0 <lcd_send_data>
    for(int i=0; i<16; i++)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	dd88      	ble.n	8000c98 <write_KeyPad_to_LCDdisplay+0xc>
    	}
    }
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200001c4 	.word	0x200001c4
 8000d94:	200001d4 	.word	0x200001d4

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	; 0x30
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Keypad_WiresTypeDef myKeyPad;
	myKeyPad.IN0_Port = GPIOD;
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <main+0xb8>)
 8000da0:	603b      	str	r3, [r7, #0]
	myKeyPad.IN1_Port = GPIOD;
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <main+0xb8>)
 8000da4:	607b      	str	r3, [r7, #4]
	myKeyPad.IN2_Port = GPIOD;
 8000da6:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <main+0xb8>)
 8000da8:	60bb      	str	r3, [r7, #8]
	myKeyPad.IN3_Port = GPIOD;
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <main+0xb8>)
 8000dac:	60fb      	str	r3, [r7, #12]
	myKeyPad.OUT0_Port = GPIOD;
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <main+0xb8>)
 8000db0:	613b      	str	r3, [r7, #16]
	myKeyPad.OUT1_Port = GPIOD;
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <main+0xb8>)
 8000db4:	617b      	str	r3, [r7, #20]
	myKeyPad.OUT2_Port = GPIOD;
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <main+0xb8>)
 8000db8:	61bb      	str	r3, [r7, #24]
	myKeyPad.OUT3_Port = GPIOD;
 8000dba:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <main+0xb8>)
 8000dbc:	61fb      	str	r3, [r7, #28]
	myKeyPad.IN0pin = GPIO_PIN_0;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	843b      	strh	r3, [r7, #32]
	myKeyPad.IN1pin = GPIO_PIN_1;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	847b      	strh	r3, [r7, #34]	; 0x22
	myKeyPad.IN2pin = GPIO_PIN_2;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	84bb      	strh	r3, [r7, #36]	; 0x24
	myKeyPad.IN3pin = GPIO_PIN_3;
 8000dca:	2308      	movs	r3, #8
 8000dcc:	84fb      	strh	r3, [r7, #38]	; 0x26
	myKeyPad.OUT0pin = GPIO_PIN_4;
 8000dce:	2310      	movs	r3, #16
 8000dd0:	853b      	strh	r3, [r7, #40]	; 0x28
	myKeyPad.OUT1pin = GPIO_PIN_5;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	857b      	strh	r3, [r7, #42]	; 0x2a
	myKeyPad.OUT2pin = GPIO_PIN_6;
 8000dd6:	2340      	movs	r3, #64	; 0x40
 8000dd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	myKeyPad.OUT3pin = GPIO_PIN_7;
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dde:	f000 fc21 	bl	8001624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de2:	f000 f83f 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de6:	f000 f93b 	bl	8001060 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000dea:	f000 f8a5 	bl	8000f38 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000dee:	f000 f8d1 	bl	8000f94 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000df2:	f000 f8ff 	bl	8000ff4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000df6:	f007 fbd1 	bl	800859c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  Keypad4x4_Init(&myKeyPad);
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fb61 	bl	80004c4 <Keypad4x4_Init>

  addressFinder();
 8000e02:	f7ff ff25 	bl	8000c50 <addressFinder>
  lcd_init();
 8000e06:	f7ff fed1 	bl	8000bac <lcd_init>
  lcd_put_cur(0, 0);
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff feae 	bl	8000b6e <lcd_put_cur>
  lcd_send_string ("STM32-I2C-LCD");
 8000e12:	4810      	ldr	r0, [pc, #64]	; (8000e54 <main+0xbc>)
 8000e14:	f7ff ff07 	bl	8000c26 <lcd_send_string>
  lcd_put_cur(1, 0);
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff fea7 	bl	8000b6e <lcd_put_cur>
  lcd_send_string("SILICON ROOM");
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <main+0xc0>)
 8000e22:	f7ff ff00 	bl	8000c26 <lcd_send_string>
  HAL_Delay(4000);
 8000e26:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000e2a:	f000 fc6d 	bl	8001708 <HAL_Delay>
  lcd_clear();
 8000e2e:	f7ff fe87 	bl	8000b40 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e32:	f007 fbd9 	bl	80085e8 <MX_USB_HOST_Process>

    Keypad4x4_ReadKeypad(myKeys);
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <main+0xc4>)
 8000e38:	f7ff fcee 	bl	8000818 <Keypad4x4_ReadKeypad>

    lcd_put_cur(0, 0);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff fe95 	bl	8000b6e <lcd_put_cur>
    lcd_send_string("Key Value -> ");
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <main+0xc8>)
 8000e46:	f7ff feee 	bl	8000c26 <lcd_send_string>
    write_KeyPad_to_LCDdisplay();
 8000e4a:	f7ff ff1f 	bl	8000c8c <write_KeyPad_to_LCDdisplay>
    MX_USB_HOST_Process();
 8000e4e:	e7f0      	b.n	8000e32 <main+0x9a>
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	08008e5c 	.word	0x08008e5c
 8000e58:	08008e6c 	.word	0x08008e6c
 8000e5c:	200001c4 	.word	0x200001c4
 8000e60:	08008e7c 	.word	0x08008e7c

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	; 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	2230      	movs	r2, #48	; 0x30
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f007 ff56 	bl	8008d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <SystemClock_Config+0xcc>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <SystemClock_Config+0xcc>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <SystemClock_Config+0xcc>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <SystemClock_Config+0xd0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a21      	ldr	r2, [pc, #132]	; (8000f34 <SystemClock_Config+0xd0>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <SystemClock_Config+0xd0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ece:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ed8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fd34 	bl	8004958 <HAL_RCC_OscConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ef6:	f000 f9b1 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2105      	movs	r1, #5
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 ff95 	bl	8004e48 <HAL_RCC_ClockConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f24:	f000 f99a 	bl	800125c <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3750      	adds	r7, #80	; 0x50
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <MX_I2C1_Init+0x54>)
 8000f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f44:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_I2C1_Init+0x58>)
 8000f46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f76:	f002 fad5 	bl	8003524 <HAL_I2C_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f80:	f000 f96c 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000cc 	.word	0x200000cc
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	00061a80 	.word	0x00061a80

08000f94 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <MX_I2S3_Init+0x58>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <MX_I2S3_Init+0x5c>)
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fd4:	f003 f820 	bl	8004018 <HAL_I2S_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000fde:	f000 f93d 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000120 	.word	0x20000120
 8000fec:	40003c00 	.word	0x40003c00
 8000ff0:	00017700 	.word	0x00017700

08000ff4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_SPI1_Init+0x64>)
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <MX_SPI1_Init+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_SPI1_Init+0x64>)
 8001000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001004:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_SPI1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_SPI1_Init+0x64>)
 8001020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001024:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_SPI1_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_SPI1_Init+0x64>)
 8001040:	220a      	movs	r2, #10
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_SPI1_Init+0x64>)
 8001046:	f004 fa4b 	bl	80054e0 <HAL_SPI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001050:	f000 f904 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000168 	.word	0x20000168
 800105c:	40013000 	.word	0x40013000

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	4b72      	ldr	r3, [pc, #456]	; (8001244 <MX_GPIO_Init+0x1e4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a71      	ldr	r2, [pc, #452]	; (8001244 <MX_GPIO_Init+0x1e4>)
 8001080:	f043 0310 	orr.w	r3, r3, #16
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b6f      	ldr	r3, [pc, #444]	; (8001244 <MX_GPIO_Init+0x1e4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	61bb      	str	r3, [r7, #24]
 8001090:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <MX_GPIO_Init+0x1e4>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <MX_GPIO_Init+0x1e4>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b68      	ldr	r3, [pc, #416]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b64      	ldr	r3, [pc, #400]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a63      	ldr	r2, [pc, #396]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b61      	ldr	r3, [pc, #388]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a5c      	ldr	r2, [pc, #368]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	4b56      	ldr	r3, [pc, #344]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a55      	ldr	r2, [pc, #340]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b53      	ldr	r3, [pc, #332]	; (8001244 <MX_GPIO_Init+0x1e4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b4f      	ldr	r3, [pc, #316]	; (8001244 <MX_GPIO_Init+0x1e4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a4e      	ldr	r2, [pc, #312]	; (8001244 <MX_GPIO_Init+0x1e4>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b4c      	ldr	r3, [pc, #304]	; (8001244 <MX_GPIO_Init+0x1e4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2108      	movs	r1, #8
 8001122:	4849      	ldr	r0, [pc, #292]	; (8001248 <MX_GPIO_Init+0x1e8>)
 8001124:	f000 fdda 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2101      	movs	r1, #1
 800112c:	4847      	ldr	r0, [pc, #284]	; (800124c <MX_GPIO_Init+0x1ec>)
 800112e:	f000 fdd5 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001132:	2200      	movs	r2, #0
 8001134:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8001138:	4845      	ldr	r0, [pc, #276]	; (8001250 <MX_GPIO_Init+0x1f0>)
 800113a:	f000 fdcf 	bl	8001cdc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800113e:	2308      	movs	r3, #8
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	483c      	ldr	r0, [pc, #240]	; (8001248 <MX_GPIO_Init+0x1e8>)
 8001156:	f000 fc0d 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800115a:	2301      	movs	r3, #1
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4836      	ldr	r0, [pc, #216]	; (800124c <MX_GPIO_Init+0x1ec>)
 8001172:	f000 fbff 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001176:	2308      	movs	r3, #8
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001186:	2305      	movs	r3, #5
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	482e      	ldr	r0, [pc, #184]	; (800124c <MX_GPIO_Init+0x1ec>)
 8001192:	f000 fbef 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001196:	2301      	movs	r3, #1
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800119a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 031c 	add.w	r3, r7, #28
 80011a8:	4619      	mov	r1, r3
 80011aa:	482a      	ldr	r0, [pc, #168]	; (8001254 <MX_GPIO_Init+0x1f4>)
 80011ac:	f000 fbe2 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80011b0:	2304      	movs	r3, #4
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4825      	ldr	r0, [pc, #148]	; (8001258 <MX_GPIO_Init+0x1f8>)
 80011c4:	f000 fbd6 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80011c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011da:	2305      	movs	r3, #5
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	481c      	ldr	r0, [pc, #112]	; (8001258 <MX_GPIO_Init+0x1f8>)
 80011e6:	f000 fbc5 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011ea:	f24f 03f0 	movw	r3, #61680	; 0xf0f0
 80011ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_GPIO_Init+0x1f0>)
 8001204:	f000 fbb6 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001208:	230f      	movs	r3, #15
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_GPIO_Init+0x1f0>)
 800121c:	f000 fbaa 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001224:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_GPIO_Init+0x1e8>)
 8001236:	f000 fb9d 	bl	8001974 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800123a:	bf00      	nop
 800123c:	3730      	adds	r7, #48	; 0x30
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40021000 	.word	0x40021000
 800124c:	40020800 	.word	0x40020800
 8001250:	40020c00 	.word	0x40020c00
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>
	...

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <HAL_MspInit+0x4c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_MspInit+0x4c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a6:	2007      	movs	r0, #7
 80012a8:	f000 fb22 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <HAL_I2C_MspInit+0x84>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12c      	bne.n	8001334 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_I2C_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_I2C_MspInit+0x88>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_I2C_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80012f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fc:	2312      	movs	r3, #18
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001308:	2304      	movs	r3, #4
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <HAL_I2C_MspInit+0x8c>)
 8001314:	f000 fb2e 	bl	8001974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_I2C_MspInit+0x88>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_I2C_MspInit+0x88>)
 8001322:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001326:	6413      	str	r3, [r2, #64]	; 0x40
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_I2C_MspInit+0x88>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40005400 	.word	0x40005400
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400

08001348 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	; 0x38
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a31      	ldr	r2, [pc, #196]	; (8001438 <HAL_I2S_MspInit+0xf0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d15a      	bne.n	800142e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001378:	2301      	movs	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800137c:	23c0      	movs	r3, #192	; 0xc0
 800137e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4618      	mov	r0, r3
 800138a:	f003 ff69 	bl	8005260 <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001394:	f7ff ff62 	bl	800125c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <HAL_I2S_MspInit+0xf4>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <HAL_I2S_MspInit+0xf4>)
 80013a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013a6:	6413      	str	r3, [r2, #64]	; 0x40
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_I2S_MspInit+0xf4>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_I2S_MspInit+0xf4>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_I2S_MspInit+0xf4>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <HAL_I2S_MspInit+0xf4>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <HAL_I2S_MspInit+0xf4>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a18      	ldr	r2, [pc, #96]	; (800143c <HAL_I2S_MspInit+0xf4>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <HAL_I2S_MspInit+0xf4>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013ec:	2310      	movs	r3, #16
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013fc:	2306      	movs	r3, #6
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	480e      	ldr	r0, [pc, #56]	; (8001440 <HAL_I2S_MspInit+0xf8>)
 8001408:	f000 fab4 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800140c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800141e:	2306      	movs	r3, #6
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <HAL_I2S_MspInit+0xfc>)
 800142a:	f000 faa3 	bl	8001974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3738      	adds	r7, #56	; 0x38
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40003c00 	.word	0x40003c00
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020800 	.word	0x40020800

08001448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <HAL_SPI_MspInit+0x84>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12b      	bne.n	80014c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_SPI_MspInit+0x88>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_SPI_MspInit+0x88>)
 8001474:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001478:	6453      	str	r3, [r2, #68]	; 0x44
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_SPI_MspInit+0x88>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_SPI_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <HAL_SPI_MspInit+0x88>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_SPI_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014a2:	23e0      	movs	r3, #224	; 0xe0
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b2:	2305      	movs	r3, #5
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_SPI_MspInit+0x8c>)
 80014be:	f000 fa59 	bl	8001974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40013000 	.word	0x40013000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 f8d0 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <OTG_FS_IRQHandler+0x10>)
 8001532:	f000 fe57 	bl	80021e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200005bc 	.word	0x200005bc

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	; (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f007 fbf0 	bl	8008d54 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <_sbrk+0x64>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20020000 	.word	0x20020000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	200001d8 	.word	0x200001d8
 80015a8:	20000a08 	.word	0x20000a08

080015ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d6:	490e      	ldr	r1, [pc, #56]	; (8001610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015ec:	4c0b      	ldr	r4, [pc, #44]	; (800161c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015fa:	f7ff ffd7 	bl	80015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f007 fbaf 	bl	8008d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff fbc9 	bl	8000d98 <main>
  bx  lr    
 8001606:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001614:	08008eb8 	.word	0x08008eb8
  ldr r2, =_sbss
 8001618:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800161c:	20000a08 	.word	0x20000a08

08001620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_Init+0x40>)
 800162e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <HAL_Init+0x40>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_Init+0x40>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 f94f 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f808 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff fe06 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f967 	bl	800195a <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 f92f 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000000 	.word	0x20000000
 80016c0:	20000008 	.word	0x20000008
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000008 	.word	0x20000008
 80016ec:	200001dc 	.word	0x200001dc

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200001dc 	.word	0x200001dc

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff29 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff3e 	bl	8001798 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff31 	bl	80017b4 <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	e16b      	b.n	8001c68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001990:	2201      	movs	r2, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	f040 815a 	bne.w	8001c62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d005      	beq.n	80019c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d130      	bne.n	8001a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4013      	ands	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019fc:	2201      	movs	r2, #1
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 0201 	and.w	r2, r3, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d017      	beq.n	8001a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d123      	bne.n	8001ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	08da      	lsrs	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3208      	adds	r2, #8
 8001a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	69b9      	ldr	r1, [r7, #24]
 8001ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 0203 	and.w	r2, r3, #3
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80b4 	beq.w	8001c62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b60      	ldr	r3, [pc, #384]	; (8001c80 <HAL_GPIO_Init+0x30c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	4a5f      	ldr	r2, [pc, #380]	; (8001c80 <HAL_GPIO_Init+0x30c>)
 8001b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b08:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0a:	4b5d      	ldr	r3, [pc, #372]	; (8001c80 <HAL_GPIO_Init+0x30c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b16:	4a5b      	ldr	r2, [pc, #364]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	089b      	lsrs	r3, r3, #2
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <HAL_GPIO_Init+0x314>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d02b      	beq.n	8001b9a <HAL_GPIO_Init+0x226>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <HAL_GPIO_Init+0x318>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d025      	beq.n	8001b96 <HAL_GPIO_Init+0x222>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a50      	ldr	r2, [pc, #320]	; (8001c90 <HAL_GPIO_Init+0x31c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d01f      	beq.n	8001b92 <HAL_GPIO_Init+0x21e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4f      	ldr	r2, [pc, #316]	; (8001c94 <HAL_GPIO_Init+0x320>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d019      	beq.n	8001b8e <HAL_GPIO_Init+0x21a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4e      	ldr	r2, [pc, #312]	; (8001c98 <HAL_GPIO_Init+0x324>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d013      	beq.n	8001b8a <HAL_GPIO_Init+0x216>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4d      	ldr	r2, [pc, #308]	; (8001c9c <HAL_GPIO_Init+0x328>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d00d      	beq.n	8001b86 <HAL_GPIO_Init+0x212>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ca0 <HAL_GPIO_Init+0x32c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d007      	beq.n	8001b82 <HAL_GPIO_Init+0x20e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a4b      	ldr	r2, [pc, #300]	; (8001ca4 <HAL_GPIO_Init+0x330>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_GPIO_Init+0x20a>
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	e00e      	b.n	8001b9c <HAL_GPIO_Init+0x228>
 8001b7e:	2308      	movs	r3, #8
 8001b80:	e00c      	b.n	8001b9c <HAL_GPIO_Init+0x228>
 8001b82:	2306      	movs	r3, #6
 8001b84:	e00a      	b.n	8001b9c <HAL_GPIO_Init+0x228>
 8001b86:	2305      	movs	r3, #5
 8001b88:	e008      	b.n	8001b9c <HAL_GPIO_Init+0x228>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x228>
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x228>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x228>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x228>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f002 0203 	and.w	r2, r2, #3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bac:	4935      	ldr	r1, [pc, #212]	; (8001c84 <HAL_GPIO_Init+0x310>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bde:	4a32      	ldr	r2, [pc, #200]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be4:	4b30      	ldr	r3, [pc, #192]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c08:	4a27      	ldr	r2, [pc, #156]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c38:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c5c:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <HAL_GPIO_Init+0x334>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	f67f ae90 	bls.w	8001990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40013800 	.word	0x40013800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40021800 	.word	0x40021800
 8001ca4:	40021c00 	.word	0x40021c00
 8001ca8:	40013c00 	.word	0x40013c00

08001cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	887b      	ldrh	r3, [r7, #2]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	73fb      	strb	r3, [r7, #15]
 8001cc8:	e001      	b.n	8001cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d10:	b08f      	sub	sp, #60	; 0x3c
 8001d12:	af0a      	add	r7, sp, #40	; 0x28
 8001d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e054      	b.n	8001dca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f006 fc8c 	bl	8008658 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2203      	movs	r2, #3
 8001d44:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d102      	bne.n	8001d5a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fcb9 	bl	80056d6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	603b      	str	r3, [r7, #0]
 8001d6a:	687e      	ldr	r6, [r7, #4]
 8001d6c:	466d      	mov	r5, sp
 8001d6e:	f106 0410 	add.w	r4, r6, #16
 8001d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d82:	1d33      	adds	r3, r6, #4
 8001d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d86:	6838      	ldr	r0, [r7, #0]
 8001d88:	f003 fc33 	bl	80055f2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fcb0 	bl	80056f8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	687e      	ldr	r6, [r7, #4]
 8001da0:	466d      	mov	r5, sp
 8001da2:	f106 0410 	add.w	r4, r6, #16
 8001da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db6:	1d33      	adds	r3, r6, #4
 8001db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dba:	6838      	ldr	r0, [r7, #0]
 8001dbc:	f003 fe38 	bl	8005a30 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001dd2:	b590      	push	{r4, r7, lr}
 8001dd4:	b089      	sub	sp, #36	; 0x24
 8001dd6:	af04      	add	r7, sp, #16
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	4608      	mov	r0, r1
 8001ddc:	4611      	mov	r1, r2
 8001dde:	461a      	mov	r2, r3
 8001de0:	4603      	mov	r3, r0
 8001de2:	70fb      	strb	r3, [r7, #3]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70bb      	strb	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_HCD_HC_Init+0x28>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e076      	b.n	8001ee8 <HAL_HCD_HC_Init+0x116>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	212c      	movs	r1, #44	; 0x2c
 8001e08:	fb01 f303 	mul.w	r3, r1, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	333d      	adds	r3, #61	; 0x3d
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	3338      	adds	r3, #56	; 0x38
 8001e22:	787a      	ldrb	r2, [r7, #1]
 8001e24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	212c      	movs	r1, #44	; 0x2c
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	3340      	adds	r3, #64	; 0x40
 8001e34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e36:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	212c      	movs	r1, #44	; 0x2c
 8001e3e:	fb01 f303 	mul.w	r3, r1, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	3339      	adds	r3, #57	; 0x39
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e4a:	78fb      	ldrb	r3, [r7, #3]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	212c      	movs	r1, #44	; 0x2c
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	333f      	adds	r3, #63	; 0x3f
 8001e58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001e5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	78ba      	ldrb	r2, [r7, #2]
 8001e62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e66:	b2d0      	uxtb	r0, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	212c      	movs	r1, #44	; 0x2c
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	333a      	adds	r3, #58	; 0x3a
 8001e74:	4602      	mov	r2, r0
 8001e76:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001e78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	da09      	bge.n	8001e94 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	212c      	movs	r1, #44	; 0x2c
 8001e86:	fb01 f303 	mul.w	r3, r1, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	333b      	adds	r3, #59	; 0x3b
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
 8001e92:	e008      	b.n	8001ea6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	333b      	adds	r3, #59	; 0x3b
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	212c      	movs	r1, #44	; 0x2c
 8001eac:	fb01 f303 	mul.w	r3, r1, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	333c      	adds	r3, #60	; 0x3c
 8001eb4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001eb8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	787c      	ldrb	r4, [r7, #1]
 8001ec0:	78ba      	ldrb	r2, [r7, #2]
 8001ec2:	78f9      	ldrb	r1, [r7, #3]
 8001ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	f003 ff31 	bl	8005d3c <USB_HC_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd90      	pop	{r4, r7, pc}

08001ef0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_HCD_HC_Halt+0x1e>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e00f      	b.n	8001f2e <HAL_HCD_HC_Halt+0x3e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f004 f981 	bl	8006226 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	4608      	mov	r0, r1
 8001f42:	4611      	mov	r1, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	4603      	mov	r3, r0
 8001f48:	70fb      	strb	r3, [r7, #3]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70bb      	strb	r3, [r7, #2]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	333b      	adds	r3, #59	; 0x3b
 8001f60:	78ba      	ldrb	r2, [r7, #2]
 8001f62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	333f      	adds	r3, #63	; 0x3f
 8001f72:	787a      	ldrb	r2, [r7, #1]
 8001f74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f76:	7c3b      	ldrb	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d112      	bne.n	8001fa2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	212c      	movs	r1, #44	; 0x2c
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	3342      	adds	r3, #66	; 0x42
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	212c      	movs	r1, #44	; 0x2c
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	333d      	adds	r3, #61	; 0x3d
 8001f9c:	7f3a      	ldrb	r2, [r7, #28]
 8001f9e:	701a      	strb	r2, [r3, #0]
 8001fa0:	e008      	b.n	8001fb4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3342      	adds	r3, #66	; 0x42
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001fb4:	787b      	ldrb	r3, [r7, #1]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	f200 80c6 	bhi.w	8002148 <HAL_HCD_HC_SubmitRequest+0x210>
 8001fbc:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08002135 	.word	0x08002135
 8001fcc:	08002039 	.word	0x08002039
 8001fd0:	080020b7 	.word	0x080020b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001fd4:	7c3b      	ldrb	r3, [r7, #16]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 80b8 	bne.w	800214c <HAL_HCD_HC_SubmitRequest+0x214>
 8001fdc:	78bb      	ldrb	r3, [r7, #2]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 80b4 	bne.w	800214c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001fe4:	8b3b      	ldrh	r3, [r7, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	212c      	movs	r1, #44	; 0x2c
 8001ff0:	fb01 f303 	mul.w	r3, r1, r3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3355      	adds	r3, #85	; 0x55
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	212c      	movs	r1, #44	; 0x2c
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	4413      	add	r3, r2
 8002008:	3355      	adds	r3, #85	; 0x55
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	212c      	movs	r1, #44	; 0x2c
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	4413      	add	r3, r2
 800201c:	3342      	adds	r3, #66	; 0x42
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002022:	e093      	b.n	800214c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	3342      	adds	r3, #66	; 0x42
 8002032:	2202      	movs	r2, #2
 8002034:	701a      	strb	r2, [r3, #0]
      break;
 8002036:	e089      	b.n	800214c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002038:	78bb      	ldrb	r3, [r7, #2]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11d      	bne.n	800207a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3355      	adds	r3, #85	; 0x55
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	3342      	adds	r3, #66	; 0x42
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002064:	e073      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	3342      	adds	r3, #66	; 0x42
 8002074:	2202      	movs	r2, #2
 8002076:	701a      	strb	r2, [r3, #0]
      break;
 8002078:	e069      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3354      	adds	r3, #84	; 0x54
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	3342      	adds	r3, #66	; 0x42
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
      break;
 80020a0:	e055      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3342      	adds	r3, #66	; 0x42
 80020b0:	2202      	movs	r2, #2
 80020b2:	701a      	strb	r2, [r3, #0]
      break;
 80020b4:	e04b      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020b6:	78bb      	ldrb	r3, [r7, #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11d      	bne.n	80020f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3355      	adds	r3, #85	; 0x55
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d109      	bne.n	80020e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	212c      	movs	r1, #44	; 0x2c
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3342      	adds	r3, #66	; 0x42
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020e2:	e034      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	212c      	movs	r1, #44	; 0x2c
 80020ea:	fb01 f303 	mul.w	r3, r1, r3
 80020ee:	4413      	add	r3, r2
 80020f0:	3342      	adds	r3, #66	; 0x42
 80020f2:	2202      	movs	r2, #2
 80020f4:	701a      	strb	r2, [r3, #0]
      break;
 80020f6:	e02a      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	212c      	movs	r1, #44	; 0x2c
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	4413      	add	r3, r2
 8002104:	3354      	adds	r3, #84	; 0x54
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	3342      	adds	r3, #66	; 0x42
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
      break;
 800211e:	e016      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3342      	adds	r3, #66	; 0x42
 800212e:	2202      	movs	r2, #2
 8002130:	701a      	strb	r2, [r3, #0]
      break;
 8002132:	e00c      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	212c      	movs	r1, #44	; 0x2c
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	3342      	adds	r3, #66	; 0x42
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
      break;
 8002146:	e002      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002148:	bf00      	nop
 800214a:	e000      	b.n	800214e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800214c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	212c      	movs	r1, #44	; 0x2c
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	4413      	add	r3, r2
 800215a:	3344      	adds	r3, #68	; 0x44
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	8b3a      	ldrh	r2, [r7, #24]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	202c      	movs	r0, #44	; 0x2c
 8002168:	fb00 f303 	mul.w	r3, r0, r3
 800216c:	440b      	add	r3, r1
 800216e:	334c      	adds	r3, #76	; 0x4c
 8002170:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	3360      	adds	r3, #96	; 0x60
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3350      	adds	r3, #80	; 0x50
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	212c      	movs	r1, #44	; 0x2c
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	3339      	adds	r3, #57	; 0x39
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	212c      	movs	r1, #44	; 0x2c
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	4413      	add	r3, r2
 80021b4:	3361      	adds	r3, #97	; 0x61
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	222c      	movs	r2, #44	; 0x2c
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	3338      	adds	r3, #56	; 0x38
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	18d1      	adds	r1, r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	f003 fed4 	bl	8005f80 <USB_HC_StartXfer>
 80021d8:	4603      	mov	r3, r0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop

080021e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 fbd5 	bl	80059aa <USB_GetMode>
 8002200:	4603      	mov	r3, r0
 8002202:	2b01      	cmp	r3, #1
 8002204:	f040 80f6 	bne.w	80023f4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f003 fbb9 	bl	8005984 <USB_ReadInterrupts>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80ec 	beq.w	80023f2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fbb0 	bl	8005984 <USB_ReadInterrupts>
 8002224:	4603      	mov	r3, r0
 8002226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800222e:	d104      	bne.n	800223a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002238:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f003 fba0 	bl	8005984 <USB_ReadInterrupts>
 8002244:	4603      	mov	r3, r0
 8002246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800224e:	d104      	bne.n	800225a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002258:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f003 fb90 	bl	8005984 <USB_ReadInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800226a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800226e:	d104      	bne.n	800227a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002278:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fb80 	bl	8005984 <USB_ReadInterrupts>
 8002284:	4603      	mov	r3, r0
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b02      	cmp	r3, #2
 800228c:	d103      	bne.n	8002296 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2202      	movs	r2, #2
 8002294:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fb72 	bl	8005984 <USB_ReadInterrupts>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022aa:	d11c      	bne.n	80022e6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10f      	bne.n	80022e6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022c6:	2110      	movs	r1, #16
 80022c8:	6938      	ldr	r0, [r7, #16]
 80022ca:	f003 fa61 	bl	8005790 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80022ce:	6938      	ldr	r0, [r7, #16]
 80022d0:	f003 fa92 	bl	80057f8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fc68 	bl	8005bb0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f006 fa37 	bl	8008754 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fb4a 	bl	8005984 <USB_ReadInterrupts>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022fa:	d102      	bne.n	8002302 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f001 f89e 	bl	800343e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f003 fb3c 	bl	8005984 <USB_ReadInterrupts>
 800230c:	4603      	mov	r3, r0
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b08      	cmp	r3, #8
 8002314:	d106      	bne.n	8002324 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f006 fa00 	bl	800871c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2208      	movs	r2, #8
 8002322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f003 fb2b 	bl	8005984 <USB_ReadInterrupts>
 800232e:	4603      	mov	r3, r0
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b10      	cmp	r3, #16
 8002336:	d101      	bne.n	800233c <HAL_HCD_IRQHandler+0x158>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_HCD_IRQHandler+0x15a>
 800233c:	2300      	movs	r3, #0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0210 	bic.w	r2, r2, #16
 8002350:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 ffa1 	bl	800329a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0210 	orr.w	r2, r2, #16
 8002366:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fb09 	bl	8005984 <USB_ReadInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800237c:	d13a      	bne.n	80023f4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f003 ff3e 	bl	8006204 <USB_HC_ReadInterrupt>
 8002388:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e025      	b.n	80023dc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d018      	beq.n	80023d6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ba:	d106      	bne.n	80023ca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	4619      	mov	r1, r3
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f8ab 	bl	800251e <HCD_HC_IN_IRQHandler>
 80023c8:	e005      	b.n	80023d6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	4619      	mov	r1, r3
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fbf9 	bl	8002bc8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3d4      	bcc.n	8002390 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ee:	615a      	str	r2, [r3, #20]
 80023f0:	e000      	b.n	80023f4 <HAL_HCD_IRQHandler+0x210>
      return;
 80023f2:	bf00      	nop
    }
  }
}
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <HAL_HCD_Start+0x16>
 800240c:	2302      	movs	r3, #2
 800240e:	e013      	b.n	8002438 <HAL_HCD_Start+0x3e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2101      	movs	r1, #1
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fc2a 	bl	8005c78 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f003 f943 	bl	80056b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_HCD_Stop+0x16>
 8002452:	2302      	movs	r3, #2
 8002454:	e00d      	b.n	8002472 <HAL_HCD_Stop+0x32>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f004 f818 	bl	8006498 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 fbcc 	bl	8005c24 <USB_ResetPort>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3360      	adds	r3, #96	; 0x60
 80024b0:	781b      	ldrb	r3, [r3, #0]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	212c      	movs	r1, #44	; 0x2c
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	3350      	adds	r3, #80	; 0x50
 80024d8:	681b      	ldr	r3, [r3, #0]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fc10 	bl	8005d18 <USB_GetCurrentFrame>
 80024f8:	4603      	mov	r3, r0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f003 fbeb 	bl	8005cea <USB_GetHostSpeed>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b086      	sub	sp, #24
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b04      	cmp	r3, #4
 800254c:	d11a      	bne.n	8002584 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	461a      	mov	r2, r3
 800255c:	2304      	movs	r3, #4
 800255e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	3361      	adds	r3, #97	; 0x61
 800256e:	2206      	movs	r2, #6
 8002570:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f003 fe52 	bl	8006226 <USB_HC_Halt>
 8002582:	e0af      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4413      	add	r3, r2
 800258c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259a:	d11b      	bne.n	80025d4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3361      	adds	r3, #97	; 0x61
 80025be:	2207      	movs	r2, #7
 80025c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fe2a 	bl	8006226 <USB_HC_Halt>
 80025d2:	e087      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0320 	and.w	r3, r3, #32
 80025e6:	2b20      	cmp	r3, #32
 80025e8:	d109      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f6:	461a      	mov	r2, r3
 80025f8:	2320      	movs	r3, #32
 80025fa:	6093      	str	r3, [r2, #8]
 80025fc:	e072      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b08      	cmp	r3, #8
 8002612:	d11a      	bne.n	800264a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	461a      	mov	r2, r3
 8002622:	2308      	movs	r3, #8
 8002624:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3361      	adds	r3, #97	; 0x61
 8002634:	2205      	movs	r2, #5
 8002636:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f003 fdef 	bl	8006226 <USB_HC_Halt>
 8002648:	e04c      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002660:	d11b      	bne.n	800269a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	461a      	mov	r2, r3
 8002670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002674:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3361      	adds	r3, #97	; 0x61
 8002684:	2208      	movs	r2, #8
 8002686:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	4611      	mov	r1, r2
 8002692:	4618      	mov	r0, r3
 8002694:	f003 fdc7 	bl	8006226 <USB_HC_Halt>
 8002698:	e024      	b.n	80026e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ac:	2b80      	cmp	r3, #128	; 0x80
 80026ae:	d119      	bne.n	80026e4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	461a      	mov	r2, r3
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3361      	adds	r3, #97	; 0x61
 80026d0:	2206      	movs	r2, #6
 80026d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fda1 	bl	8006226 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026fa:	d112      	bne.n	8002722 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fd8d 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002718:	461a      	mov	r2, r3
 800271a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800271e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002720:	e24e      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	f040 80df 	bne.w	80028f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d019      	beq.n	8002776 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	3348      	adds	r3, #72	; 0x48
 8002750:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	0159      	lsls	r1, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	440b      	add	r3, r1
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002764:	1ad2      	subs	r2, r2, r3
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	202c      	movs	r0, #44	; 0x2c
 800276c:	fb00 f303 	mul.w	r3, r0, r3
 8002770:	440b      	add	r3, r1
 8002772:	3350      	adds	r3, #80	; 0x50
 8002774:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	3361      	adds	r3, #97	; 0x61
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	335c      	adds	r3, #92	; 0x5c
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	461a      	mov	r2, r3
 80027a8:	2301      	movs	r3, #1
 80027aa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	333f      	adds	r3, #63	; 0x3f
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	333f      	adds	r3, #63	; 0x3f
 80027ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d111      	bne.n	80027f8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fd21 	bl	8006226 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	2310      	movs	r3, #16
 80027f4:	6093      	str	r3, [r2, #8]
 80027f6:	e03a      	b.n	800286e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	333f      	adds	r3, #63	; 0x3f
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b03      	cmp	r3, #3
 800280a:	d009      	beq.n	8002820 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	333f      	adds	r3, #63	; 0x3f
 800281a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800281c:	2b01      	cmp	r3, #1
 800281e:	d126      	bne.n	800286e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	0151      	lsls	r1, r2, #5
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	440a      	add	r2, r1
 8002836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800283a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800283e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	3360      	adds	r3, #96	; 0x60
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	b2d9      	uxtb	r1, r3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	202c      	movs	r0, #44	; 0x2c
 800285c:	fb00 f303 	mul.w	r3, r0, r3
 8002860:	4413      	add	r3, r2
 8002862:	3360      	adds	r3, #96	; 0x60
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	461a      	mov	r2, r3
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f005 ff81 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d12b      	bne.n	80028ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3348      	adds	r3, #72	; 0x48
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	202c      	movs	r0, #44	; 0x2c
 800288c:	fb00 f202 	mul.w	r2, r0, r2
 8002890:	440a      	add	r2, r1
 8002892:	3240      	adds	r2, #64	; 0x40
 8002894:	8812      	ldrh	r2, [r2, #0]
 8002896:	fbb3 f3f2 	udiv	r3, r3, r2
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 818e 	beq.w	8002bc0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3354      	adds	r3, #84	; 0x54
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2d8      	uxtb	r0, r3
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3354      	adds	r3, #84	; 0x54
 80028c8:	4602      	mov	r2, r0
 80028ca:	701a      	strb	r2, [r3, #0]
}
 80028cc:	e178      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	3354      	adds	r3, #84	; 0x54
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	f083 0301 	eor.w	r3, r3, #1
 80028e2:	b2d8      	uxtb	r0, r3
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3354      	adds	r3, #84	; 0x54
 80028f2:	4602      	mov	r2, r0
 80028f4:	701a      	strb	r2, [r3, #0]
}
 80028f6:	e163      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	f040 80f6 	bne.w	8002afc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3361      	adds	r3, #97	; 0x61
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d109      	bne.n	8002938 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	212c      	movs	r1, #44	; 0x2c
 800292a:	fb01 f303 	mul.w	r3, r1, r3
 800292e:	4413      	add	r3, r2
 8002930:	3360      	adds	r3, #96	; 0x60
 8002932:	2201      	movs	r2, #1
 8002934:	701a      	strb	r2, [r3, #0]
 8002936:	e0c9      	b.n	8002acc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3361      	adds	r3, #97	; 0x61
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d109      	bne.n	8002960 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3360      	adds	r3, #96	; 0x60
 800295a:	2205      	movs	r2, #5
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	e0b5      	b.n	8002acc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	212c      	movs	r1, #44	; 0x2c
 8002966:	fb01 f303 	mul.w	r3, r1, r3
 800296a:	4413      	add	r3, r2
 800296c:	3361      	adds	r3, #97	; 0x61
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b06      	cmp	r3, #6
 8002972:	d009      	beq.n	8002988 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	212c      	movs	r1, #44	; 0x2c
 800297a:	fb01 f303 	mul.w	r3, r1, r3
 800297e:	4413      	add	r3, r2
 8002980:	3361      	adds	r3, #97	; 0x61
 8002982:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002984:	2b08      	cmp	r3, #8
 8002986:	d150      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	335c      	adds	r3, #92	; 0x5c
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	202c      	movs	r0, #44	; 0x2c
 80029a0:	fb00 f303 	mul.w	r3, r0, r3
 80029a4:	440b      	add	r3, r1
 80029a6:	335c      	adds	r3, #92	; 0x5c
 80029a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	335c      	adds	r3, #92	; 0x5c
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d912      	bls.n	80029e4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	335c      	adds	r3, #92	; 0x5c
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	212c      	movs	r1, #44	; 0x2c
 80029d6:	fb01 f303 	mul.w	r3, r1, r3
 80029da:	4413      	add	r3, r2
 80029dc:	3360      	adds	r3, #96	; 0x60
 80029de:	2204      	movs	r2, #4
 80029e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029e2:	e073      	b.n	8002acc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3360      	adds	r3, #96	; 0x60
 80029f2:	2202      	movs	r2, #2
 80029f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	015a      	lsls	r2, r3, #5
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a0c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a14:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a28:	e050      	b.n	8002acc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	3361      	adds	r3, #97	; 0x61
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d122      	bne.n	8002a84 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3360      	adds	r3, #96	; 0x60
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a66:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a6e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e023      	b.n	8002acc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3361      	adds	r3, #97	; 0x61
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b07      	cmp	r3, #7
 8002a96:	d119      	bne.n	8002acc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	335c      	adds	r3, #92	; 0x5c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	202c      	movs	r0, #44	; 0x2c
 8002ab0:	fb00 f303 	mul.w	r3, r0, r3
 8002ab4:	440b      	add	r3, r1
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	3360      	adds	r3, #96	; 0x60
 8002ac8:	2204      	movs	r2, #4
 8002aca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2302      	movs	r3, #2
 8002adc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	b2d9      	uxtb	r1, r3
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	202c      	movs	r0, #44	; 0x2c
 8002ae8:	fb00 f303 	mul.w	r3, r0, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	3360      	adds	r3, #96	; 0x60
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f005 fe3b 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002afa:	e061      	b.n	8002bc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b10      	cmp	r3, #16
 8002b10:	d156      	bne.n	8002bc0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	333f      	adds	r3, #63	; 0x3f
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d111      	bne.n	8002b4a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	335c      	adds	r3, #92	; 0x5c
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 fb6f 	bl	8006226 <USB_HC_Halt>
 8002b48:	e031      	b.n	8002bae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	333f      	adds	r3, #63	; 0x3f
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	333f      	adds	r3, #63	; 0x3f
 8002b6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d11d      	bne.n	8002bae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	335c      	adds	r3, #92	; 0x5c
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d110      	bne.n	8002bae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3361      	adds	r3, #97	; 0x61
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fb3c 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	6093      	str	r3, [r2, #8]
}
 8002bc0:	bf00      	nop
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d11a      	bne.n	8002c2e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	461a      	mov	r2, r3
 8002c06:	2304      	movs	r3, #4
 8002c08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3361      	adds	r3, #97	; 0x61
 8002c18:	2206      	movs	r2, #6
 8002c1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fafd 	bl	8006226 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002c2c:	e331      	b.n	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d12e      	bne.n	8002ca2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	2320      	movs	r3, #32
 8002c54:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	333d      	adds	r3, #61	; 0x3d
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	f040 8313 	bne.w	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	333d      	adds	r3, #61	; 0x3d
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	3360      	adds	r3, #96	; 0x60
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fac3 	bl	8006226 <USB_HC_Halt>
}
 8002ca0:	e2f7      	b.n	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb8:	d112      	bne.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ccc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 faa4 	bl	8006226 <USB_HC_Halt>
}
 8002cde:	e2d8      	b.n	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d140      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	335c      	adds	r3, #92	; 0x5c
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1a:	2b40      	cmp	r3, #64	; 0x40
 8002d1c:	d111      	bne.n	8002d42 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	333d      	adds	r3, #61	; 0x3d
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2340      	movs	r3, #64	; 0x40
 8002d40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2301      	movs	r3, #1
 8002d52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3361      	adds	r3, #97	; 0x61
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fa58 	bl	8006226 <USB_HC_Halt>
}
 8002d76:	e28c      	b.n	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8a:	2b40      	cmp	r3, #64	; 0x40
 8002d8c:	d12c      	bne.n	8002de8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3361      	adds	r3, #97	; 0x61
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	333d      	adds	r3, #61	; 0x3d
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	335c      	adds	r3, #92	; 0x5c
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fa29 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de0:	461a      	mov	r2, r3
 8002de2:	2340      	movs	r3, #64	; 0x40
 8002de4:	6093      	str	r3, [r2, #8]
}
 8002de6:	e254      	b.n	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d11a      	bne.n	8002e34 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3361      	adds	r3, #97	; 0x61
 8002e1e:	2205      	movs	r2, #5
 8002e20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f003 f9fa 	bl	8006226 <USB_HC_Halt>
}
 8002e32:	e22e      	b.n	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d140      	bne.n	8002ecc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	335c      	adds	r3, #92	; 0x5c
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3361      	adds	r3, #97	; 0x61
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	333d      	adds	r3, #61	; 0x3d
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d112      	bne.n	8002ea8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	333c      	adds	r3, #60	; 0x3c
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	333d      	adds	r3, #61	; 0x3d
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 f9b7 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2310      	movs	r3, #16
 8002ec8:	6093      	str	r3, [r2, #8]
}
 8002eca:	e1e2      	b.n	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b80      	cmp	r3, #128	; 0x80
 8002ee0:	d164      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d111      	bne.n	8002f0e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3361      	adds	r3, #97	; 0x61
 8002ef8:	2206      	movs	r2, #6
 8002efa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 f98d 	bl	8006226 <USB_HC_Halt>
 8002f0c:	e044      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	212c      	movs	r1, #44	; 0x2c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	335c      	adds	r3, #92	; 0x5c
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	202c      	movs	r0, #44	; 0x2c
 8002f26:	fb00 f303 	mul.w	r3, r0, r3
 8002f2a:	440b      	add	r3, r1
 8002f2c:	335c      	adds	r3, #92	; 0x5c
 8002f2e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	335c      	adds	r3, #92	; 0x5c
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d920      	bls.n	8002f86 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	335c      	adds	r3, #92	; 0x5c
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3360      	adds	r3, #96	; 0x60
 8002f64:	2204      	movs	r2, #4
 8002f66:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	b2d9      	uxtb	r1, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	202c      	movs	r0, #44	; 0x2c
 8002f72:	fb00 f303 	mul.w	r3, r0, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	3360      	adds	r3, #96	; 0x60
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f005 fbf6 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f84:	e008      	b.n	8002f98 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3360      	adds	r3, #96	; 0x60
 8002f94:	2202      	movs	r2, #2
 8002f96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	6093      	str	r3, [r2, #8]
}
 8002faa:	e172      	b.n	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc2:	d11b      	bne.n	8002ffc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3361      	adds	r3, #97	; 0x61
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 f920 	bl	8006226 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff8:	6093      	str	r3, [r2, #8]
}
 8002ffa:	e14a      	b.n	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b02      	cmp	r3, #2
 8003010:	f040 813f 	bne.w	8003292 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3361      	adds	r3, #97	; 0x61
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d17d      	bne.n	8003124 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	3360      	adds	r3, #96	; 0x60
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	333f      	adds	r3, #63	; 0x3f
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d00a      	beq.n	8003064 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	333f      	adds	r3, #63	; 0x3f
 800305c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800305e:	2b03      	cmp	r3, #3
 8003060:	f040 8100 	bne.w	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d113      	bne.n	8003094 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	3355      	adds	r3, #85	; 0x55
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	f083 0301 	eor.w	r3, r3, #1
 8003080:	b2d8      	uxtb	r0, r3
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3355      	adds	r3, #85	; 0x55
 8003090:	4602      	mov	r2, r0
 8003092:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	2b01      	cmp	r3, #1
 800309a:	f040 80e3 	bne.w	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	334c      	adds	r3, #76	; 0x4c
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80d8 	beq.w	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	334c      	adds	r3, #76	; 0x4c
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	202c      	movs	r0, #44	; 0x2c
 80030ca:	fb00 f202 	mul.w	r2, r0, r2
 80030ce:	440a      	add	r2, r1
 80030d0:	3240      	adds	r2, #64	; 0x40
 80030d2:	8812      	ldrh	r2, [r2, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	3b01      	subs	r3, #1
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	202c      	movs	r0, #44	; 0x2c
 80030de:	fb00 f202 	mul.w	r2, r0, r2
 80030e2:	440a      	add	r2, r1
 80030e4:	3240      	adds	r2, #64	; 0x40
 80030e6:	8812      	ldrh	r2, [r2, #0]
 80030e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80b5 	beq.w	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3355      	adds	r3, #85	; 0x55
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	f083 0301 	eor.w	r3, r3, #1
 800310e:	b2d8      	uxtb	r0, r3
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	212c      	movs	r1, #44	; 0x2c
 8003116:	fb01 f303 	mul.w	r3, r1, r3
 800311a:	4413      	add	r3, r2
 800311c:	3355      	adds	r3, #85	; 0x55
 800311e:	4602      	mov	r2, r0
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e09f      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	212c      	movs	r1, #44	; 0x2c
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3361      	adds	r3, #97	; 0x61
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d109      	bne.n	800314c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3360      	adds	r3, #96	; 0x60
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e08b      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3361      	adds	r3, #97	; 0x61
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d109      	bne.n	8003174 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	3360      	adds	r3, #96	; 0x60
 800316e:	2202      	movs	r2, #2
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e077      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3361      	adds	r3, #97	; 0x61
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b05      	cmp	r3, #5
 8003186:	d109      	bne.n	800319c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3360      	adds	r3, #96	; 0x60
 8003196:	2205      	movs	r2, #5
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e063      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	212c      	movs	r1, #44	; 0x2c
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	3361      	adds	r3, #97	; 0x61
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b06      	cmp	r3, #6
 80031ae:	d009      	beq.n	80031c4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3361      	adds	r3, #97	; 0x61
 80031be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d14f      	bne.n	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	212c      	movs	r1, #44	; 0x2c
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	335c      	adds	r3, #92	; 0x5c
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	202c      	movs	r0, #44	; 0x2c
 80031dc:	fb00 f303 	mul.w	r3, r0, r3
 80031e0:	440b      	add	r3, r1
 80031e2:	335c      	adds	r3, #92	; 0x5c
 80031e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	335c      	adds	r3, #92	; 0x5c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d912      	bls.n	8003220 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	335c      	adds	r3, #92	; 0x5c
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	212c      	movs	r1, #44	; 0x2c
 8003212:	fb01 f303 	mul.w	r3, r1, r3
 8003216:	4413      	add	r3, r2
 8003218:	3360      	adds	r3, #96	; 0x60
 800321a:	2204      	movs	r2, #4
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e021      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	212c      	movs	r1, #44	; 0x2c
 8003226:	fb01 f303 	mul.w	r3, r1, r3
 800322a:	4413      	add	r3, r2
 800322c:	3360      	adds	r3, #96	; 0x60
 800322e:	2202      	movs	r2, #2
 8003230:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003248:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003250:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4413      	add	r3, r2
 800325a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800325e:	461a      	mov	r2, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003270:	461a      	mov	r2, r3
 8003272:	2302      	movs	r3, #2
 8003274:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	b2d9      	uxtb	r1, r3
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	202c      	movs	r0, #44	; 0x2c
 8003280:	fb00 f303 	mul.w	r3, r0, r3
 8003284:	4413      	add	r3, r2
 8003286:	3360      	adds	r3, #96	; 0x60
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	461a      	mov	r2, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f005 fa6f 	bl	8008770 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003292:	bf00      	nop
 8003294:	3720      	adds	r7, #32
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b08a      	sub	sp, #40	; 0x28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 030f 	and.w	r3, r3, #15
 80032ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	0c5b      	lsrs	r3, r3, #17
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d004      	beq.n	80032e0 <HCD_RXQLVL_IRQHandler+0x46>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	f000 80a9 	beq.w	8003430 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80032de:	e0aa      	b.n	8003436 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80a6 	beq.w	8003434 <HCD_RXQLVL_IRQHandler+0x19a>
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3344      	adds	r3, #68	; 0x44
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 809b 	beq.w	8003434 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3350      	adds	r3, #80	; 0x50
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	441a      	add	r2, r3
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	202c      	movs	r0, #44	; 0x2c
 8003318:	fb00 f303 	mul.w	r3, r0, r3
 800331c:	440b      	add	r3, r1
 800331e:	334c      	adds	r3, #76	; 0x4c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d87a      	bhi.n	800341c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	212c      	movs	r1, #44	; 0x2c
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	3344      	adds	r3, #68	; 0x44
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	b292      	uxth	r2, r2
 800333e:	4619      	mov	r1, r3
 8003340:	f002 fac8 	bl	80058d4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	3344      	adds	r3, #68	; 0x44
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	441a      	add	r2, r3
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	202c      	movs	r0, #44	; 0x2c
 800335e:	fb00 f303 	mul.w	r3, r0, r3
 8003362:	440b      	add	r3, r1
 8003364:	3344      	adds	r3, #68	; 0x44
 8003366:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	3350      	adds	r3, #80	; 0x50
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	441a      	add	r2, r3
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	202c      	movs	r0, #44	; 0x2c
 8003382:	fb00 f303 	mul.w	r3, r0, r3
 8003386:	440b      	add	r3, r1
 8003388:	3350      	adds	r3, #80	; 0x50
 800338a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	0cdb      	lsrs	r3, r3, #19
 800339c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3340      	adds	r3, #64	; 0x40
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d13c      	bne.n	8003434 <HCD_RXQLVL_IRQHandler+0x19a>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d039      	beq.n	8003434 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033d6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033de:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	461a      	mov	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	212c      	movs	r1, #44	; 0x2c
 80033f8:	fb01 f303 	mul.w	r3, r1, r3
 80033fc:	4413      	add	r3, r2
 80033fe:	3354      	adds	r3, #84	; 0x54
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	f083 0301 	eor.w	r3, r3, #1
 8003406:	b2d8      	uxtb	r0, r3
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	212c      	movs	r1, #44	; 0x2c
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	3354      	adds	r3, #84	; 0x54
 8003416:	4602      	mov	r2, r0
 8003418:	701a      	strb	r2, [r3, #0]
      break;
 800341a:	e00b      	b.n	8003434 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	212c      	movs	r1, #44	; 0x2c
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	4413      	add	r3, r2
 8003428:	3360      	adds	r3, #96	; 0x60
 800342a:	2204      	movs	r2, #4
 800342c:	701a      	strb	r2, [r3, #0]
      break;
 800342e:	e001      	b.n	8003434 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003430:	bf00      	nop
 8003432:	e000      	b.n	8003436 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003434:	bf00      	nop
  }
}
 8003436:	bf00      	nop
 8003438:	3728      	adds	r7, #40	; 0x28
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b086      	sub	sp, #24
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800346a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d10b      	bne.n	800348e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d102      	bne.n	8003486 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f005 f959 	bl	8008738 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b08      	cmp	r3, #8
 8003496:	d132      	bne.n	80034fe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f043 0308 	orr.w	r3, r3, #8
 800349e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d126      	bne.n	80034f8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d113      	bne.n	80034da <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80034b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034bc:	d106      	bne.n	80034cc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f002 fb73 	bl	8005bb0 <USB_InitFSLSPClkSel>
 80034ca:	e011      	b.n	80034f0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	4618      	mov	r0, r3
 80034d4:	f002 fb6c 	bl	8005bb0 <USB_InitFSLSPClkSel>
 80034d8:	e00a      	b.n	80034f0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d106      	bne.n	80034f0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034e8:	461a      	mov	r2, r3
 80034ea:	f64e 2360 	movw	r3, #60000	; 0xea60
 80034ee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f005 f94b 	bl	800878c <HAL_HCD_PortEnabled_Callback>
 80034f6:	e002      	b.n	80034fe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f005 f955 	bl	80087a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b20      	cmp	r3, #32
 8003506:	d103      	bne.n	8003510 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f043 0320 	orr.w	r3, r3, #32
 800350e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003516:	461a      	mov	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	6013      	str	r3, [r2, #0]
}
 800351c:	bf00      	nop
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e12b      	b.n	800378e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd feb4 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	; 0x24
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003588:	f001 fe56 	bl	8005238 <HAL_RCC_GetPCLK1Freq>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a81      	ldr	r2, [pc, #516]	; (8003798 <HAL_I2C_Init+0x274>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d807      	bhi.n	80035a8 <HAL_I2C_Init+0x84>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a80      	ldr	r2, [pc, #512]	; (800379c <HAL_I2C_Init+0x278>)
 800359c:	4293      	cmp	r3, r2
 800359e:	bf94      	ite	ls
 80035a0:	2301      	movls	r3, #1
 80035a2:	2300      	movhi	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e006      	b.n	80035b6 <HAL_I2C_Init+0x92>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a7d      	ldr	r2, [pc, #500]	; (80037a0 <HAL_I2C_Init+0x27c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	bf94      	ite	ls
 80035b0:	2301      	movls	r3, #1
 80035b2:	2300      	movhi	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0e7      	b.n	800378e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4a78      	ldr	r2, [pc, #480]	; (80037a4 <HAL_I2C_Init+0x280>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0c9b      	lsrs	r3, r3, #18
 80035c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4a6a      	ldr	r2, [pc, #424]	; (8003798 <HAL_I2C_Init+0x274>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d802      	bhi.n	80035f8 <HAL_I2C_Init+0xd4>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3301      	adds	r3, #1
 80035f6:	e009      	b.n	800360c <HAL_I2C_Init+0xe8>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	4a69      	ldr	r2, [pc, #420]	; (80037a8 <HAL_I2C_Init+0x284>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	3301      	adds	r3, #1
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	430b      	orrs	r3, r1
 8003612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800361e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	495c      	ldr	r1, [pc, #368]	; (8003798 <HAL_I2C_Init+0x274>)
 8003628:	428b      	cmp	r3, r1
 800362a:	d819      	bhi.n	8003660 <HAL_I2C_Init+0x13c>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1e59      	subs	r1, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fbb1 f3f3 	udiv	r3, r1, r3
 800363a:	1c59      	adds	r1, r3, #1
 800363c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003640:	400b      	ands	r3, r1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_I2C_Init+0x138>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1e59      	subs	r1, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fbb1 f3f3 	udiv	r3, r1, r3
 8003654:	3301      	adds	r3, #1
 8003656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365a:	e051      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 800365c:	2304      	movs	r3, #4
 800365e:	e04f      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d111      	bne.n	800368c <HAL_I2C_Init+0x168>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1e58      	subs	r0, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	440b      	add	r3, r1
 8003676:	fbb0 f3f3 	udiv	r3, r0, r3
 800367a:	3301      	adds	r3, #1
 800367c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e012      	b.n	80036b2 <HAL_I2C_Init+0x18e>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	0099      	lsls	r1, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Init+0x196>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e022      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10e      	bne.n	80036e0 <HAL_I2C_Init+0x1bc>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1e58      	subs	r0, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	440b      	add	r3, r1
 80036d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036de:	e00f      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e58      	subs	r0, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	0099      	lsls	r1, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	6809      	ldr	r1, [r1, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800372e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6911      	ldr	r1, [r2, #16]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68d2      	ldr	r2, [r2, #12]
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	430b      	orrs	r3, r1
 8003742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	000186a0 	.word	0x000186a0
 800379c:	001e847f 	.word	0x001e847f
 80037a0:	003d08ff 	.word	0x003d08ff
 80037a4:	431bde83 	.word	0x431bde83
 80037a8:	10624dd3 	.word	0x10624dd3

080037ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	461a      	mov	r2, r3
 80037b8:	460b      	mov	r3, r1
 80037ba:	817b      	strh	r3, [r7, #10]
 80037bc:	4613      	mov	r3, r2
 80037be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7fd ff96 	bl	80016f0 <HAL_GetTick>
 80037c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	f040 80e0 	bne.w	8003994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2319      	movs	r3, #25
 80037da:	2201      	movs	r2, #1
 80037dc:	4970      	ldr	r1, [pc, #448]	; (80039a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fa92 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0d3      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_I2C_Master_Transmit+0x50>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e0cc      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d007      	beq.n	8003822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2221      	movs	r2, #33	; 0x21
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2210      	movs	r2, #16
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	893a      	ldrh	r2, [r7, #8]
 8003852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a50      	ldr	r2, [pc, #320]	; (80039a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f9ca 	bl	8003c04 <I2C_MasterRequestWrite>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e08d      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003890:	e066      	b.n	8003960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	6a39      	ldr	r1, [r7, #32]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fb0c 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d107      	bne.n	80038ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06b      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d11b      	bne.n	8003934 <HAL_I2C_Master_Transmit+0x188>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d017      	beq.n	8003934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	6a39      	ldr	r1, [r7, #32]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fafc 	bl	8003f36 <I2C_WaitOnBTFFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	2b04      	cmp	r3, #4
 800394a:	d107      	bne.n	800395c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e01a      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	d194      	bne.n	8003892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	00100002 	.word	0x00100002
 80039a4:	ffff0000 	.word	0xffff0000

080039a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	460b      	mov	r3, r1
 80039b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039b8:	f7fd fe9a 	bl	80016f0 <HAL_GetTick>
 80039bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	f040 8111 	bne.w	8003bf2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	2319      	movs	r3, #25
 80039d6:	2201      	movs	r2, #1
 80039d8:	4988      	ldr	r1, [pc, #544]	; (8003bfc <HAL_I2C_IsDeviceReady+0x254>)
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f994 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80039e6:	2302      	movs	r3, #2
 80039e8:	e104      	b.n	8003bf4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_I2C_IsDeviceReady+0x50>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e0fd      	b.n	8003bf4 <HAL_I2C_IsDeviceReady+0x24c>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d007      	beq.n	8003a1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2224      	movs	r2, #36	; 0x24
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a70      	ldr	r2, [pc, #448]	; (8003c00 <HAL_I2C_IsDeviceReady+0x258>)
 8003a40:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f952 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00d      	beq.n	8003a86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a78:	d103      	bne.n	8003a82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0b6      	b.n	8003bf4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a86:	897b      	ldrh	r3, [r7, #10]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003a96:	f7fd fe2b 	bl	80016f0 <HAL_GetTick>
 8003a9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	bf0c      	ite	eq
 8003aaa:	2301      	moveq	r3, #1
 8003aac:	2300      	movne	r3, #0
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003aca:	e025      	b.n	8003b18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003acc:	f7fd fe10 	bl	80016f0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d302      	bcc.n	8003ae2 <HAL_I2C_IsDeviceReady+0x13a>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	22a0      	movs	r2, #160	; 0xa0
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2ba0      	cmp	r3, #160	; 0xa0
 8003b22:	d005      	beq.n	8003b30 <HAL_I2C_IsDeviceReady+0x188>
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <HAL_I2C_IsDeviceReady+0x188>
 8003b2a:	7dbb      	ldrb	r3, [r7, #22]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0cd      	beq.n	8003acc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d129      	bne.n	8003b9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	2319      	movs	r3, #25
 8003b72:	2201      	movs	r2, #1
 8003b74:	4921      	ldr	r1, [pc, #132]	; (8003bfc <HAL_I2C_IsDeviceReady+0x254>)
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f8c6 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e036      	b.n	8003bf4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e02c      	b.n	8003bf4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bb2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2319      	movs	r3, #25
 8003bba:	2201      	movs	r2, #1
 8003bbc:	490f      	ldr	r1, [pc, #60]	; (8003bfc <HAL_I2C_IsDeviceReady+0x254>)
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 f8a2 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e012      	b.n	8003bf4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	f4ff af32 	bcc.w	8003a42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003bf2:	2302      	movs	r3, #2
  }
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	00100002 	.word	0x00100002
 8003c00:	ffff0000 	.word	0xffff0000

08003c04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	460b      	mov	r3, r1
 8003c12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d006      	beq.n	8003c2e <I2C_MasterRequestWrite+0x2a>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d003      	beq.n	8003c2e <I2C_MasterRequestWrite+0x2a>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c2c:	d108      	bne.n	8003c40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e00b      	b.n	8003c58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	2b12      	cmp	r3, #18
 8003c46:	d107      	bne.n	8003c58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f84f 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7e:	d103      	bne.n	8003c88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e035      	b.n	8003cf8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c94:	d108      	bne.n	8003ca8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c96:	897b      	ldrh	r3, [r7, #10]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ca4:	611a      	str	r2, [r3, #16]
 8003ca6:	e01b      	b.n	8003ce0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ca8:	897b      	ldrh	r3, [r7, #10]
 8003caa:	11db      	asrs	r3, r3, #7
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 0306 	and.w	r3, r3, #6
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f063 030f 	orn	r3, r3, #15
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	490e      	ldr	r1, [pc, #56]	; (8003d00 <I2C_MasterRequestWrite+0xfc>)
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f875 	bl	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e010      	b.n	8003cf8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cd6:	897b      	ldrh	r3, [r7, #10]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4907      	ldr	r1, [pc, #28]	; (8003d04 <I2C_MasterRequestWrite+0x100>)
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f000 f865 	bl	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	00010008 	.word	0x00010008
 8003d04:	00010002 	.word	0x00010002

08003d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d18:	e025      	b.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d021      	beq.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fd fce5 	bl	80016f0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e023      	b.n	8003dae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10d      	bne.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf0c      	ite	eq
 8003d82:	2301      	moveq	r3, #1
 8003d84:	2300      	movne	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	e00c      	b.n	8003da6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf0c      	ite	eq
 8003d9e:	2301      	moveq	r3, #1
 8003da0:	2300      	movne	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d0b6      	beq.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc4:	e051      	b.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd4:	d123      	bne.n	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f043 0204 	orr.w	r2, r3, #4
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e046      	b.n	8003eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d021      	beq.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fd fc63 	bl	80016f0 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e020      	b.n	8003eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10c      	bne.n	8003e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	e00b      	b.n	8003ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	43da      	mvns	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d18d      	bne.n	8003dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec0:	e02d      	b.n	8003f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f878 	bl	8003fb8 <I2C_IsAcknowledgeFailed>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e02d      	b.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d021      	beq.n	8003f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fd fc09 	bl	80016f0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d116      	bne.n	8003f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e007      	b.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f28:	2b80      	cmp	r3, #128	; 0x80
 8003f2a:	d1ca      	bne.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f42:	e02d      	b.n	8003fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f837 	bl	8003fb8 <I2C_IsAcknowledgeFailed>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e02d      	b.n	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d021      	beq.n	8003fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5c:	f7fd fbc8 	bl	80016f0 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d302      	bcc.n	8003f72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d116      	bne.n	8003fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	f043 0220 	orr.w	r2, r3, #32
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e007      	b.n	8003fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d1ca      	bne.n	8003f44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d11b      	bne.n	8004008 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0204 	orr.w	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e128      	b.n	800427c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d109      	bne.n	800404a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a90      	ldr	r2, [pc, #576]	; (8004284 <HAL_I2S_Init+0x26c>)
 8004042:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7fd f97f 	bl	8001348 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004060:	f023 030f 	bic.w	r3, r3, #15
 8004064:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2202      	movs	r2, #2
 800406c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d060      	beq.n	8004138 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800407e:	2310      	movs	r3, #16
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e001      	b.n	8004088 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b20      	cmp	r3, #32
 800408e:	d802      	bhi.n	8004096 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004096:	2001      	movs	r0, #1
 8004098:	f001 f9c4 	bl	8005424 <HAL_RCCEx_GetPeriphCLKFreq>
 800409c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040a6:	d125      	bne.n	80040f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80040ba:	4613      	mov	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	3305      	adds	r3, #5
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	e01f      	b.n	8004112 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	461a      	mov	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	3305      	adds	r3, #5
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e00e      	b.n	8004112 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	fbb2 f3f3 	udiv	r3, r2, r3
 800410e:	3305      	adds	r3, #5
 8004110:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4a5c      	ldr	r2, [pc, #368]	; (8004288 <HAL_I2S_Init+0x270>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	08db      	lsrs	r3, r3, #3
 800411c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	085b      	lsrs	r3, r3, #1
 800412e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	e003      	b.n	8004140 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004138:	2302      	movs	r3, #2
 800413a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d902      	bls.n	800414c <HAL_I2S_Init+0x134>
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2bff      	cmp	r3, #255	; 0xff
 800414a:	d907      	bls.n	800415c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	f043 0210 	orr.w	r2, r3, #16
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e08f      	b.n	800427c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	ea42 0103 	orr.w	r1, r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	430a      	orrs	r2, r1
 800416e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800417a:	f023 030f 	bic.w	r3, r3, #15
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6851      	ldr	r1, [r2, #4]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6892      	ldr	r2, [r2, #8]
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68d2      	ldr	r2, [r2, #12]
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6992      	ldr	r2, [r2, #24]
 8004192:	430a      	orrs	r2, r1
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800419e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d161      	bne.n	800426c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a38      	ldr	r2, [pc, #224]	; (800428c <HAL_I2S_Init+0x274>)
 80041ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a37      	ldr	r2, [pc, #220]	; (8004290 <HAL_I2S_Init+0x278>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d101      	bne.n	80041bc <HAL_I2S_Init+0x1a4>
 80041b8:	4b36      	ldr	r3, [pc, #216]	; (8004294 <HAL_I2S_Init+0x27c>)
 80041ba:	e001      	b.n	80041c0 <HAL_I2S_Init+0x1a8>
 80041bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6812      	ldr	r2, [r2, #0]
 80041c6:	4932      	ldr	r1, [pc, #200]	; (8004290 <HAL_I2S_Init+0x278>)
 80041c8:	428a      	cmp	r2, r1
 80041ca:	d101      	bne.n	80041d0 <HAL_I2S_Init+0x1b8>
 80041cc:	4a31      	ldr	r2, [pc, #196]	; (8004294 <HAL_I2S_Init+0x27c>)
 80041ce:	e001      	b.n	80041d4 <HAL_I2S_Init+0x1bc>
 80041d0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041d8:	f023 030f 	bic.w	r3, r3, #15
 80041dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2b      	ldr	r2, [pc, #172]	; (8004290 <HAL_I2S_Init+0x278>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_I2S_Init+0x1d4>
 80041e8:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <HAL_I2S_Init+0x27c>)
 80041ea:	e001      	b.n	80041f0 <HAL_I2S_Init+0x1d8>
 80041ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f0:	2202      	movs	r2, #2
 80041f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a25      	ldr	r2, [pc, #148]	; (8004290 <HAL_I2S_Init+0x278>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d101      	bne.n	8004202 <HAL_I2S_Init+0x1ea>
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <HAL_I2S_Init+0x27c>)
 8004200:	e001      	b.n	8004206 <HAL_I2S_Init+0x1ee>
 8004202:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004212:	d003      	beq.n	800421c <HAL_I2S_Init+0x204>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800421c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	e001      	b.n	8004228 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004232:	4313      	orrs	r3, r2
 8004234:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800423c:	4313      	orrs	r3, r2
 800423e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004246:	4313      	orrs	r3, r2
 8004248:	b29a      	uxth	r2, r3
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	4313      	orrs	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004254:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a0d      	ldr	r2, [pc, #52]	; (8004290 <HAL_I2S_Init+0x278>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d101      	bne.n	8004264 <HAL_I2S_Init+0x24c>
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <HAL_I2S_Init+0x27c>)
 8004262:	e001      	b.n	8004268 <HAL_I2S_Init+0x250>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004268:	897a      	ldrh	r2, [r7, #10]
 800426a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	0800438f 	.word	0x0800438f
 8004288:	cccccccd 	.word	0xcccccccd
 800428c:	080044a5 	.word	0x080044a5
 8004290:	40003800 	.word	0x40003800
 8004294:	40003400 	.word	0x40003400

08004298 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	881a      	ldrh	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	1c9a      	adds	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10e      	bne.n	8004328 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004318:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ffb8 	bl	8004298 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	b292      	uxth	r2, r2
 8004344:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	1c9a      	adds	r2, r3, #2
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004354:	b29b      	uxth	r3, r3
 8004356:	3b01      	subs	r3, #1
 8004358:	b29a      	uxth	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10e      	bne.n	8004386 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004376:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ff93 	bl	80042ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b086      	sub	sp, #24
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d13a      	bne.n	8004420 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d109      	bne.n	80043c8 <I2S_IRQHandler+0x3a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d102      	bne.n	80043c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7ff ffb4 	bl	8004330 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b40      	cmp	r3, #64	; 0x40
 80043d0:	d126      	bne.n	8004420 <I2S_IRQHandler+0x92>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d11f      	bne.n	8004420 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f043 0202 	orr.w	r2, r3, #2
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ff50 	bl	80042c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b03      	cmp	r3, #3
 800442a:	d136      	bne.n	800449a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b02      	cmp	r3, #2
 8004434:	d109      	bne.n	800444a <I2S_IRQHandler+0xbc>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d102      	bne.n	800444a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ff45 	bl	80042d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d122      	bne.n	800449a <I2S_IRQHandler+0x10c>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b20      	cmp	r3, #32
 8004460:	d11b      	bne.n	800449a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004470:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448c:	f043 0204 	orr.w	r2, r3, #4
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7ff ff13 	bl	80042c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800449a:	bf00      	nop
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a92      	ldr	r2, [pc, #584]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044be:	4b92      	ldr	r3, [pc, #584]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044c0:	e001      	b.n	80044c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a8b      	ldr	r2, [pc, #556]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044dc:	4b8a      	ldr	r3, [pc, #552]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044de:	e001      	b.n	80044e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f0:	d004      	beq.n	80044fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f040 8099 	bne.w	800462e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b02      	cmp	r3, #2
 8004504:	d107      	bne.n	8004516 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f925 	bl	8004760 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9c8 	bl	80048c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d13a      	bne.n	80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d035      	beq.n	80045b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a6e      	ldr	r2, [pc, #440]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d101      	bne.n	8004552 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800454e:	4b6e      	ldr	r3, [pc, #440]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004550:	e001      	b.n	8004556 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004552:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4969      	ldr	r1, [pc, #420]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800455e:	428b      	cmp	r3, r1
 8004560:	d101      	bne.n	8004566 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004562:	4b69      	ldr	r3, [pc, #420]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004564:	e001      	b.n	800456a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004566:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800456a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800456e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800457e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f043 0202 	orr.w	r2, r3, #2
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff fe88 	bl	80042c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	f040 80c3 	bne.w	8004742 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80bd 	beq.w	8004742 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a49      	ldr	r2, [pc, #292]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d101      	bne.n	80045e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045e2:	4b49      	ldr	r3, [pc, #292]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045e4:	e001      	b.n	80045ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4944      	ldr	r1, [pc, #272]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f2:	428b      	cmp	r3, r1
 80045f4:	d101      	bne.n	80045fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80045f6:	4b44      	ldr	r3, [pc, #272]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045f8:	e001      	b.n	80045fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80045fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004602:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004604:	2300      	movs	r3, #0
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fe4a 	bl	80042c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800462c:	e089      	b.n	8004742 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b02      	cmp	r3, #2
 8004636:	d107      	bne.n	8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8be 	bl	80047c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f8fd 	bl	800485c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d12f      	bne.n	80046cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d02a      	beq.n	80046cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004684:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a1e      	ldr	r2, [pc, #120]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004690:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004692:	e001      	b.n	8004698 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4919      	ldr	r1, [pc, #100]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046a0:	428b      	cmp	r3, r1
 80046a2:	d101      	bne.n	80046a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80046a4:	4b18      	ldr	r3, [pc, #96]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046a6:	e001      	b.n	80046ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80046a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	f043 0202 	orr.w	r2, r3, #2
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff fdfa 	bl	80042c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d136      	bne.n	8004744 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d031      	beq.n	8004744 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a07      	ldr	r2, [pc, #28]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046ec:	e001      	b.n	80046f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4902      	ldr	r1, [pc, #8]	; (8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046fa:	428b      	cmp	r3, r1
 80046fc:	d106      	bne.n	800470c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80046fe:	4b02      	ldr	r3, [pc, #8]	; (8004708 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004700:	e006      	b.n	8004710 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004702:	bf00      	nop
 8004704:	40003800 	.word	0x40003800
 8004708:	40003400 	.word	0x40003400
 800470c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004710:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004714:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004724:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fdc0 	bl	80042c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004740:	e000      	b.n	8004744 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004742:	bf00      	nop
}
 8004744:	bf00      	nop
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	1c99      	adds	r1, r3, #2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6251      	str	r1, [r2, #36]	; 0x24
 8004772:	881a      	ldrh	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d113      	bne.n	80047ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff ffc9 	bl	800474c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	1c99      	adds	r1, r3, #2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6251      	str	r1, [r2, #36]	; 0x24
 80047d6:	8819      	ldrh	r1, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1d      	ldr	r2, [pc, #116]	; (8004854 <I2SEx_TxISR_I2SExt+0x90>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <I2SEx_TxISR_I2SExt+0x22>
 80047e2:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <I2SEx_TxISR_I2SExt+0x94>)
 80047e4:	e001      	b.n	80047ea <I2SEx_TxISR_I2SExt+0x26>
 80047e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ea:	460a      	mov	r2, r1
 80047ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d121      	bne.n	800484a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a12      	ldr	r2, [pc, #72]	; (8004854 <I2SEx_TxISR_I2SExt+0x90>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <I2SEx_TxISR_I2SExt+0x50>
 8004810:	4b11      	ldr	r3, [pc, #68]	; (8004858 <I2SEx_TxISR_I2SExt+0x94>)
 8004812:	e001      	b.n	8004818 <I2SEx_TxISR_I2SExt+0x54>
 8004814:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	490d      	ldr	r1, [pc, #52]	; (8004854 <I2SEx_TxISR_I2SExt+0x90>)
 8004820:	428b      	cmp	r3, r1
 8004822:	d101      	bne.n	8004828 <I2SEx_TxISR_I2SExt+0x64>
 8004824:	4b0c      	ldr	r3, [pc, #48]	; (8004858 <I2SEx_TxISR_I2SExt+0x94>)
 8004826:	e001      	b.n	800482c <I2SEx_TxISR_I2SExt+0x68>
 8004828:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800482c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004830:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004836:	b29b      	uxth	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f7ff ff81 	bl	800474c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800484a:	bf00      	nop
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	40003800 	.word	0x40003800
 8004858:	40003400 	.word	0x40003400

0800485c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68d8      	ldr	r0, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	1c99      	adds	r1, r3, #2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004874:	b282      	uxth	r2, r0
 8004876:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d113      	bne.n	80048b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800489e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d106      	bne.n	80048b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f7ff ff4a 	bl	800474c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a20      	ldr	r2, [pc, #128]	; (8004950 <I2SEx_RxISR_I2SExt+0x90>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d101      	bne.n	80048d6 <I2SEx_RxISR_I2SExt+0x16>
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <I2SEx_RxISR_I2SExt+0x94>)
 80048d4:	e001      	b.n	80048da <I2SEx_RxISR_I2SExt+0x1a>
 80048d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048da:	68d8      	ldr	r0, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e0:	1c99      	adds	r1, r3, #2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048e6:	b282      	uxth	r2, r0
 80048e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d121      	bne.n	8004946 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <I2SEx_RxISR_I2SExt+0x90>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d101      	bne.n	8004910 <I2SEx_RxISR_I2SExt+0x50>
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <I2SEx_RxISR_I2SExt+0x94>)
 800490e:	e001      	b.n	8004914 <I2SEx_RxISR_I2SExt+0x54>
 8004910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	490d      	ldr	r1, [pc, #52]	; (8004950 <I2SEx_RxISR_I2SExt+0x90>)
 800491c:	428b      	cmp	r3, r1
 800491e:	d101      	bne.n	8004924 <I2SEx_RxISR_I2SExt+0x64>
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <I2SEx_RxISR_I2SExt+0x94>)
 8004922:	e001      	b.n	8004928 <I2SEx_RxISR_I2SExt+0x68>
 8004924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004928:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800492c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff ff03 	bl	800474c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40003800 	.word	0x40003800
 8004954:	40003400 	.word	0x40003400

08004958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e267      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d075      	beq.n	8004a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004976:	4b88      	ldr	r3, [pc, #544]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
 800497e:	2b04      	cmp	r3, #4
 8004980:	d00c      	beq.n	800499c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004982:	4b85      	ldr	r3, [pc, #532]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800498a:	2b08      	cmp	r3, #8
 800498c:	d112      	bne.n	80049b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800498e:	4b82      	ldr	r3, [pc, #520]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800499a:	d10b      	bne.n	80049b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499c:	4b7e      	ldr	r3, [pc, #504]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d05b      	beq.n	8004a60 <HAL_RCC_OscConfig+0x108>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d157      	bne.n	8004a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e242      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049bc:	d106      	bne.n	80049cc <HAL_RCC_OscConfig+0x74>
 80049be:	4b76      	ldr	r3, [pc, #472]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a75      	ldr	r2, [pc, #468]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 80049c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e01d      	b.n	8004a08 <HAL_RCC_OscConfig+0xb0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049d4:	d10c      	bne.n	80049f0 <HAL_RCC_OscConfig+0x98>
 80049d6:	4b70      	ldr	r3, [pc, #448]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6f      	ldr	r2, [pc, #444]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 80049dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	4b6d      	ldr	r3, [pc, #436]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a6c      	ldr	r2, [pc, #432]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	e00b      	b.n	8004a08 <HAL_RCC_OscConfig+0xb0>
 80049f0:	4b69      	ldr	r3, [pc, #420]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a68      	ldr	r2, [pc, #416]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 80049f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	4b66      	ldr	r3, [pc, #408]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a65      	ldr	r2, [pc, #404]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d013      	beq.n	8004a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a10:	f7fc fe6e 	bl	80016f0 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fc fe6a 	bl	80016f0 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e207      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2a:	4b5b      	ldr	r3, [pc, #364]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0xc0>
 8004a36:	e014      	b.n	8004a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a38:	f7fc fe5a 	bl	80016f0 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a3e:	e008      	b.n	8004a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a40:	f7fc fe56 	bl	80016f0 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b64      	cmp	r3, #100	; 0x64
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e1f3      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a52:	4b51      	ldr	r3, [pc, #324]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f0      	bne.n	8004a40 <HAL_RCC_OscConfig+0xe8>
 8004a5e:	e000      	b.n	8004a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d063      	beq.n	8004b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a6e:	4b4a      	ldr	r3, [pc, #296]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a7a:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d11c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a86:	4b44      	ldr	r3, [pc, #272]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d116      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a92:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <HAL_RCC_OscConfig+0x152>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d001      	beq.n	8004aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e1c7      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aaa:	4b3b      	ldr	r3, [pc, #236]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4937      	ldr	r1, [pc, #220]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004abe:	e03a      	b.n	8004b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d020      	beq.n	8004b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ac8:	4b34      	ldr	r3, [pc, #208]	; (8004b9c <HAL_RCC_OscConfig+0x244>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ace:	f7fc fe0f 	bl	80016f0 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad6:	f7fc fe0b 	bl	80016f0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e1a8      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af4:	4b28      	ldr	r3, [pc, #160]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4925      	ldr	r1, [pc, #148]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	600b      	str	r3, [r1, #0]
 8004b08:	e015      	b.n	8004b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b0a:	4b24      	ldr	r3, [pc, #144]	; (8004b9c <HAL_RCC_OscConfig+0x244>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fc fdee 	bl	80016f0 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b18:	f7fc fdea 	bl	80016f0 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e187      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d036      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d016      	beq.n	8004b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4a:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <HAL_RCC_OscConfig+0x248>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b50:	f7fc fdce 	bl	80016f0 <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b56:	e008      	b.n	8004b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b58:	f7fc fdca 	bl	80016f0 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e167      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0f0      	beq.n	8004b58 <HAL_RCC_OscConfig+0x200>
 8004b76:	e01b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCC_OscConfig+0x248>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b7e:	f7fc fdb7 	bl	80016f0 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b84:	e00e      	b.n	8004ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b86:	f7fc fdb3 	bl	80016f0 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d907      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e150      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	42470000 	.word	0x42470000
 8004ba0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ba4:	4b88      	ldr	r3, [pc, #544]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1ea      	bne.n	8004b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8097 	beq.w	8004cec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bc2:	4b81      	ldr	r3, [pc, #516]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10f      	bne.n	8004bee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	4b7d      	ldr	r3, [pc, #500]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	4a7c      	ldr	r2, [pc, #496]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bde:	4b7a      	ldr	r3, [pc, #488]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be6:	60bb      	str	r3, [r7, #8]
 8004be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bea:	2301      	movs	r3, #1
 8004bec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bee:	4b77      	ldr	r3, [pc, #476]	; (8004dcc <HAL_RCC_OscConfig+0x474>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d118      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bfa:	4b74      	ldr	r3, [pc, #464]	; (8004dcc <HAL_RCC_OscConfig+0x474>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a73      	ldr	r2, [pc, #460]	; (8004dcc <HAL_RCC_OscConfig+0x474>)
 8004c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c06:	f7fc fd73 	bl	80016f0 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c0e:	f7fc fd6f 	bl	80016f0 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e10c      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c20:	4b6a      	ldr	r3, [pc, #424]	; (8004dcc <HAL_RCC_OscConfig+0x474>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d106      	bne.n	8004c42 <HAL_RCC_OscConfig+0x2ea>
 8004c34:	4b64      	ldr	r3, [pc, #400]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4a63      	ldr	r2, [pc, #396]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c40:	e01c      	b.n	8004c7c <HAL_RCC_OscConfig+0x324>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCC_OscConfig+0x30c>
 8004c4a:	4b5f      	ldr	r3, [pc, #380]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4e:	4a5e      	ldr	r2, [pc, #376]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c50:	f043 0304 	orr.w	r3, r3, #4
 8004c54:	6713      	str	r3, [r2, #112]	; 0x70
 8004c56:	4b5c      	ldr	r3, [pc, #368]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	4a5b      	ldr	r2, [pc, #364]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	6713      	str	r3, [r2, #112]	; 0x70
 8004c62:	e00b      	b.n	8004c7c <HAL_RCC_OscConfig+0x324>
 8004c64:	4b58      	ldr	r3, [pc, #352]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c68:	4a57      	ldr	r2, [pc, #348]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c6a:	f023 0301 	bic.w	r3, r3, #1
 8004c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c70:	4b55      	ldr	r3, [pc, #340]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	4a54      	ldr	r2, [pc, #336]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004c76:	f023 0304 	bic.w	r3, r3, #4
 8004c7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d015      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c84:	f7fc fd34 	bl	80016f0 <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8c:	f7fc fd30 	bl	80016f0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e0cb      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca2:	4b49      	ldr	r3, [pc, #292]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0ee      	beq.n	8004c8c <HAL_RCC_OscConfig+0x334>
 8004cae:	e014      	b.n	8004cda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb0:	f7fc fd1e 	bl	80016f0 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb8:	f7fc fd1a 	bl	80016f0 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0b5      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cce:	4b3e      	ldr	r3, [pc, #248]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1ee      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d105      	bne.n	8004cec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce0:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	4a38      	ldr	r2, [pc, #224]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80a1 	beq.w	8004e38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cf6:	4b34      	ldr	r3, [pc, #208]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d05c      	beq.n	8004dbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d141      	bne.n	8004d8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0a:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <HAL_RCC_OscConfig+0x478>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fc fcee 	bl	80016f0 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fc fcea 	bl	80016f0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e087      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2a:	4b27      	ldr	r3, [pc, #156]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	69da      	ldr	r2, [r3, #28]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	019b      	lsls	r3, r3, #6
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	061b      	lsls	r3, r3, #24
 8004d5a:	491b      	ldr	r1, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_OscConfig+0x478>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d66:	f7fc fcc3 	bl	80016f0 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fc fcbf 	bl	80016f0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e05c      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x416>
 8004d8c:	e054      	b.n	8004e38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <HAL_RCC_OscConfig+0x478>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fc fcac 	bl	80016f0 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fc fca8 	bl	80016f0 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e045      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_RCC_OscConfig+0x470>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x444>
 8004dba:	e03d      	b.n	8004e38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e038      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40007000 	.word	0x40007000
 8004dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <HAL_RCC_OscConfig+0x4ec>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d028      	beq.n	8004e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d121      	bne.n	8004e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d11a      	bne.n	8004e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d111      	bne.n	8004e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	085b      	lsrs	r3, r3, #1
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d107      	bne.n	8004e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800

08004e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0cc      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e5c:	4b68      	ldr	r3, [pc, #416]	; (8005000 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d90c      	bls.n	8004e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6a:	4b65      	ldr	r3, [pc, #404]	; (8005000 <HAL_RCC_ClockConfig+0x1b8>)
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	4b63      	ldr	r3, [pc, #396]	; (8005000 <HAL_RCC_ClockConfig+0x1b8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e0b8      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d020      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0304 	and.w	r3, r3, #4
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e9c:	4b59      	ldr	r3, [pc, #356]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	4a58      	ldr	r2, [pc, #352]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eb4:	4b53      	ldr	r3, [pc, #332]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	4a52      	ldr	r2, [pc, #328]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec0:	4b50      	ldr	r3, [pc, #320]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	494d      	ldr	r1, [pc, #308]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d044      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d107      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee6:	4b47      	ldr	r3, [pc, #284]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d119      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e07f      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d003      	beq.n	8004f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d107      	bne.n	8004f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f06:	4b3f      	ldr	r3, [pc, #252]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e06f      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f16:	4b3b      	ldr	r3, [pc, #236]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e067      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f26:	4b37      	ldr	r3, [pc, #220]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f023 0203 	bic.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	4934      	ldr	r1, [pc, #208]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f38:	f7fc fbda 	bl	80016f0 <HAL_GetTick>
 8004f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f40:	f7fc fbd6 	bl	80016f0 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e04f      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f56:	4b2b      	ldr	r3, [pc, #172]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 020c 	and.w	r2, r3, #12
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d1eb      	bne.n	8004f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f68:	4b25      	ldr	r3, [pc, #148]	; (8005000 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d20c      	bcs.n	8004f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b22      	ldr	r3, [pc, #136]	; (8005000 <HAL_RCC_ClockConfig+0x1b8>)
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f7e:	4b20      	ldr	r3, [pc, #128]	; (8005000 <HAL_RCC_ClockConfig+0x1b8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d001      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e032      	b.n	8004ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	4916      	ldr	r1, [pc, #88]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004fba:	4b12      	ldr	r3, [pc, #72]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	490e      	ldr	r1, [pc, #56]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fce:	f000 f821 	bl	8005014 <HAL_RCC_GetSysClockFreq>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	490a      	ldr	r1, [pc, #40]	; (8005008 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe0:	5ccb      	ldrb	r3, [r1, r3]
 8004fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe6:	4a09      	ldr	r2, [pc, #36]	; (800500c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <HAL_RCC_ClockConfig+0x1c8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fc fb3a 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40023c00 	.word	0x40023c00
 8005004:	40023800 	.word	0x40023800
 8005008:	08008e90 	.word	0x08008e90
 800500c:	20000000 	.word	0x20000000
 8005010:	20000004 	.word	0x20000004

08005014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005018:	b094      	sub	sp, #80	; 0x50
 800501a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	647b      	str	r3, [r7, #68]	; 0x44
 8005020:	2300      	movs	r3, #0
 8005022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005024:	2300      	movs	r3, #0
 8005026:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800502c:	4b79      	ldr	r3, [pc, #484]	; (8005214 <HAL_RCC_GetSysClockFreq+0x200>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 030c 	and.w	r3, r3, #12
 8005034:	2b08      	cmp	r3, #8
 8005036:	d00d      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0x40>
 8005038:	2b08      	cmp	r3, #8
 800503a:	f200 80e1 	bhi.w	8005200 <HAL_RCC_GetSysClockFreq+0x1ec>
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0x34>
 8005042:	2b04      	cmp	r3, #4
 8005044:	d003      	beq.n	800504e <HAL_RCC_GetSysClockFreq+0x3a>
 8005046:	e0db      	b.n	8005200 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005048:	4b73      	ldr	r3, [pc, #460]	; (8005218 <HAL_RCC_GetSysClockFreq+0x204>)
 800504a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800504c:	e0db      	b.n	8005206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800504e:	4b73      	ldr	r3, [pc, #460]	; (800521c <HAL_RCC_GetSysClockFreq+0x208>)
 8005050:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005052:	e0d8      	b.n	8005206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005054:	4b6f      	ldr	r3, [pc, #444]	; (8005214 <HAL_RCC_GetSysClockFreq+0x200>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800505c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800505e:	4b6d      	ldr	r3, [pc, #436]	; (8005214 <HAL_RCC_GetSysClockFreq+0x200>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d063      	beq.n	8005132 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800506a:	4b6a      	ldr	r3, [pc, #424]	; (8005214 <HAL_RCC_GetSysClockFreq+0x200>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	099b      	lsrs	r3, r3, #6
 8005070:	2200      	movs	r2, #0
 8005072:	63bb      	str	r3, [r7, #56]	; 0x38
 8005074:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507c:	633b      	str	r3, [r7, #48]	; 0x30
 800507e:	2300      	movs	r3, #0
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
 8005082:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005086:	4622      	mov	r2, r4
 8005088:	462b      	mov	r3, r5
 800508a:	f04f 0000 	mov.w	r0, #0
 800508e:	f04f 0100 	mov.w	r1, #0
 8005092:	0159      	lsls	r1, r3, #5
 8005094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005098:	0150      	lsls	r0, r2, #5
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4621      	mov	r1, r4
 80050a0:	1a51      	subs	r1, r2, r1
 80050a2:	6139      	str	r1, [r7, #16]
 80050a4:	4629      	mov	r1, r5
 80050a6:	eb63 0301 	sbc.w	r3, r3, r1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050b8:	4659      	mov	r1, fp
 80050ba:	018b      	lsls	r3, r1, #6
 80050bc:	4651      	mov	r1, sl
 80050be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050c2:	4651      	mov	r1, sl
 80050c4:	018a      	lsls	r2, r1, #6
 80050c6:	4651      	mov	r1, sl
 80050c8:	ebb2 0801 	subs.w	r8, r2, r1
 80050cc:	4659      	mov	r1, fp
 80050ce:	eb63 0901 	sbc.w	r9, r3, r1
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050e6:	4690      	mov	r8, r2
 80050e8:	4699      	mov	r9, r3
 80050ea:	4623      	mov	r3, r4
 80050ec:	eb18 0303 	adds.w	r3, r8, r3
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	462b      	mov	r3, r5
 80050f4:	eb49 0303 	adc.w	r3, r9, r3
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005106:	4629      	mov	r1, r5
 8005108:	024b      	lsls	r3, r1, #9
 800510a:	4621      	mov	r1, r4
 800510c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005110:	4621      	mov	r1, r4
 8005112:	024a      	lsls	r2, r1, #9
 8005114:	4610      	mov	r0, r2
 8005116:	4619      	mov	r1, r3
 8005118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511a:	2200      	movs	r2, #0
 800511c:	62bb      	str	r3, [r7, #40]	; 0x28
 800511e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005124:	f7fb f850 	bl	80001c8 <__aeabi_uldivmod>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4613      	mov	r3, r2
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005130:	e058      	b.n	80051e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005132:	4b38      	ldr	r3, [pc, #224]	; (8005214 <HAL_RCC_GetSysClockFreq+0x200>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	099b      	lsrs	r3, r3, #6
 8005138:	2200      	movs	r2, #0
 800513a:	4618      	mov	r0, r3
 800513c:	4611      	mov	r1, r2
 800513e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005142:	623b      	str	r3, [r7, #32]
 8005144:	2300      	movs	r3, #0
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
 8005148:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	f04f 0000 	mov.w	r0, #0
 8005154:	f04f 0100 	mov.w	r1, #0
 8005158:	0159      	lsls	r1, r3, #5
 800515a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800515e:	0150      	lsls	r0, r2, #5
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4641      	mov	r1, r8
 8005166:	ebb2 0a01 	subs.w	sl, r2, r1
 800516a:	4649      	mov	r1, r9
 800516c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800517c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005180:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005184:	ebb2 040a 	subs.w	r4, r2, sl
 8005188:	eb63 050b 	sbc.w	r5, r3, fp
 800518c:	f04f 0200 	mov.w	r2, #0
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	00eb      	lsls	r3, r5, #3
 8005196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519a:	00e2      	lsls	r2, r4, #3
 800519c:	4614      	mov	r4, r2
 800519e:	461d      	mov	r5, r3
 80051a0:	4643      	mov	r3, r8
 80051a2:	18e3      	adds	r3, r4, r3
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	464b      	mov	r3, r9
 80051a8:	eb45 0303 	adc.w	r3, r5, r3
 80051ac:	607b      	str	r3, [r7, #4]
 80051ae:	f04f 0200 	mov.w	r2, #0
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051ba:	4629      	mov	r1, r5
 80051bc:	028b      	lsls	r3, r1, #10
 80051be:	4621      	mov	r1, r4
 80051c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051c4:	4621      	mov	r1, r4
 80051c6:	028a      	lsls	r2, r1, #10
 80051c8:	4610      	mov	r0, r2
 80051ca:	4619      	mov	r1, r3
 80051cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ce:	2200      	movs	r2, #0
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	61fa      	str	r2, [r7, #28]
 80051d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051d8:	f7fa fff6 	bl	80001c8 <__aeabi_uldivmod>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4613      	mov	r3, r2
 80051e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	0c1b      	lsrs	r3, r3, #16
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	3301      	adds	r3, #1
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80051f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051fe:	e002      	b.n	8005206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_GetSysClockFreq+0x204>)
 8005202:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005208:	4618      	mov	r0, r3
 800520a:	3750      	adds	r7, #80	; 0x50
 800520c:	46bd      	mov	sp, r7
 800520e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005212:	bf00      	nop
 8005214:	40023800 	.word	0x40023800
 8005218:	00f42400 	.word	0x00f42400
 800521c:	007a1200 	.word	0x007a1200

08005220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005224:	4b03      	ldr	r3, [pc, #12]	; (8005234 <HAL_RCC_GetHCLKFreq+0x14>)
 8005226:	681b      	ldr	r3, [r3, #0]
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20000000 	.word	0x20000000

08005238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800523c:	f7ff fff0 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8005240:	4602      	mov	r2, r0
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	0a9b      	lsrs	r3, r3, #10
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	4903      	ldr	r1, [pc, #12]	; (800525c <HAL_RCC_GetPCLK1Freq+0x24>)
 800524e:	5ccb      	ldrb	r3, [r1, r3]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005254:	4618      	mov	r0, r3
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40023800 	.word	0x40023800
 800525c:	08008ea0 	.word	0x08008ea0

08005260 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d105      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005284:	2b00      	cmp	r3, #0
 8005286:	d035      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005288:	4b62      	ldr	r3, [pc, #392]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800528e:	f7fc fa2f 	bl	80016f0 <HAL_GetTick>
 8005292:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005294:	e008      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005296:	f7fc fa2b 	bl	80016f0 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e0b0      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a8:	4b5b      	ldr	r3, [pc, #364]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1f0      	bne.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	019a      	lsls	r2, r3, #6
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	071b      	lsls	r3, r3, #28
 80052c0:	4955      	ldr	r1, [pc, #340]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052c8:	4b52      	ldr	r3, [pc, #328]	; (8005414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ce:	f7fc fa0f 	bl	80016f0 <HAL_GetTick>
 80052d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052d4:	e008      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052d6:	f7fc fa0b 	bl	80016f0 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e090      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052e8:	4b4b      	ldr	r3, [pc, #300]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8083 	beq.w	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	4b44      	ldr	r3, [pc, #272]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	4a43      	ldr	r2, [pc, #268]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005310:	6413      	str	r3, [r2, #64]	; 0x40
 8005312:	4b41      	ldr	r3, [pc, #260]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800531e:	4b3f      	ldr	r3, [pc, #252]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3e      	ldr	r2, [pc, #248]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005328:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800532a:	f7fc f9e1 	bl	80016f0 <HAL_GetTick>
 800532e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005332:	f7fc f9dd 	bl	80016f0 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e062      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005344:	4b35      	ldr	r3, [pc, #212]	; (800541c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005350:	4b31      	ldr	r3, [pc, #196]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005358:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02f      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d028      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800536e:	4b2a      	ldr	r3, [pc, #168]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005376:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005378:	4b29      	ldr	r3, [pc, #164]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800537e:	4b28      	ldr	r3, [pc, #160]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005384:	4a24      	ldr	r2, [pc, #144]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800538a:	4b23      	ldr	r3, [pc, #140]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d114      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005396:	f7fc f9ab 	bl	80016f0 <HAL_GetTick>
 800539a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539c:	e00a      	b.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539e:	f7fc f9a7 	bl	80016f0 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e02a      	b.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b4:	4b18      	ldr	r3, [pc, #96]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0ee      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053cc:	d10d      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80053ce:	4b12      	ldr	r3, [pc, #72]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e2:	490d      	ldr	r1, [pc, #52]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	608b      	str	r3, [r1, #8]
 80053e8:	e005      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	4a0a      	ldr	r2, [pc, #40]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053f4:	6093      	str	r3, [r2, #8]
 80053f6:	4b08      	ldr	r3, [pc, #32]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005402:	4905      	ldr	r1, [pc, #20]	; (8005418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005404:	4313      	orrs	r3, r2
 8005406:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	42470068 	.word	0x42470068
 8005418:	40023800 	.word	0x40023800
 800541c:	40007000 	.word	0x40007000
 8005420:	42470e40 	.word	0x42470e40

08005424 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d13e      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005442:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d12f      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005458:	4b1e      	ldr	r3, [pc, #120]	; (80054d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800545a:	617b      	str	r3, [r7, #20]
          break;
 800545c:	e02f      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800545e:	4b1c      	ldr	r3, [pc, #112]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800546a:	d108      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800546c:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005474:	4a18      	ldr	r2, [pc, #96]	; (80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	e007      	b.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800547e:	4b14      	ldr	r3, [pc, #80]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005486:	4a15      	ldr	r2, [pc, #84]	; (80054dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005488:	fbb2 f3f3 	udiv	r3, r2, r3
 800548c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800548e:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	fb02 f303 	mul.w	r3, r2, r3
 80054a0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80054a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054a8:	0f1b      	lsrs	r3, r3, #28
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
          break;
 80054b6:	e002      	b.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
          break;
 80054bc:	bf00      	nop
        }
      }
      break;
 80054be:	bf00      	nop
    }
  }
  return frequency;
 80054c0:	697b      	ldr	r3, [r7, #20]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800
 80054d4:	00bb8000 	.word	0x00bb8000
 80054d8:	007a1200 	.word	0x007a1200
 80054dc:	00f42400 	.word	0x00f42400

080054e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e07b      	b.n	80055ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005502:	d009      	beq.n	8005518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	61da      	str	r2, [r3, #28]
 800550a:	e005      	b.n	8005518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d106      	bne.n	8005538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fb ff88 	bl	8001448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800554e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	ea42 0103 	orr.w	r1, r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	f003 0104 	and.w	r1, r3, #4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	f003 0210 	and.w	r2, r3, #16
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055f2:	b084      	sub	sp, #16
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	f107 001c 	add.w	r0, r7, #28
 8005600:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	2b01      	cmp	r3, #1
 8005608:	d122      	bne.n	8005650 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800561e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f9bf 	bl	80059c8 <USB_CoreReset>
 800564a:	4603      	mov	r3, r0
 800564c:	73fb      	strb	r3, [r7, #15]
 800564e:	e01a      	b.n	8005686 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f9b3 	bl	80059c8 <USB_CoreReset>
 8005662:	4603      	mov	r3, r0
 8005664:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005670:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	639a      	str	r2, [r3, #56]	; 0x38
 8005678:	e005      	b.n	8005686 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	2b01      	cmp	r3, #1
 800568a:	d10b      	bne.n	80056a4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f043 0206 	orr.w	r2, r3, #6
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b0:	b004      	add	sp, #16
 80056b2:	4770      	bx	lr

080056b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f043 0201 	orr.w	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 0201 	bic.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d115      	bne.n	8005746 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005726:	2001      	movs	r0, #1
 8005728:	f7fb ffee 	bl	8001708 <HAL_Delay>
      ms++;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f939 	bl	80059aa <USB_GetMode>
 8005738:	4603      	mov	r3, r0
 800573a:	2b01      	cmp	r3, #1
 800573c:	d01e      	beq.n	800577c <USB_SetCurrentMode+0x84>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b31      	cmp	r3, #49	; 0x31
 8005742:	d9f0      	bls.n	8005726 <USB_SetCurrentMode+0x2e>
 8005744:	e01a      	b.n	800577c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d115      	bne.n	8005778 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005758:	2001      	movs	r0, #1
 800575a:	f7fb ffd5 	bl	8001708 <HAL_Delay>
      ms++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3301      	adds	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f920 	bl	80059aa <USB_GetMode>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <USB_SetCurrentMode+0x84>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b31      	cmp	r3, #49	; 0x31
 8005774:	d9f0      	bls.n	8005758 <USB_SetCurrentMode+0x60>
 8005776:	e001      	b.n	800577c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e005      	b.n	8005788 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b32      	cmp	r3, #50	; 0x32
 8005780:	d101      	bne.n	8005786 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <USB_FlushTxFifo+0x64>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d901      	bls.n	80057b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e01b      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	daf2      	bge.n	800579e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	019b      	lsls	r3, r3, #6
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <USB_FlushTxFifo+0x64>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e006      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d0f0      	beq.n	80057c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	00030d40 	.word	0x00030d40

080057f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3301      	adds	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4a11      	ldr	r2, [pc, #68]	; (8005854 <USB_FlushRxFifo+0x5c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e018      	b.n	8005848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	daf2      	bge.n	8005804 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2210      	movs	r2, #16
 8005826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4a08      	ldr	r2, [pc, #32]	; (8005854 <USB_FlushRxFifo+0x5c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e006      	b.n	8005848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b10      	cmp	r3, #16
 8005844:	d0f0      	beq.n	8005828 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	00030d40 	.word	0x00030d40

08005858 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	; 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	460b      	mov	r3, r1
 8005868:	71fb      	strb	r3, [r7, #7]
 800586a:	4613      	mov	r3, r2
 800586c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005876:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d123      	bne.n	80058c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800587e:	88bb      	ldrh	r3, [r7, #4]
 8005880:	3303      	adds	r3, #3
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e018      	b.n	80058be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	031a      	lsls	r2, r3, #12
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4413      	add	r3, r2
 8005894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005898:	461a      	mov	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	3301      	adds	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	3301      	adds	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3301      	adds	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3e2      	bcc.n	800588c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3724      	adds	r7, #36	; 0x24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b08b      	sub	sp, #44	; 0x2c
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	623b      	str	r3, [r7, #32]
 80058fe:	e014      	b.n	800592a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	601a      	str	r2, [r3, #0]
    pDest++;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	3301      	adds	r3, #1
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	3301      	adds	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	3301      	adds	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	3301      	adds	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	3301      	adds	r3, #1
 8005928:	623b      	str	r3, [r7, #32]
 800592a:	6a3a      	ldr	r2, [r7, #32]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	429a      	cmp	r2, r3
 8005930:	d3e6      	bcc.n	8005900 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005932:	8bfb      	ldrh	r3, [r7, #30]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01e      	beq.n	8005976 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005942:	461a      	mov	r2, r3
 8005944:	f107 0310 	add.w	r3, r7, #16
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
 8005958:	b2da      	uxtb	r2, r3
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	701a      	strb	r2, [r3, #0]
      i++;
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	3301      	adds	r3, #1
 8005962:	623b      	str	r3, [r7, #32]
      pDest++;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	3301      	adds	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800596a:	8bfb      	ldrh	r3, [r7, #30]
 800596c:	3b01      	subs	r3, #1
 800596e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005970:	8bfb      	ldrh	r3, [r7, #30]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1ea      	bne.n	800594c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005978:	4618      	mov	r0, r3
 800597a:	372c      	adds	r7, #44	; 0x2c
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4013      	ands	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800599c:	68fb      	ldr	r3, [r7, #12]
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0301 	and.w	r3, r3, #1
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	3301      	adds	r3, #1
 80059d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <USB_CoreReset+0x64>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d901      	bls.n	80059e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e01b      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	daf2      	bge.n	80059d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f043 0201 	orr.w	r2, r3, #1
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a09      	ldr	r2, [pc, #36]	; (8005a2c <USB_CoreReset+0x64>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e006      	b.n	8005a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d0f0      	beq.n	80059fe <USB_CoreReset+0x36>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	00030d40 	.word	0x00030d40

08005a30 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a30:	b084      	sub	sp, #16
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a50:	461a      	mov	r2, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d10a      	bne.n	8005aa2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a9a:	f043 0304 	orr.w	r3, r3, #4
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e014      	b.n	8005acc <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ab0:	f023 0304 	bic.w	r3, r3, #4
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e009      	b.n	8005acc <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ac6:	f023 0304 	bic.w	r3, r3, #4
 8005aca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005acc:	2110      	movs	r1, #16
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fe5e 	bl	8005790 <USB_FlushTxFifo>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff fe8a 	bl	80057f8 <USB_FlushRxFifo>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005aee:	2300      	movs	r3, #0
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e015      	b.n	8005b20 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b00:	461a      	mov	r2, r3
 8005b02:	f04f 33ff 	mov.w	r3, #4294967295
 8005b06:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d3e5      	bcc.n	8005af4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b48:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a13      	ldr	r2, [pc, #76]	; (8005b9c <USB_HostInit+0x16c>)
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <USB_HostInit+0x170>)
 8005b54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b58:	e009      	b.n	8005b6e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2280      	movs	r2, #128	; 0x80
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a10      	ldr	r2, [pc, #64]	; (8005ba4 <USB_HostInit+0x174>)
 8005b64:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a0f      	ldr	r2, [pc, #60]	; (8005ba8 <USB_HostInit+0x178>)
 8005b6a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f043 0210 	orr.w	r2, r3, #16
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	4b09      	ldr	r3, [pc, #36]	; (8005bac <USB_HostInit+0x17c>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b98:	b004      	add	sp, #16
 8005b9a:	4770      	bx	lr
 8005b9c:	01000200 	.word	0x01000200
 8005ba0:	00e00300 	.word	0x00e00300
 8005ba4:	00600080 	.word	0x00600080
 8005ba8:	004000e0 	.word	0x004000e0
 8005bac:	a3200008 	.word	0xa3200008

08005bb0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	78fb      	ldrb	r3, [r7, #3]
 8005bde:	f003 0303 	and.w	r3, r3, #3
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005be8:	4313      	orrs	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d107      	bne.n	8005c02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005bfe:	6053      	str	r3, [r2, #4]
 8005c00:	e009      	b.n	8005c16 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d106      	bne.n	8005c16 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0e:	461a      	mov	r2, r3
 8005c10:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c14:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c52:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c54:	2064      	movs	r0, #100	; 0x64
 8005c56:	f7fb fd57 	bl	8001708 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c66:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c68:	200a      	movs	r0, #10
 8005c6a:	f7fb fd4d 	bl	8001708 <HAL_Delay>

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	460b      	mov	r3, r1
 8005c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c9c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <USB_DriveVbus+0x44>
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d106      	bne.n	8005cbc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cba:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc6:	d109      	bne.n	8005cdc <USB_DriveVbus+0x64>
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cda:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b085      	sub	sp, #20
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	0c5b      	lsrs	r3, r3, #17
 8005d08:	f003 0303 	and.w	r3, r3, #3
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	b29b      	uxth	r3, r3
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
	...

08005d3c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	4608      	mov	r0, r1
 8005d46:	4611      	mov	r1, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	70fb      	strb	r3, [r7, #3]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70bb      	strb	r3, [r7, #2]
 8005d52:	4613      	mov	r3, r2
 8005d54:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d5e:	78fb      	ldrb	r3, [r7, #3]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d70:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d87e      	bhi.n	8005e78 <USB_HC_Init+0x13c>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <USB_HC_Init+0x44>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d91 	.word	0x08005d91
 8005d84:	08005e3b 	.word	0x08005e3b
 8005d88:	08005d91 	.word	0x08005d91
 8005d8c:	08005dfd 	.word	0x08005dfd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005da2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005da4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da10      	bge.n	8005dce <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dca:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005dcc:	e057      	b.n	8005e7e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d051      	beq.n	8005e7e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005df4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005df8:	60d3      	str	r3, [r2, #12]
      break;
 8005dfa:	e040      	b.n	8005e7e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	da34      	bge.n	8005e82 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	78fa      	ldrb	r2, [r7, #3]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e36:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e38:	e023      	b.n	8005e82 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e46:	461a      	mov	r2, r3
 8005e48:	f240 2325 	movw	r3, #549	; 0x225
 8005e4c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e4e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da17      	bge.n	8005e86 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e70:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005e74:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e76:	e006      	b.n	8005e86 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	77fb      	strb	r3, [r7, #31]
      break;
 8005e7c:	e004      	b.n	8005e88 <USB_HC_Init+0x14c>
      break;
 8005e7e:	bf00      	nop
 8005e80:	e002      	b.n	8005e88 <USB_HC_Init+0x14c>
      break;
 8005e82:	bf00      	nop
 8005e84:	e000      	b.n	8005e88 <USB_HC_Init+0x14c>
      break;
 8005e86:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea2:	f043 0302 	orr.w	r3, r3, #2
 8005ea6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eae:	699a      	ldr	r2, [r3, #24]
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	6939      	ldr	r1, [r7, #16]
 8005ebe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ed2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	da03      	bge.n	8005ee2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e001      	b.n	8005ee6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff feff 	bl	8005cea <USB_GetHostSpeed>
 8005eec:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005eee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d106      	bne.n	8005f04 <USB_HC_Init+0x1c8>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d003      	beq.n	8005f04 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e001      	b.n	8005f08 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f08:	787b      	ldrb	r3, [r7, #1]
 8005f0a:	059b      	lsls	r3, r3, #22
 8005f0c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f10:	78bb      	ldrb	r3, [r7, #2]
 8005f12:	02db      	lsls	r3, r3, #11
 8005f14:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f18:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f1e:	049b      	lsls	r3, r3, #18
 8005f20:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f26:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f2c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f32:	78fb      	ldrb	r3, [r7, #3]
 8005f34:	0159      	lsls	r1, r3, #5
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	440b      	add	r3, r1
 8005f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f3e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f44:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d003      	beq.n	8005f56 <USB_HC_Init+0x21a>
 8005f4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10f      	bne.n	8005f76 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f74:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08c      	sub	sp, #48	; 0x30
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005f98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f9c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d02d      	beq.n	8006006 <USB_HC_StartXfer+0x86>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	791b      	ldrb	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d129      	bne.n	8006006 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d117      	bne.n	8005fe8 <USB_HC_StartXfer+0x68>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	79db      	ldrb	r3, [r3, #7]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d003      	beq.n	8005fc8 <USB_HC_StartXfer+0x48>
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	79db      	ldrb	r3, [r3, #7]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d10f      	bne.n	8005fe8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	6a3a      	ldr	r2, [r7, #32]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10b      	bne.n	8006006 <USB_HC_StartXfer+0x86>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	795b      	ldrb	r3, [r3, #5]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d107      	bne.n	8006006 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	785b      	ldrb	r3, [r3, #1]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fa0f 	bl	8006420 <USB_DoPing>
      return HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	e0f8      	b.n	80061f8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d018      	beq.n	8006040 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	8912      	ldrh	r2, [r2, #8]
 8006016:	4413      	add	r3, r2
 8006018:	3b01      	subs	r3, #1
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	8912      	ldrh	r2, [r2, #8]
 800601e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006022:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006024:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006026:	8b7b      	ldrh	r3, [r7, #26]
 8006028:	429a      	cmp	r2, r3
 800602a:	d90b      	bls.n	8006044 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800602c:	8b7b      	ldrh	r3, [r7, #26]
 800602e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006030:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	8912      	ldrh	r2, [r2, #8]
 8006036:	fb03 f202 	mul.w	r2, r3, r2
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	611a      	str	r2, [r3, #16]
 800603e:	e001      	b.n	8006044 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006040:	2301      	movs	r3, #1
 8006042:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	78db      	ldrb	r3, [r3, #3]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800604c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	8912      	ldrh	r2, [r2, #8]
 8006052:	fb03 f202 	mul.w	r2, r3, r2
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	611a      	str	r2, [r3, #16]
 800605a:	e003      	b.n	8006064 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	695a      	ldr	r2, [r3, #20]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800606c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800606e:	04d9      	lsls	r1, r3, #19
 8006070:	4b63      	ldr	r3, [pc, #396]	; (8006200 <USB_HC_StartXfer+0x280>)
 8006072:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006074:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	7a9b      	ldrb	r3, [r3, #10]
 800607a:	075b      	lsls	r3, r3, #29
 800607c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	0148      	lsls	r0, r1, #5
 8006084:	6a39      	ldr	r1, [r7, #32]
 8006086:	4401      	add	r1, r0
 8006088:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800608c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800608e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	68d9      	ldr	r1, [r3, #12]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a6:	460a      	mov	r2, r1
 80060a8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf0c      	ite	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	2300      	movne	r3, #0
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060e0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	7e7b      	ldrb	r3, [r7, #25]
 80060f2:	075b      	lsls	r3, r3, #29
 80060f4:	69f9      	ldr	r1, [r7, #28]
 80060f6:	0148      	lsls	r0, r1, #5
 80060f8:	6a39      	ldr	r1, [r7, #32]
 80060fa:	4401      	add	r1, r0
 80060fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006100:	4313      	orrs	r3, r2
 8006102:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	4413      	add	r3, r2
 800610c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800611a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	78db      	ldrb	r3, [r3, #3]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d004      	beq.n	800612e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800612a:	613b      	str	r3, [r7, #16]
 800612c:	e003      	b.n	8006136 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006134:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800613c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	4413      	add	r3, r2
 8006146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614a:	461a      	mov	r2, r3
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	e04e      	b.n	80061f8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	78db      	ldrb	r3, [r3, #3]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d149      	bne.n	80061f6 <USB_HC_StartXfer+0x276>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d045      	beq.n	80061f6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	79db      	ldrb	r3, [r3, #7]
 800616e:	2b03      	cmp	r3, #3
 8006170:	d830      	bhi.n	80061d4 <USB_HC_StartXfer+0x254>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <USB_HC_StartXfer+0x1f8>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	08006189 	.word	0x08006189
 800617c:	080061ad 	.word	0x080061ad
 8006180:	08006189 	.word	0x08006189
 8006184:	080061ad 	.word	0x080061ad
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	3303      	adds	r3, #3
 800618e:	089b      	lsrs	r3, r3, #2
 8006190:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006192:	8afa      	ldrh	r2, [r7, #22]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	b29b      	uxth	r3, r3
 800619a:	429a      	cmp	r2, r3
 800619c:	d91c      	bls.n	80061d8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f043 0220 	orr.w	r2, r3, #32
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80061aa:	e015      	b.n	80061d8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	3303      	adds	r3, #3
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061b6:	8afa      	ldrh	r2, [r7, #22]
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d90a      	bls.n	80061dc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80061d2:	e003      	b.n	80061dc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80061d4:	bf00      	nop
 80061d6:	e002      	b.n	80061de <USB_HC_StartXfer+0x25e>
        break;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <USB_HC_StartXfer+0x25e>
        break;
 80061dc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	68d9      	ldr	r1, [r3, #12]
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	785a      	ldrb	r2, [r3, #1]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2000      	movs	r0, #0
 80061ee:	9000      	str	r0, [sp, #0]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fb31 	bl	8005858 <USB_WritePacket>
  }

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3728      	adds	r7, #40	; 0x28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	1ff80000 	.word	0x1ff80000

08006204 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	b29b      	uxth	r3, r3
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006226:	b480      	push	{r7}
 8006228:	b089      	sub	sp, #36	; 0x24
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	460b      	mov	r3, r1
 8006230:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	0c9b      	lsrs	r3, r3, #18
 800624e:	f003 0303 	and.w	r3, r3, #3
 8006252:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	0fdb      	lsrs	r3, r3, #31
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b20      	cmp	r3, #32
 8006274:	d104      	bne.n	8006280 <USB_HC_Halt+0x5a>
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800627c:	2300      	movs	r3, #0
 800627e:	e0c8      	b.n	8006412 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <USB_HC_Halt+0x66>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d163      	bne.n	8006354 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f003 0320 	and.w	r3, r3, #32
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 80ab 	bne.w	8006410 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d133      	bne.n	800632e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	0151      	lsls	r1, r2, #5
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	440a      	add	r2, r1
 80062dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062e4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006304:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006312:	d81d      	bhi.n	8006350 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006326:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800632a:	d0ec      	beq.n	8006306 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800632c:	e070      	b.n	8006410 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	4413      	add	r3, r2
 8006336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	0151      	lsls	r1, r2, #5
 8006340:	69fa      	ldr	r2, [r7, #28]
 8006342:	440a      	add	r2, r1
 8006344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800634c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800634e:	e05f      	b.n	8006410 <USB_HC_Halt+0x1ea>
            break;
 8006350:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006352:	e05d      	b.n	8006410 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	440a      	add	r2, r1
 800636a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800636e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006372:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d133      	bne.n	80063ec <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	0151      	lsls	r1, r2, #5
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	440a      	add	r2, r1
 800639a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063c2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3301      	adds	r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063d0:	d81d      	bhi.n	800640e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e8:	d0ec      	beq.n	80063c4 <USB_HC_Halt+0x19e>
 80063ea:	e011      	b.n	8006410 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	440a      	add	r2, r1
 8006402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	e000      	b.n	8006410 <USB_HC_Halt+0x1ea>
          break;
 800640e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3724      	adds	r7, #36	; 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006434:	2301      	movs	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	04da      	lsls	r2, r3, #19
 800643c:	4b15      	ldr	r3, [pc, #84]	; (8006494 <USB_DoPing+0x74>)
 800643e:	4013      	ands	r3, r2
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	440a      	add	r2, r1
 8006448:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800644c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006450:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006468:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006470:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647e:	461a      	mov	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	1ff80000 	.word	0x1ff80000

08006498 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff f912 	bl	80056d6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064b2:	2110      	movs	r1, #16
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff f96b 	bl	8005790 <USB_FlushTxFifo>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff f997 	bl	80057f8 <USB_FlushRxFifo>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
 80064d8:	e01f      	b.n	800651a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006500:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650e:	461a      	mov	r2, r3
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	3301      	adds	r3, #1
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b0f      	cmp	r3, #15
 800651e:	d9dc      	bls.n	80064da <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006520:	2300      	movs	r3, #0
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e034      	b.n	8006590 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4413      	add	r3, r2
 800652e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800653c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006544:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800654c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	461a      	mov	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800656c:	d80c      	bhi.n	8006588 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006580:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006584:	d0ec      	beq.n	8006560 <USB_StopHost+0xc8>
 8006586:	e000      	b.n	800658a <USB_StopHost+0xf2>
        break;
 8006588:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	3301      	adds	r3, #1
 800658e:	61bb      	str	r3, [r7, #24]
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b0f      	cmp	r3, #15
 8006594:	d9c7      	bls.n	8006526 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800659c:	461a      	mov	r2, r3
 800659e:	f04f 33ff 	mov.w	r3, #4294967295
 80065a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff f881 	bl	80056b4 <USB_EnableGlobalInt>

  return ret;
 80065b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3720      	adds	r7, #32
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80065bc:	b590      	push	{r4, r7, lr}
 80065be:	b089      	sub	sp, #36	; 0x24
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80065c4:	2301      	movs	r3, #1
 80065c6:	2202      	movs	r2, #2
 80065c8:	2102      	movs	r1, #2
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fc66 	bl	8006e9c <USBH_FindInterface>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2bff      	cmp	r3, #255	; 0xff
 80065d8:	d002      	beq.n	80065e0 <USBH_CDC_InterfaceInit+0x24>
 80065da:	7bfb      	ldrb	r3, [r7, #15]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d901      	bls.n	80065e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065e0:	2302      	movs	r3, #2
 80065e2:	e13d      	b.n	8006860 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fc3b 	bl	8006e64 <USBH_SelectInterface>
 80065ee:	4603      	mov	r3, r0
 80065f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80065f8:	2302      	movs	r3, #2
 80065fa:	e131      	b.n	8006860 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006602:	2050      	movs	r0, #80	; 0x50
 8006604:	f002 fad2 	bl	8008bac <malloc>
 8006608:	4603      	mov	r3, r0
 800660a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800661c:	2302      	movs	r3, #2
 800661e:	e11f      	b.n	8006860 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006620:	2250      	movs	r2, #80	; 0x50
 8006622:	2100      	movs	r1, #0
 8006624:	68b8      	ldr	r0, [r7, #8]
 8006626:	f002 fb7d 	bl	8008d24 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	211a      	movs	r1, #26
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	4413      	add	r3, r2
 8006636:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b25b      	sxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	da15      	bge.n	800666e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006642:	7bfb      	ldrb	r3, [r7, #15]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	211a      	movs	r1, #26
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	211a      	movs	r1, #26
 800665e:	fb01 f303 	mul.w	r3, r1, r3
 8006662:	4413      	add	r3, r2
 8006664:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006668:	881a      	ldrh	r2, [r3, #0]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	785b      	ldrb	r3, [r3, #1]
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 ff2e 	bl	80084d6 <USBH_AllocPipe>
 800667a:	4603      	mov	r3, r0
 800667c:	461a      	mov	r2, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	7819      	ldrb	r1, [r3, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	7858      	ldrb	r0, [r3, #1]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	8952      	ldrh	r2, [r2, #10]
 800669a:	9202      	str	r2, [sp, #8]
 800669c:	2203      	movs	r2, #3
 800669e:	9201      	str	r2, [sp, #4]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	4623      	mov	r3, r4
 80066a4:	4602      	mov	r2, r0
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fee6 	bl	8008478 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2200      	movs	r2, #0
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f002 f9f5 	bl	8008aa4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80066ba:	2300      	movs	r3, #0
 80066bc:	2200      	movs	r2, #0
 80066be:	210a      	movs	r1, #10
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fbeb 	bl	8006e9c <USBH_FindInterface>
 80066c6:	4603      	mov	r3, r0
 80066c8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2bff      	cmp	r3, #255	; 0xff
 80066ce:	d002      	beq.n	80066d6 <USBH_CDC_InterfaceInit+0x11a>
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d901      	bls.n	80066da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80066d6:	2302      	movs	r3, #2
 80066d8:	e0c2      	b.n	8006860 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80066da:	7bfb      	ldrb	r3, [r7, #15]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	211a      	movs	r1, #26
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	4413      	add	r3, r2
 80066e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b25b      	sxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da16      	bge.n	8006720 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	211a      	movs	r1, #26
 80066f8:	fb01 f303 	mul.w	r3, r1, r3
 80066fc:	4413      	add	r3, r2
 80066fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	211a      	movs	r1, #26
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	4413      	add	r3, r2
 8006714:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006718:	881a      	ldrh	r2, [r3, #0]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	835a      	strh	r2, [r3, #26]
 800671e:	e015      	b.n	800674c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	211a      	movs	r1, #26
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	4413      	add	r3, r2
 800672c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006730:	781a      	ldrb	r2, [r3, #0]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	211a      	movs	r1, #26
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	4413      	add	r3, r2
 8006742:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006746:	881a      	ldrh	r2, [r3, #0]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800674c:	7bfb      	ldrb	r3, [r7, #15]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	211a      	movs	r1, #26
 8006752:	fb01 f303 	mul.w	r3, r1, r3
 8006756:	4413      	add	r3, r2
 8006758:	f203 3356 	addw	r3, r3, #854	; 0x356
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b25b      	sxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	da16      	bge.n	8006792 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	211a      	movs	r1, #26
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	4413      	add	r3, r2
 8006770:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	211a      	movs	r1, #26
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	4413      	add	r3, r2
 8006786:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800678a:	881a      	ldrh	r2, [r3, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	835a      	strh	r2, [r3, #26]
 8006790:	e015      	b.n	80067be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	211a      	movs	r1, #26
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	4413      	add	r3, r2
 800679e:	f203 3356 	addw	r3, r3, #854	; 0x356
 80067a2:	781a      	ldrb	r2, [r3, #0]
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	211a      	movs	r1, #26
 80067ae:	fb01 f303 	mul.w	r3, r1, r3
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80067b8:	881a      	ldrh	r2, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	7b9b      	ldrb	r3, [r3, #14]
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f001 fe86 	bl	80084d6 <USBH_AllocPipe>
 80067ca:	4603      	mov	r3, r0
 80067cc:	461a      	mov	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	7bdb      	ldrb	r3, [r3, #15]
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 fe7c 	bl	80084d6 <USBH_AllocPipe>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	7b59      	ldrb	r1, [r3, #13]
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	7b98      	ldrb	r0, [r3, #14]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	8b12      	ldrh	r2, [r2, #24]
 80067fe:	9202      	str	r2, [sp, #8]
 8006800:	2202      	movs	r2, #2
 8006802:	9201      	str	r2, [sp, #4]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	4623      	mov	r3, r4
 8006808:	4602      	mov	r2, r0
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 fe34 	bl	8008478 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	7b19      	ldrb	r1, [r3, #12]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	7bd8      	ldrb	r0, [r3, #15]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	8b52      	ldrh	r2, [r2, #26]
 8006828:	9202      	str	r2, [sp, #8]
 800682a:	2202      	movs	r2, #2
 800682c:	9201      	str	r2, [sp, #4]
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	4623      	mov	r3, r4
 8006832:	4602      	mov	r2, r0
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fe1f 	bl	8008478 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	7b5b      	ldrb	r3, [r3, #13]
 8006846:	2200      	movs	r2, #0
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f002 f92a 	bl	8008aa4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	7b1b      	ldrb	r3, [r3, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f002 f923 	bl	8008aa4 <USBH_LL_SetToggle>

  return USBH_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	bd90      	pop	{r4, r7, pc}

08006868 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00e      	beq.n	80068a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f001 fe14 	bl	80084b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fe3f 	bl	8008518 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	7b1b      	ldrb	r3, [r3, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00e      	beq.n	80068c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	7b1b      	ldrb	r3, [r3, #12]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fe01 	bl	80084b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	7b1b      	ldrb	r3, [r3, #12]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 fe2c 	bl	8008518 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	7b5b      	ldrb	r3, [r3, #13]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	7b5b      	ldrb	r3, [r3, #13]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f001 fdee 	bl	80084b6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	7b5b      	ldrb	r3, [r3, #13]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fe19 	bl	8008518 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00b      	beq.n	8006910 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	4618      	mov	r0, r3
 8006902:	f002 f95b 	bl	8008bbc <free>
    phost->pActiveClass->pData = 0U;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690c:	2200      	movs	r2, #0
 800690e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3340      	adds	r3, #64	; 0x40
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f8b1 	bl	8006a9a <GetLineCoding>
 8006938:	4603      	mov	r3, r0
 800693a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800693c:	7afb      	ldrb	r3, [r7, #11]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d105      	bne.n	800694e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006948:	2102      	movs	r1, #2
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800694e:	7afb      	ldrb	r3, [r7, #11]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006978:	2b04      	cmp	r3, #4
 800697a:	d877      	bhi.n	8006a6c <USBH_CDC_Process+0x114>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <USBH_CDC_Process+0x2c>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	08006999 	.word	0x08006999
 8006988:	0800699f 	.word	0x0800699f
 800698c:	080069cf 	.word	0x080069cf
 8006990:	08006a43 	.word	0x08006a43
 8006994:	08006a51 	.word	0x08006a51
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]
      break;
 800699c:	e06d      	b.n	8006a7a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f897 	bl	8006ad8 <SetLineCoding>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80069bc:	e058      	b.n	8006a70 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d055      	beq.n	8006a70 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2204      	movs	r2, #4
 80069c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80069cc:	e050      	b.n	8006a70 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	3340      	adds	r3, #64	; 0x40
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f860 	bl	8006a9a <GetLineCoding>
 80069da:	4603      	mov	r3, r0
 80069dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d126      	bne.n	8006a32 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f6:	791b      	ldrb	r3, [r3, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d13b      	bne.n	8006a74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a06:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d133      	bne.n	8006a74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a16:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d12b      	bne.n	8006a74 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a24:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d124      	bne.n	8006a74 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f958 	bl	8006ce0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006a30:	e020      	b.n	8006a74 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d01d      	beq.n	8006a74 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006a40:	e018      	b.n	8006a74 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 f867 	bl	8006b16 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f8da 	bl	8006c02 <CDC_ProcessReception>
      break;
 8006a4e:	e014      	b.n	8006a7a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006a50:	2100      	movs	r1, #0
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 ffef 	bl	8007a36 <USBH_ClrFeature>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006a6a:	e005      	b.n	8006a78 <USBH_CDC_Process+0x120>

    default:
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e004      	b.n	8006a7a <USBH_CDC_Process+0x122>
      break;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <USBH_CDC_Process+0x122>
      break;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <USBH_CDC_Process+0x122>
      break;
 8006a78:	bf00      	nop

  }

  return status;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	22a1      	movs	r2, #161	; 0xa1
 8006aa8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2221      	movs	r2, #33	; 0x21
 8006aae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2207      	movs	r2, #7
 8006ac0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 fa83 	bl	8007fd4 <USBH_CtlReq>
 8006ace:	4603      	mov	r3, r0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2221      	movs	r2, #33	; 0x21
 8006ae6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2220      	movs	r2, #32
 8006aec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2207      	movs	r2, #7
 8006afe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2207      	movs	r2, #7
 8006b04:	4619      	mov	r1, r3
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 fa64 	bl	8007fd4 <USBH_CtlReq>
 8006b0c:	4603      	mov	r3, r0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}

08006b16 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	b086      	sub	sp, #24
 8006b1a:	af02      	add	r7, sp, #8
 8006b1c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d002      	beq.n	8006b3c <CDC_ProcessTransmission+0x26>
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d023      	beq.n	8006b82 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006b3a:	e05e      	b.n	8006bfa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	8b12      	ldrh	r2, [r2, #24]
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d90b      	bls.n	8006b60 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	69d9      	ldr	r1, [r3, #28]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8b1a      	ldrh	r2, [r3, #24]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	7b5b      	ldrb	r3, [r3, #13]
 8006b54:	2001      	movs	r0, #1
 8006b56:	9000      	str	r0, [sp, #0]
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 fc4a 	bl	80083f2 <USBH_BulkSendData>
 8006b5e:	e00b      	b.n	8006b78 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	7b5b      	ldrb	r3, [r3, #13]
 8006b6e:	2001      	movs	r0, #1
 8006b70:	9000      	str	r0, [sp, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 fc3d 	bl	80083f2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006b80:	e03b      	b.n	8006bfa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	7b5b      	ldrb	r3, [r3, #13]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 ff61 	bl	8008a50 <USBH_LL_GetURBState>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d128      	bne.n	8006bea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	8b12      	ldrh	r2, [r2, #24]
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d90e      	bls.n	8006bc2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	8b12      	ldrh	r2, [r2, #24]
 8006bac:	1a9a      	subs	r2, r3, r2
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	8b12      	ldrh	r2, [r2, #24]
 8006bba:	441a      	add	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	61da      	str	r2, [r3, #28]
 8006bc0:	e002      	b.n	8006bc8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bd8:	e00e      	b.n	8006bf8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f868 	bl	8006cb8 <USBH_CDC_TransmitCallback>
      break;
 8006be8:	e006      	b.n	8006bf8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d103      	bne.n	8006bf8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006bf8:	bf00      	nop
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b086      	sub	sp, #24
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d002      	beq.n	8006c28 <CDC_ProcessReception+0x26>
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d00e      	beq.n	8006c44 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006c26:	e043      	b.n	8006cb0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	6a19      	ldr	r1, [r3, #32]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	8b5a      	ldrh	r2, [r3, #26]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	7b1b      	ldrb	r3, [r3, #12]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fc01 	bl	800843c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c42:	e035      	b.n	8006cb0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	7b1b      	ldrb	r3, [r3, #12]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 ff00 	bl	8008a50 <USBH_LL_GetURBState>
 8006c50:	4603      	mov	r3, r0
 8006c52:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006c54:	7cfb      	ldrb	r3, [r7, #19]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d129      	bne.n	8006cae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	7b1b      	ldrb	r3, [r3, #12]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 fe63 	bl	800892c <USBH_LL_GetLastXferSize>
 8006c66:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d016      	beq.n	8006ca0 <CDC_ProcessReception+0x9e>
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	8b5b      	ldrh	r3, [r3, #26]
 8006c76:	461a      	mov	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d910      	bls.n	8006ca0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	1ad2      	subs	r2, r2, r3
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6a1a      	ldr	r2, [r3, #32]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	441a      	add	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2203      	movs	r2, #3
 8006c9a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006c9e:	e006      	b.n	8006cae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f80f 	bl	8006ccc <USBH_CDC_ReceiveCallback>
      break;
 8006cae:	bf00      	nop
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e029      	b.n	8006d60 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	79fa      	ldrb	r2, [r7, #7]
 8006d10:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f81f 	bl	8006d68 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f001 fd33 	bl	80087c4 <USBH_LL_Init>

  return USBH_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e009      	b.n	8006d8e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	33e0      	adds	r3, #224	; 0xe0
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	2200      	movs	r2, #0
 8006d86:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3301      	adds	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b0f      	cmp	r3, #15
 8006d92:	d9f2      	bls.n	8006d7a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	e009      	b.n	8006dae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006da4:	2200      	movs	r2, #0
 8006da6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3301      	adds	r3, #1
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db4:	d3f1      	bcc.n	8006d9a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2240      	movs	r2, #64	; 0x40
 8006dda:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d016      	beq.n	8006e52 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10e      	bne.n	8006e4c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e34:	1c59      	adds	r1, r3, #1
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	33de      	adds	r3, #222	; 0xde
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
 8006e4a:	e004      	b.n	8006e56 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e001      	b.n	8006e56 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e52:	2302      	movs	r3, #2
 8006e54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d204      	bcs.n	8006e8a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	78fa      	ldrb	r2, [r7, #3]
 8006e84:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006e88:	e001      	b.n	8006e8e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	70fb      	strb	r3, [r7, #3]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70bb      	strb	r3, [r7, #2]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006ec4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ec6:	e025      	b.n	8006f14 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	221a      	movs	r2, #26
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	3308      	adds	r3, #8
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	795b      	ldrb	r3, [r3, #5]
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d002      	beq.n	8006eea <USBH_FindInterface+0x4e>
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	2bff      	cmp	r3, #255	; 0xff
 8006ee8:	d111      	bne.n	8006f0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006eee:	78ba      	ldrb	r2, [r7, #2]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d002      	beq.n	8006efa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ef4:	78bb      	ldrb	r3, [r7, #2]
 8006ef6:	2bff      	cmp	r3, #255	; 0xff
 8006ef8:	d109      	bne.n	8006f0e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006efe:	787a      	ldrb	r2, [r7, #1]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d002      	beq.n	8006f0a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f04:	787b      	ldrb	r3, [r7, #1]
 8006f06:	2bff      	cmp	r3, #255	; 0xff
 8006f08:	d101      	bne.n	8006f0e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	e006      	b.n	8006f1c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	3301      	adds	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d9d6      	bls.n	8006ec8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f1a:	23ff      	movs	r3, #255	; 0xff
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 fc83 	bl	800883c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f36:	2101      	movs	r1, #1
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f001 fd9c 	bl	8008a76 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af04      	add	r7, sp, #16
 8006f4e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f50:	2302      	movs	r3, #2
 8006f52:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d102      	bne.n	8006f6a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2203      	movs	r2, #3
 8006f68:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b0b      	cmp	r3, #11
 8006f72:	f200 81be 	bhi.w	80072f2 <USBH_Process+0x3aa>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <USBH_Process+0x34>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fad 	.word	0x08006fad
 8006f80:	08006fdf 	.word	0x08006fdf
 8006f84:	08007047 	.word	0x08007047
 8006f88:	0800728d 	.word	0x0800728d
 8006f8c:	080072f3 	.word	0x080072f3
 8006f90:	080070eb 	.word	0x080070eb
 8006f94:	08007233 	.word	0x08007233
 8006f98:	08007121 	.word	0x08007121
 8006f9c:	08007141 	.word	0x08007141
 8006fa0:	08007161 	.word	0x08007161
 8006fa4:	080071a5 	.word	0x080071a5
 8006fa8:	08007275 	.word	0x08007275
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 819e 	beq.w	80072f6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006fc0:	20c8      	movs	r0, #200	; 0xc8
 8006fc2:	f001 fd9f 	bl	8008b04 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 fc95 	bl	80088f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006fdc:	e18b      	b.n	80072f6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d107      	bne.n	8006ff8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ff6:	e18d      	b.n	8007314 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007002:	d914      	bls.n	800702e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800700a:	3301      	adds	r3, #1
 800700c:	b2da      	uxtb	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800701a:	2b03      	cmp	r3, #3
 800701c:	d903      	bls.n	8007026 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	220d      	movs	r2, #13
 8007022:	701a      	strb	r2, [r3, #0]
      break;
 8007024:	e176      	b.n	8007314 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
      break;
 800702c:	e172      	b.n	8007314 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007034:	f103 020a 	add.w	r2, r3, #10
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800703e:	200a      	movs	r0, #10
 8007040:	f001 fd60 	bl	8008b04 <USBH_Delay>
      break;
 8007044:	e166      	b.n	8007314 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007056:	2104      	movs	r1, #4
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800705c:	2064      	movs	r0, #100	; 0x64
 800705e:	f001 fd51 	bl	8008b04 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 fc20 	bl	80088a8 <USBH_LL_GetSpeed>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2205      	movs	r2, #5
 8007076:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007078:	2100      	movs	r1, #0
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fa2b 	bl	80084d6 <USBH_AllocPipe>
 8007080:	4603      	mov	r3, r0
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007088:	2180      	movs	r1, #128	; 0x80
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 fa23 	bl	80084d6 <USBH_AllocPipe>
 8007090:	4603      	mov	r3, r0
 8007092:	461a      	mov	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7919      	ldrb	r1, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80070ac:	b292      	uxth	r2, r2
 80070ae:	9202      	str	r2, [sp, #8]
 80070b0:	2200      	movs	r2, #0
 80070b2:	9201      	str	r2, [sp, #4]
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	4603      	mov	r3, r0
 80070b8:	2280      	movs	r2, #128	; 0x80
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 f9dc 	bl	8008478 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7959      	ldrb	r1, [r3, #5]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80070d4:	b292      	uxth	r2, r2
 80070d6:	9202      	str	r2, [sp, #8]
 80070d8:	2200      	movs	r2, #0
 80070da:	9201      	str	r2, [sp, #4]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	4603      	mov	r3, r0
 80070e0:	2200      	movs	r2, #0
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 f9c8 	bl	8008478 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070e8:	e114      	b.n	8007314 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f918 	bl	8007320 <USBH_HandleEnum>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f040 80fe 	bne.w	80072fa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800710c:	2b01      	cmp	r3, #1
 800710e:	d103      	bne.n	8007118 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2208      	movs	r2, #8
 8007114:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007116:	e0f0      	b.n	80072fa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2207      	movs	r2, #7
 800711c:	701a      	strb	r2, [r3, #0]
      break;
 800711e:	e0ec      	b.n	80072fa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80e9 	beq.w	80072fe <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007132:	2101      	movs	r1, #1
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2208      	movs	r2, #8
 800713c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800713e:	e0de      	b.n	80072fe <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007146:	b29b      	uxth	r3, r3
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fc2c 	bl	80079a8 <USBH_SetCfg>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	f040 80d5 	bne.w	8007302 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2209      	movs	r2, #9
 800715c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800715e:	e0d0      	b.n	8007302 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d016      	beq.n	800719c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800716e:	2101      	movs	r1, #1
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc3c 	bl	80079ee <USBH_SetFeature>
 8007176:	4603      	mov	r3, r0
 8007178:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	220a      	movs	r2, #10
 8007186:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007188:	e0bd      	b.n	8007306 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b03      	cmp	r3, #3
 8007190:	f040 80b9 	bne.w	8007306 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	220a      	movs	r2, #10
 8007198:	701a      	strb	r2, [r3, #0]
      break;
 800719a:	e0b4      	b.n	8007306 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	220a      	movs	r2, #10
 80071a0:	701a      	strb	r2, [r3, #0]
      break;
 80071a2:	e0b0      	b.n	8007306 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 80ad 	beq.w	800730a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
 80071bc:	e016      	b.n	80071ec <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80071be:	7bfa      	ldrb	r2, [r7, #15]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	32de      	adds	r2, #222	; 0xde
 80071c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c8:	791a      	ldrb	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d108      	bne.n	80071e6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80071d4:	7bfa      	ldrb	r2, [r7, #15]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32de      	adds	r2, #222	; 0xde
 80071da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80071e4:	e005      	b.n	80071f2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
 80071e8:	3301      	adds	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0e5      	beq.n	80071be <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d016      	beq.n	800722a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d109      	bne.n	8007222 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2206      	movs	r2, #6
 8007212:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800721a:	2103      	movs	r1, #3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007220:	e073      	b.n	800730a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	220d      	movs	r2, #13
 8007226:	701a      	strb	r2, [r3, #0]
      break;
 8007228:	e06f      	b.n	800730a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	220d      	movs	r2, #13
 800722e:	701a      	strb	r2, [r3, #0]
      break;
 8007230:	e06b      	b.n	800730a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007238:	2b00      	cmp	r3, #0
 800723a:	d017      	beq.n	800726c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	4798      	blx	r3
 8007248:	4603      	mov	r3, r0
 800724a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d103      	bne.n	800725c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	220b      	movs	r2, #11
 8007258:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800725a:	e058      	b.n	800730e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d154      	bne.n	800730e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	220d      	movs	r2, #13
 8007268:	701a      	strb	r2, [r3, #0]
      break;
 800726a:	e050      	b.n	800730e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	220d      	movs	r2, #13
 8007270:	701a      	strb	r2, [r3, #0]
      break;
 8007272:	e04c      	b.n	800730e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d049      	beq.n	8007312 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
      }
      break;
 800728a:	e042      	b.n	8007312 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff fd67 	bl	8006d68 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d009      	beq.n	80072b8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072c8:	2105      	movs	r1, #5
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d107      	bne.n	80072ea <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fe20 	bl	8006f28 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072e8:	e014      	b.n	8007314 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 faa6 	bl	800883c <USBH_LL_Start>
      break;
 80072f0:	e010      	b.n	8007314 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80072f2:	bf00      	nop
 80072f4:	e00e      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 80072f6:	bf00      	nop
 80072f8:	e00c      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 80072fa:	bf00      	nop
 80072fc:	e00a      	b.n	8007314 <USBH_Process+0x3cc>
    break;
 80072fe:	bf00      	nop
 8007300:	e008      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 8007302:	bf00      	nop
 8007304:	e006      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 8007306:	bf00      	nop
 8007308:	e004      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 800730a:	bf00      	nop
 800730c:	e002      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <USBH_Process+0x3cc>
      break;
 8007312:	bf00      	nop
  }
  return USBH_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop

08007320 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af04      	add	r7, sp, #16
 8007326:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800732c:	2301      	movs	r3, #1
 800732e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	785b      	ldrb	r3, [r3, #1]
 8007334:	2b07      	cmp	r3, #7
 8007336:	f200 81c1 	bhi.w	80076bc <USBH_HandleEnum+0x39c>
 800733a:	a201      	add	r2, pc, #4	; (adr r2, 8007340 <USBH_HandleEnum+0x20>)
 800733c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007340:	08007361 	.word	0x08007361
 8007344:	0800741f 	.word	0x0800741f
 8007348:	08007489 	.word	0x08007489
 800734c:	08007517 	.word	0x08007517
 8007350:	08007581 	.word	0x08007581
 8007354:	080075f1 	.word	0x080075f1
 8007358:	08007637 	.word	0x08007637
 800735c:	0800767d 	.word	0x0800767d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007360:	2108      	movs	r1, #8
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa50 	bl	8007808 <USBH_Get_DevDesc>
 8007368:	4603      	mov	r3, r0
 800736a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d130      	bne.n	80073d4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	7919      	ldrb	r1, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007396:	b292      	uxth	r2, r2
 8007398:	9202      	str	r2, [sp, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	9201      	str	r2, [sp, #4]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	4603      	mov	r3, r0
 80073a2:	2280      	movs	r2, #128	; 0x80
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 f867 	bl	8008478 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7959      	ldrb	r1, [r3, #5]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80073be:	b292      	uxth	r2, r2
 80073c0:	9202      	str	r2, [sp, #8]
 80073c2:	2200      	movs	r2, #0
 80073c4:	9201      	str	r2, [sp, #4]
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	4603      	mov	r3, r0
 80073ca:	2200      	movs	r2, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 f853 	bl	8008478 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80073d2:	e175      	b.n	80076c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	f040 8172 	bne.w	80076c0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073e2:	3301      	adds	r3, #1
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d903      	bls.n	80073fe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	220d      	movs	r2, #13
 80073fa:	701a      	strb	r2, [r3, #0]
      break;
 80073fc:	e160      	b.n	80076c0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	795b      	ldrb	r3, [r3, #5]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 f887 	bl	8008518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	791b      	ldrb	r3, [r3, #4]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 f881 	bl	8008518 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
      break;
 800741c:	e150      	b.n	80076c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800741e:	2112      	movs	r1, #18
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f9f1 	bl	8007808 <USBH_Get_DevDesc>
 8007426:	4603      	mov	r3, r0
 8007428:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d103      	bne.n	8007438 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007436:	e145      	b.n	80076c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b03      	cmp	r3, #3
 800743c:	f040 8142 	bne.w	80076c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007446:	3301      	adds	r3, #1
 8007448:	b2da      	uxtb	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007456:	2b03      	cmp	r3, #3
 8007458:	d903      	bls.n	8007462 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	220d      	movs	r2, #13
 800745e:	701a      	strb	r2, [r3, #0]
      break;
 8007460:	e130      	b.n	80076c4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	795b      	ldrb	r3, [r3, #5]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 f855 	bl	8008518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	791b      	ldrb	r3, [r3, #4]
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f001 f84f 	bl	8008518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
      break;
 8007486:	e11d      	b.n	80076c4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007488:	2101      	movs	r1, #1
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa68 	bl	8007960 <USBH_SetAddress>
 8007490:	4603      	mov	r3, r0
 8007492:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d132      	bne.n	8007500 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800749a:	2002      	movs	r0, #2
 800749c:	f001 fb32 	bl	8008b04 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2203      	movs	r2, #3
 80074ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	7919      	ldrb	r1, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80074c2:	b292      	uxth	r2, r2
 80074c4:	9202      	str	r2, [sp, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	9201      	str	r2, [sp, #4]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	4603      	mov	r3, r0
 80074ce:	2280      	movs	r2, #128	; 0x80
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 ffd1 	bl	8008478 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7959      	ldrb	r1, [r3, #5]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074ea:	b292      	uxth	r2, r2
 80074ec:	9202      	str	r2, [sp, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	9201      	str	r2, [sp, #4]
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	4603      	mov	r3, r0
 80074f6:	2200      	movs	r2, #0
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 ffbd 	bl	8008478 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80074fe:	e0e3      	b.n	80076c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007500:	7bbb      	ldrb	r3, [r7, #14]
 8007502:	2b03      	cmp	r3, #3
 8007504:	f040 80e0 	bne.w	80076c8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	220d      	movs	r2, #13
 800750c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	705a      	strb	r2, [r3, #1]
      break;
 8007514:	e0d8      	b.n	80076c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007516:	2109      	movs	r1, #9
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f99d 	bl	8007858 <USBH_Get_CfgDesc>
 800751e:	4603      	mov	r3, r0
 8007520:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2204      	movs	r2, #4
 800752c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800752e:	e0cd      	b.n	80076cc <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	2b03      	cmp	r3, #3
 8007534:	f040 80ca 	bne.w	80076cc <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800753e:	3301      	adds	r3, #1
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800754e:	2b03      	cmp	r3, #3
 8007550:	d903      	bls.n	800755a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	220d      	movs	r2, #13
 8007556:	701a      	strb	r2, [r3, #0]
      break;
 8007558:	e0b8      	b.n	80076cc <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	795b      	ldrb	r3, [r3, #5]
 800755e:	4619      	mov	r1, r3
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 ffd9 	bl	8008518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	791b      	ldrb	r3, [r3, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 ffd3 	bl	8008518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
      break;
 800757e:	e0a5      	b.n	80076cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f965 	bl	8007858 <USBH_Get_CfgDesc>
 800758e:	4603      	mov	r3, r0
 8007590:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d103      	bne.n	80075a0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2205      	movs	r2, #5
 800759c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800759e:	e097      	b.n	80076d0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	f040 8094 	bne.w	80076d0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075ae:	3301      	adds	r3, #1
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d903      	bls.n	80075ca <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	220d      	movs	r2, #13
 80075c6:	701a      	strb	r2, [r3, #0]
      break;
 80075c8:	e082      	b.n	80076d0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	795b      	ldrb	r3, [r3, #5]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 ffa1 	bl	8008518 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	791b      	ldrb	r3, [r3, #4]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 ff9b 	bl	8008518 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	701a      	strb	r2, [r3, #0]
      break;
 80075ee:	e06f      	b.n	80076d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d019      	beq.n	800762e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007606:	23ff      	movs	r3, #255	; 0xff
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f949 	bl	80078a0 <USBH_Get_StringDesc>
 800760e:	4603      	mov	r3, r0
 8007610:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007612:	7bbb      	ldrb	r3, [r7, #14]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d103      	bne.n	8007620 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2206      	movs	r2, #6
 800761c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800761e:	e059      	b.n	80076d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	2b03      	cmp	r3, #3
 8007624:	d156      	bne.n	80076d4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2206      	movs	r2, #6
 800762a:	705a      	strb	r2, [r3, #1]
      break;
 800762c:	e052      	b.n	80076d4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2206      	movs	r2, #6
 8007632:	705a      	strb	r2, [r3, #1]
      break;
 8007634:	e04e      	b.n	80076d4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800763c:	2b00      	cmp	r3, #0
 800763e:	d019      	beq.n	8007674 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800764c:	23ff      	movs	r3, #255	; 0xff
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f926 	bl	80078a0 <USBH_Get_StringDesc>
 8007654:	4603      	mov	r3, r0
 8007656:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d103      	bne.n	8007666 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2207      	movs	r2, #7
 8007662:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007664:	e038      	b.n	80076d8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	2b03      	cmp	r3, #3
 800766a:	d135      	bne.n	80076d8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2207      	movs	r2, #7
 8007670:	705a      	strb	r2, [r3, #1]
      break;
 8007672:	e031      	b.n	80076d8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2207      	movs	r2, #7
 8007678:	705a      	strb	r2, [r3, #1]
      break;
 800767a:	e02d      	b.n	80076d8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007682:	2b00      	cmp	r3, #0
 8007684:	d017      	beq.n	80076b6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007692:	23ff      	movs	r3, #255	; 0xff
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f903 	bl	80078a0 <USBH_Get_StringDesc>
 800769a:	4603      	mov	r3, r0
 800769c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d102      	bne.n	80076aa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80076a8:	e018      	b.n	80076dc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d115      	bne.n	80076dc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73fb      	strb	r3, [r7, #15]
      break;
 80076b4:	e012      	b.n	80076dc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73fb      	strb	r3, [r7, #15]
      break;
 80076ba:	e00f      	b.n	80076dc <USBH_HandleEnum+0x3bc>

    default:
      break;
 80076bc:	bf00      	nop
 80076be:	e00e      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076c0:	bf00      	nop
 80076c2:	e00c      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076c4:	bf00      	nop
 80076c6:	e00a      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076c8:	bf00      	nop
 80076ca:	e008      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076cc:	bf00      	nop
 80076ce:	e006      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076d0:	bf00      	nop
 80076d2:	e004      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076d4:	bf00      	nop
 80076d6:	e002      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <USBH_HandleEnum+0x3be>
      break;
 80076dc:	bf00      	nop
  }
  return Status;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f804 	bl	800772a <USBH_HandleSof>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b0b      	cmp	r3, #11
 800773a:	d10a      	bne.n	8007752 <USBH_HandleSof+0x28>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
  }
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800776a:	bf00      	nop
}
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007786:	bf00      	nop
}
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f001 f846 	bl	8008872 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	791b      	ldrb	r3, [r3, #4]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fe93 	bl	8008518 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	795b      	ldrb	r3, [r3, #5]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fe8d 	bl	8008518 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af02      	add	r7, sp, #8
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	b29b      	uxth	r3, r3
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f864 	bl	80078f6 <USBH_GetDescriptor>
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007844:	78fa      	ldrb	r2, [r7, #3]
 8007846:	b292      	uxth	r2, r2
 8007848:	4619      	mov	r1, r3
 800784a:	f000 f919 	bl	8007a80 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800784e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af02      	add	r7, sp, #8
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	331c      	adds	r3, #28
 8007868:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800786a:	887b      	ldrh	r3, [r7, #2]
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f83d 	bl	80078f6 <USBH_GetDescriptor>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d107      	bne.n	8007896 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007886:	887b      	ldrh	r3, [r7, #2]
 8007888:	461a      	mov	r2, r3
 800788a:	68b9      	ldr	r1, [r7, #8]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f989 	bl	8007ba4 <USBH_ParseCfgDesc>
 8007892:	4603      	mov	r3, r0
 8007894:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	607a      	str	r2, [r7, #4]
 80078aa:	461a      	mov	r2, r3
 80078ac:	460b      	mov	r3, r1
 80078ae:	72fb      	strb	r3, [r7, #11]
 80078b0:	4613      	mov	r3, r2
 80078b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80078bc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80078c4:	893b      	ldrh	r3, [r7, #8]
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	460b      	mov	r3, r1
 80078ca:	2100      	movs	r1, #0
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f812 	bl	80078f6 <USBH_GetDescriptor>
 80078d2:	4603      	mov	r3, r0
 80078d4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d107      	bne.n	80078ec <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078e2:	893a      	ldrh	r2, [r7, #8]
 80078e4:	6879      	ldr	r1, [r7, #4]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fb26 	bl	8007f38 <USBH_ParseStringDesc>
  }

  return status;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b084      	sub	sp, #16
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	607b      	str	r3, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	72fb      	strb	r3, [r7, #11]
 8007904:	4613      	mov	r3, r2
 8007906:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	789b      	ldrb	r3, [r3, #2]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d11c      	bne.n	800794a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007916:	b2da      	uxtb	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2206      	movs	r2, #6
 8007920:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	893a      	ldrh	r2, [r7, #8]
 8007926:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007928:	893b      	ldrh	r3, [r7, #8]
 800792a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800792e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007932:	d104      	bne.n	800793e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f240 4209 	movw	r2, #1033	; 0x409
 800793a:	829a      	strh	r2, [r3, #20]
 800793c:	e002      	b.n	8007944 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8b3a      	ldrh	r2, [r7, #24]
 8007948:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800794a:	8b3b      	ldrh	r3, [r7, #24]
 800794c:	461a      	mov	r2, r3
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fb3f 	bl	8007fd4 <USBH_CtlReq>
 8007956:	4603      	mov	r3, r0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	789b      	ldrb	r3, [r3, #2]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d10f      	bne.n	8007994 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2205      	movs	r2, #5
 800797e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007980:	78fb      	ldrb	r3, [r7, #3]
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007994:	2200      	movs	r2, #0
 8007996:	2100      	movs	r1, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fb1b 	bl	8007fd4 <USBH_CtlReq>
 800799e:	4603      	mov	r3, r0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	789b      	ldrb	r3, [r3, #2]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d10e      	bne.n	80079da <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2209      	movs	r2, #9
 80079c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	887a      	ldrh	r2, [r7, #2]
 80079cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079da:	2200      	movs	r2, #0
 80079dc:	2100      	movs	r1, #0
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 faf8 	bl	8007fd4 <USBH_CtlReq>
 80079e4:	4603      	mov	r3, r0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	789b      	ldrb	r3, [r3, #2]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d10f      	bne.n	8007a22 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2203      	movs	r2, #3
 8007a0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007a22:	2200      	movs	r2, #0
 8007a24:	2100      	movs	r1, #0
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fad4 	bl	8007fd4 <USBH_CtlReq>
 8007a2c:	4603      	mov	r3, r0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	460b      	mov	r3, r1
 8007a40:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	789b      	ldrb	r3, [r3, #2]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d10f      	bne.n	8007a6a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fab0 	bl	8007fd4 <USBH_CtlReq>
 8007a74:	4603      	mov	r3, r0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	785a      	ldrb	r2, [r3, #1]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3302      	adds	r3, #2
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	3303      	adds	r3, #3
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	791a      	ldrb	r2, [r3, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	795a      	ldrb	r2, [r3, #5]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	799a      	ldrb	r2, [r3, #6]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	79da      	ldrb	r2, [r3, #7]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	79db      	ldrb	r3, [r3, #7]
 8007ade:	2b20      	cmp	r3, #32
 8007ae0:	dc0f      	bgt.n	8007b02 <USBH_ParseDevDesc+0x82>
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	db14      	blt.n	8007b10 <USBH_ParseDevDesc+0x90>
 8007ae6:	3b08      	subs	r3, #8
 8007ae8:	4a2d      	ldr	r2, [pc, #180]	; (8007ba0 <USBH_ParseDevDesc+0x120>)
 8007aea:	fa22 f303 	lsr.w	r3, r2, r3
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	bf14      	ite	ne
 8007af6:	2301      	movne	r3, #1
 8007af8:	2300      	moveq	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <USBH_ParseDevDesc+0x86>
 8007b00:	e006      	b.n	8007b10 <USBH_ParseDevDesc+0x90>
 8007b02:	2b40      	cmp	r3, #64	; 0x40
 8007b04:	d104      	bne.n	8007b10 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	79da      	ldrb	r2, [r3, #7]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	71da      	strb	r2, [r3, #7]
      break;
 8007b0e:	e003      	b.n	8007b18 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2240      	movs	r2, #64	; 0x40
 8007b14:	71da      	strb	r2, [r3, #7]
      break;
 8007b16:	bf00      	nop
  }

  if (length > 8U)
 8007b18:	88fb      	ldrh	r3, [r7, #6]
 8007b1a:	2b08      	cmp	r3, #8
 8007b1c:	d939      	bls.n	8007b92 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	3308      	adds	r3, #8
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	3309      	adds	r3, #9
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	4313      	orrs	r3, r2
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	330a      	adds	r3, #10
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	330b      	adds	r3, #11
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	330d      	adds	r3, #13
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	7b9a      	ldrb	r2, [r3, #14]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	7bda      	ldrb	r2, [r3, #15]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	7c1a      	ldrb	r2, [r3, #16]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	7c5a      	ldrb	r2, [r3, #17]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	745a      	strb	r2, [r3, #17]
  }
}
 8007b92:	bf00      	nop
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	01000101 	.word	0x01000101

08007ba4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08c      	sub	sp, #48	; 0x30
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007bb8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	781a      	ldrb	r2, [r3, #0]
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	785a      	ldrb	r2, [r3, #1]
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	3302      	adds	r3, #2
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	3303      	adds	r3, #3
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c00:	bf28      	it	cs
 8007c02:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007c06:	b29a      	uxth	r2, r3
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	791a      	ldrb	r2, [r3, #4]
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	795a      	ldrb	r2, [r3, #5]
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	799a      	ldrb	r2, [r3, #6]
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	79da      	ldrb	r2, [r3, #7]
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	7a1a      	ldrb	r2, [r3, #8]
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b09      	cmp	r3, #9
 8007c3a:	d002      	beq.n	8007c42 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	2209      	movs	r2, #9
 8007c40:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	f240 809d 	bls.w	8007d84 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c4a:	2309      	movs	r3, #9
 8007c4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c52:	e081      	b.n	8007d58 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c54:	f107 0316 	add.w	r3, r7, #22
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5c:	f000 f99f 	bl	8007f9e <USBH_GetNextDesc>
 8007c60:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d176      	bne.n	8007d58 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d002      	beq.n	8007c78 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	2209      	movs	r2, #9
 8007c76:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c7c:	221a      	movs	r2, #26
 8007c7e:	fb02 f303 	mul.w	r3, r2, r3
 8007c82:	3308      	adds	r3, #8
 8007c84:	6a3a      	ldr	r2, [r7, #32]
 8007c86:	4413      	add	r3, r2
 8007c88:	3302      	adds	r3, #2
 8007c8a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c8e:	69f8      	ldr	r0, [r7, #28]
 8007c90:	f000 f87e 	bl	8007d90 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c9e:	e043      	b.n	8007d28 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ca0:	f107 0316 	add.w	r3, r7, #22
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca8:	f000 f979 	bl	8007f9e <USBH_GetNextDesc>
 8007cac:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d138      	bne.n	8007d28 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	795b      	ldrb	r3, [r3, #5]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d10f      	bne.n	8007cde <USBH_ParseCfgDesc+0x13a>
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	799b      	ldrb	r3, [r3, #6]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d10b      	bne.n	8007cde <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	79db      	ldrb	r3, [r3, #7]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10f      	bne.n	8007cee <USBH_ParseCfgDesc+0x14a>
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b09      	cmp	r3, #9
 8007cd4:	d00b      	beq.n	8007cee <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	2209      	movs	r2, #9
 8007cda:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cdc:	e007      	b.n	8007cee <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b07      	cmp	r3, #7
 8007ce4:	d004      	beq.n	8007cf0 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	2207      	movs	r2, #7
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e000      	b.n	8007cf0 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007cee:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cf4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007cf8:	3201      	adds	r2, #1
 8007cfa:	00d2      	lsls	r2, r2, #3
 8007cfc:	211a      	movs	r1, #26
 8007cfe:	fb01 f303 	mul.w	r3, r1, r3
 8007d02:	4413      	add	r3, r2
 8007d04:	3308      	adds	r3, #8
 8007d06:	6a3a      	ldr	r2, [r7, #32]
 8007d08:	4413      	add	r3, r2
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007d0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d10:	69b9      	ldr	r1, [r7, #24]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f86b 	bl	8007dee <USBH_ParseEPDesc>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d22:	3301      	adds	r3, #1
 8007d24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	791b      	ldrb	r3, [r3, #4]
 8007d2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d204      	bcs.n	8007d3e <USBH_ParseCfgDesc+0x19a>
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	885a      	ldrh	r2, [r3, #2]
 8007d38:	8afb      	ldrh	r3, [r7, #22]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d8b0      	bhi.n	8007ca0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	791b      	ldrb	r3, [r3, #4]
 8007d42:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d201      	bcs.n	8007d4e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e01c      	b.n	8007d88 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d52:	3301      	adds	r3, #1
 8007d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d805      	bhi.n	8007d6c <USBH_ParseCfgDesc+0x1c8>
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	885a      	ldrh	r2, [r3, #2]
 8007d64:	8afb      	ldrh	r3, [r7, #22]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	f63f af74 	bhi.w	8007c54 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	791b      	ldrb	r3, [r3, #4]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	bf28      	it	cs
 8007d74:	2302      	movcs	r3, #2
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d201      	bcs.n	8007d84 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e001      	b.n	8007d88 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3730      	adds	r7, #48	; 0x30
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781a      	ldrb	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	785a      	ldrb	r2, [r3, #1]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	789a      	ldrb	r2, [r3, #2]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	78da      	ldrb	r2, [r3, #3]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	791a      	ldrb	r2, [r3, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	795a      	ldrb	r2, [r3, #5]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	799a      	ldrb	r2, [r3, #6]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	79da      	ldrb	r2, [r3, #7]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	7a1a      	ldrb	r2, [r3, #8]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	721a      	strb	r2, [r3, #8]
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b087      	sub	sp, #28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	60f8      	str	r0, [r7, #12]
 8007df6:	60b9      	str	r1, [r7, #8]
 8007df8:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	781a      	ldrb	r2, [r3, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	785a      	ldrb	r2, [r3, #1]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	789a      	ldrb	r2, [r3, #2]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	78da      	ldrb	r2, [r3, #3]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3304      	adds	r3, #4
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3305      	adds	r3, #5
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	4313      	orrs	r3, r2
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	799a      	ldrb	r2, [r3, #6]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	889b      	ldrh	r3, [r3, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	75fb      	strb	r3, [r7, #23]
 8007e4e:	e033      	b.n	8007eb8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	889b      	ldrh	r3, [r3, #4]
 8007e54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e58:	f023 0307 	bic.w	r3, r3, #7
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	889b      	ldrh	r3, [r3, #4]
 8007e66:	b21a      	sxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	b299      	uxth	r1, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3305      	adds	r3, #5
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d110      	bne.n	8007eaa <USBH_ParseEPDesc+0xbc>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b299      	uxth	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3305      	adds	r3, #5
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	b21b      	sxth	r3, r3
 8007ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ea6:	b21b      	sxth	r3, r3
 8007ea8:	e001      	b.n	8007eae <USBH_ParseEPDesc+0xc0>
 8007eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	b21b      	sxth	r3, r3
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d116      	bne.n	8007ef0 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	78db      	ldrb	r3, [r3, #3]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d005      	beq.n	8007eda <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d127      	bne.n	8007f2a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	799b      	ldrb	r3, [r3, #6]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <USBH_ParseEPDesc+0xfc>
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	799b      	ldrb	r3, [r3, #6]
 8007ee6:	2b10      	cmp	r3, #16
 8007ee8:	d91f      	bls.n	8007f2a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007eea:	2303      	movs	r3, #3
 8007eec:	75fb      	strb	r3, [r7, #23]
 8007eee:	e01c      	b.n	8007f2a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	78db      	ldrb	r3, [r3, #3]
 8007ef4:	f003 0303 	and.w	r3, r3, #3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d10a      	bne.n	8007f12 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	799b      	ldrb	r3, [r3, #6]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d003      	beq.n	8007f0c <USBH_ParseEPDesc+0x11e>
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	799b      	ldrb	r3, [r3, #6]
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d90e      	bls.n	8007f2a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	75fb      	strb	r3, [r7, #23]
 8007f10:	e00b      	b.n	8007f2a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	78db      	ldrb	r3, [r3, #3]
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d105      	bne.n	8007f2a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	799b      	ldrb	r3, [r3, #6]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007f26:	2303      	movs	r3, #3
 8007f28:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d120      	bne.n	8007f92 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	1e9a      	subs	r2, r3, #2
 8007f56:	88fb      	ldrh	r3, [r7, #6]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	bf28      	it	cs
 8007f5c:	4613      	movcs	r3, r2
 8007f5e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	3302      	adds	r3, #2
 8007f64:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007f66:	2300      	movs	r3, #0
 8007f68:	82fb      	strh	r3, [r7, #22]
 8007f6a:	e00b      	b.n	8007f84 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007f6c:	8afb      	ldrh	r3, [r7, #22]
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	781a      	ldrb	r2, [r3, #0]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007f7e:	8afb      	ldrh	r3, [r7, #22]
 8007f80:	3302      	adds	r3, #2
 8007f82:	82fb      	strh	r3, [r7, #22]
 8007f84:	8afa      	ldrh	r2, [r7, #22]
 8007f86:	8abb      	ldrh	r3, [r7, #20]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d3ef      	bcc.n	8007f6c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
  }
}
 8007f92:	bf00      	nop
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
 8007fa6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	881a      	ldrh	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b086      	sub	sp, #24
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	789b      	ldrb	r3, [r3, #2]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d002      	beq.n	8007ff4 <USBH_CtlReq+0x20>
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d00f      	beq.n	8008012 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ff2:	e027      	b.n	8008044 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2202      	movs	r2, #2
 800800a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800800c:	2301      	movs	r3, #1
 800800e:	75fb      	strb	r3, [r7, #23]
      break;
 8008010:	e018      	b.n	8008044 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f81c 	bl	8008050 <USBH_HandleControl>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800801c:	7dfb      	ldrb	r3, [r7, #23]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <USBH_CtlReq+0x54>
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	2b03      	cmp	r3, #3
 8008026:	d106      	bne.n	8008036 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2201      	movs	r2, #1
 800802c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	761a      	strb	r2, [r3, #24]
      break;
 8008034:	e005      	b.n	8008042 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	2b02      	cmp	r3, #2
 800803a:	d102      	bne.n	8008042 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2201      	movs	r2, #1
 8008040:	709a      	strb	r2, [r3, #2]
      break;
 8008042:	bf00      	nop
  }
  return status;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af02      	add	r7, sp, #8
 8008056:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008058:	2301      	movs	r3, #1
 800805a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800805c:	2300      	movs	r3, #0
 800805e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	7e1b      	ldrb	r3, [r3, #24]
 8008064:	3b01      	subs	r3, #1
 8008066:	2b0a      	cmp	r3, #10
 8008068:	f200 8156 	bhi.w	8008318 <USBH_HandleControl+0x2c8>
 800806c:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <USBH_HandleControl+0x24>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	080080a1 	.word	0x080080a1
 8008078:	080080bb 	.word	0x080080bb
 800807c:	08008125 	.word	0x08008125
 8008080:	0800814b 	.word	0x0800814b
 8008084:	08008183 	.word	0x08008183
 8008088:	080081ad 	.word	0x080081ad
 800808c:	080081ff 	.word	0x080081ff
 8008090:	08008221 	.word	0x08008221
 8008094:	0800825d 	.word	0x0800825d
 8008098:	08008283 	.word	0x08008283
 800809c:	080082c1 	.word	0x080082c1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f103 0110 	add.w	r1, r3, #16
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	795b      	ldrb	r3, [r3, #5]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f943 	bl	8008338 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	761a      	strb	r2, [r3, #24]
      break;
 80080b8:	e139      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	795b      	ldrb	r3, [r3, #5]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fcc5 	bl	8008a50 <USBH_LL_GetURBState>
 80080c6:	4603      	mov	r3, r0
 80080c8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d11e      	bne.n	800810e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7c1b      	ldrb	r3, [r3, #16]
 80080d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080d8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	8adb      	ldrh	r3, [r3, #22]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80080e2:	7b7b      	ldrb	r3, [r7, #13]
 80080e4:	2b80      	cmp	r3, #128	; 0x80
 80080e6:	d103      	bne.n	80080f0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2203      	movs	r2, #3
 80080ec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080ee:	e115      	b.n	800831c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2205      	movs	r2, #5
 80080f4:	761a      	strb	r2, [r3, #24]
      break;
 80080f6:	e111      	b.n	800831c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80080f8:	7b7b      	ldrb	r3, [r7, #13]
 80080fa:	2b80      	cmp	r3, #128	; 0x80
 80080fc:	d103      	bne.n	8008106 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2209      	movs	r2, #9
 8008102:	761a      	strb	r2, [r3, #24]
      break;
 8008104:	e10a      	b.n	800831c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2207      	movs	r2, #7
 800810a:	761a      	strb	r2, [r3, #24]
      break;
 800810c:	e106      	b.n	800831c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800810e:	7bbb      	ldrb	r3, [r7, #14]
 8008110:	2b04      	cmp	r3, #4
 8008112:	d003      	beq.n	800811c <USBH_HandleControl+0xcc>
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	2b02      	cmp	r3, #2
 8008118:	f040 8100 	bne.w	800831c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	220b      	movs	r2, #11
 8008120:	761a      	strb	r2, [r3, #24]
      break;
 8008122:	e0fb      	b.n	800831c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800812a:	b29a      	uxth	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6899      	ldr	r1, [r3, #8]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	899a      	ldrh	r2, [r3, #12]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	791b      	ldrb	r3, [r3, #4]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f93a 	bl	80083b6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2204      	movs	r2, #4
 8008146:	761a      	strb	r2, [r3, #24]
      break;
 8008148:	e0f1      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	791b      	ldrb	r3, [r3, #4]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fc7d 	bl	8008a50 <USBH_LL_GetURBState>
 8008156:	4603      	mov	r3, r0
 8008158:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d102      	bne.n	8008166 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2209      	movs	r2, #9
 8008164:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008166:	7bbb      	ldrb	r3, [r7, #14]
 8008168:	2b05      	cmp	r3, #5
 800816a:	d102      	bne.n	8008172 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800816c:	2303      	movs	r3, #3
 800816e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008170:	e0d6      	b.n	8008320 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b04      	cmp	r3, #4
 8008176:	f040 80d3 	bne.w	8008320 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	220b      	movs	r2, #11
 800817e:	761a      	strb	r2, [r3, #24]
      break;
 8008180:	e0ce      	b.n	8008320 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6899      	ldr	r1, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	899a      	ldrh	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	795b      	ldrb	r3, [r3, #5]
 800818e:	2001      	movs	r0, #1
 8008190:	9000      	str	r0, [sp, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8ea 	bl	800836c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800819e:	b29a      	uxth	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2206      	movs	r2, #6
 80081a8:	761a      	strb	r2, [r3, #24]
      break;
 80081aa:	e0c0      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	795b      	ldrb	r3, [r3, #5]
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fc4c 	bl	8008a50 <USBH_LL_GetURBState>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d103      	bne.n	80081ca <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2207      	movs	r2, #7
 80081c6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081c8:	e0ac      	b.n	8008324 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b05      	cmp	r3, #5
 80081ce:	d105      	bne.n	80081dc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	220c      	movs	r2, #12
 80081d4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80081d6:	2303      	movs	r3, #3
 80081d8:	73fb      	strb	r3, [r7, #15]
      break;
 80081da:	e0a3      	b.n	8008324 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d103      	bne.n	80081ea <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2205      	movs	r2, #5
 80081e6:	761a      	strb	r2, [r3, #24]
      break;
 80081e8:	e09c      	b.n	8008324 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	f040 8099 	bne.w	8008324 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	220b      	movs	r2, #11
 80081f6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80081f8:	2302      	movs	r3, #2
 80081fa:	73fb      	strb	r3, [r7, #15]
      break;
 80081fc:	e092      	b.n	8008324 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	791b      	ldrb	r3, [r3, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	2100      	movs	r1, #0
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f8d5 	bl	80083b6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008212:	b29a      	uxth	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2208      	movs	r2, #8
 800821c:	761a      	strb	r2, [r3, #24]

      break;
 800821e:	e086      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	791b      	ldrb	r3, [r3, #4]
 8008224:	4619      	mov	r1, r3
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fc12 	bl	8008a50 <USBH_LL_GetURBState>
 800822c:	4603      	mov	r3, r0
 800822e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d105      	bne.n	8008242 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	220d      	movs	r2, #13
 800823a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008240:	e072      	b.n	8008328 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b04      	cmp	r3, #4
 8008246:	d103      	bne.n	8008250 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	220b      	movs	r2, #11
 800824c:	761a      	strb	r2, [r3, #24]
      break;
 800824e:	e06b      	b.n	8008328 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b05      	cmp	r3, #5
 8008254:	d168      	bne.n	8008328 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008256:	2303      	movs	r3, #3
 8008258:	73fb      	strb	r3, [r7, #15]
      break;
 800825a:	e065      	b.n	8008328 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	795b      	ldrb	r3, [r3, #5]
 8008260:	2201      	movs	r2, #1
 8008262:	9200      	str	r2, [sp, #0]
 8008264:	2200      	movs	r2, #0
 8008266:	2100      	movs	r1, #0
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f87f 	bl	800836c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008274:	b29a      	uxth	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	220a      	movs	r2, #10
 800827e:	761a      	strb	r2, [r3, #24]
      break;
 8008280:	e055      	b.n	800832e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	795b      	ldrb	r3, [r3, #5]
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fbe1 	bl	8008a50 <USBH_LL_GetURBState>
 800828e:	4603      	mov	r3, r0
 8008290:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008292:	7bbb      	ldrb	r3, [r7, #14]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d105      	bne.n	80082a4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	220d      	movs	r2, #13
 80082a0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082a2:	e043      	b.n	800832c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d103      	bne.n	80082b2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2209      	movs	r2, #9
 80082ae:	761a      	strb	r2, [r3, #24]
      break;
 80082b0:	e03c      	b.n	800832c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d139      	bne.n	800832c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	220b      	movs	r2, #11
 80082bc:	761a      	strb	r2, [r3, #24]
      break;
 80082be:	e035      	b.n	800832c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	7e5b      	ldrb	r3, [r3, #25]
 80082c4:	3301      	adds	r3, #1
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	765a      	strb	r2, [r3, #25]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	7e5b      	ldrb	r3, [r3, #25]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d806      	bhi.n	80082e2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80082e0:	e025      	b.n	800832e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082e8:	2106      	movs	r1, #6
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	795b      	ldrb	r3, [r3, #5]
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f90c 	bl	8008518 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	791b      	ldrb	r3, [r3, #4]
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f906 	bl	8008518 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008312:	2302      	movs	r3, #2
 8008314:	73fb      	strb	r3, [r7, #15]
      break;
 8008316:	e00a      	b.n	800832e <USBH_HandleControl+0x2de>

    default:
      break;
 8008318:	bf00      	nop
 800831a:	e008      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 800831c:	bf00      	nop
 800831e:	e006      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 8008320:	bf00      	nop
 8008322:	e004      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 8008324:	bf00      	nop
 8008326:	e002      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 8008328:	bf00      	nop
 800832a:	e000      	b.n	800832e <USBH_HandleControl+0x2de>
      break;
 800832c:	bf00      	nop
  }

  return status;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af04      	add	r7, sp, #16
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	4613      	mov	r3, r2
 8008344:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008346:	79f9      	ldrb	r1, [r7, #7]
 8008348:	2300      	movs	r3, #0
 800834a:	9303      	str	r3, [sp, #12]
 800834c:	2308      	movs	r3, #8
 800834e:	9302      	str	r3, [sp, #8]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	2300      	movs	r3, #0
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	2300      	movs	r3, #0
 800835a:	2200      	movs	r2, #0
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 fb46 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af04      	add	r7, sp, #16
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	4611      	mov	r1, r2
 8008378:	461a      	mov	r2, r3
 800837a:	460b      	mov	r3, r1
 800837c:	80fb      	strh	r3, [r7, #6]
 800837e:	4613      	mov	r3, r2
 8008380:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008390:	7979      	ldrb	r1, [r7, #5]
 8008392:	7e3b      	ldrb	r3, [r7, #24]
 8008394:	9303      	str	r3, [sp, #12]
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	9302      	str	r3, [sp, #8]
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	2301      	movs	r3, #1
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	2300      	movs	r3, #0
 80083a4:	2200      	movs	r2, #0
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f000 fb21 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b088      	sub	sp, #32
 80083ba:	af04      	add	r7, sp, #16
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	4611      	mov	r1, r2
 80083c2:	461a      	mov	r2, r3
 80083c4:	460b      	mov	r3, r1
 80083c6:	80fb      	strh	r3, [r7, #6]
 80083c8:	4613      	mov	r3, r2
 80083ca:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083cc:	7979      	ldrb	r1, [r7, #5]
 80083ce:	2300      	movs	r3, #0
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	2301      	movs	r3, #1
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2300      	movs	r3, #0
 80083e0:	2201      	movs	r2, #1
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fb03 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80083e8:	2300      	movs	r3, #0

}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b088      	sub	sp, #32
 80083f6:	af04      	add	r7, sp, #16
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	4611      	mov	r1, r2
 80083fe:	461a      	mov	r2, r3
 8008400:	460b      	mov	r3, r1
 8008402:	80fb      	strh	r3, [r7, #6]
 8008404:	4613      	mov	r3, r2
 8008406:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008412:	2300      	movs	r3, #0
 8008414:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008416:	7979      	ldrb	r1, [r7, #5]
 8008418:	7e3b      	ldrb	r3, [r7, #24]
 800841a:	9303      	str	r3, [sp, #12]
 800841c:	88fb      	ldrh	r3, [r7, #6]
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	9301      	str	r3, [sp, #4]
 8008424:	2301      	movs	r3, #1
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	2302      	movs	r3, #2
 800842a:	2200      	movs	r2, #0
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f000 fade 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af04      	add	r7, sp, #16
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4611      	mov	r1, r2
 8008448:	461a      	mov	r2, r3
 800844a:	460b      	mov	r3, r1
 800844c:	80fb      	strh	r3, [r7, #6]
 800844e:	4613      	mov	r3, r2
 8008450:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008452:	7979      	ldrb	r1, [r7, #5]
 8008454:	2300      	movs	r3, #0
 8008456:	9303      	str	r3, [sp, #12]
 8008458:	88fb      	ldrh	r3, [r7, #6]
 800845a:	9302      	str	r3, [sp, #8]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	9301      	str	r3, [sp, #4]
 8008460:	2301      	movs	r3, #1
 8008462:	9300      	str	r3, [sp, #0]
 8008464:	2302      	movs	r3, #2
 8008466:	2201      	movs	r2, #1
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f000 fac0 	bl	80089ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af04      	add	r7, sp, #16
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	4608      	mov	r0, r1
 8008482:	4611      	mov	r1, r2
 8008484:	461a      	mov	r2, r3
 8008486:	4603      	mov	r3, r0
 8008488:	70fb      	strb	r3, [r7, #3]
 800848a:	460b      	mov	r3, r1
 800848c:	70bb      	strb	r3, [r7, #2]
 800848e:	4613      	mov	r3, r2
 8008490:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008492:	7878      	ldrb	r0, [r7, #1]
 8008494:	78ba      	ldrb	r2, [r7, #2]
 8008496:	78f9      	ldrb	r1, [r7, #3]
 8008498:	8b3b      	ldrh	r3, [r7, #24]
 800849a:	9302      	str	r3, [sp, #8]
 800849c:	7d3b      	ldrb	r3, [r7, #20]
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	7c3b      	ldrb	r3, [r7, #16]
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4603      	mov	r3, r0
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fa53 	bl	8008952 <USBH_LL_OpenPipe>

  return USBH_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fa72 	bl	80089b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f836 	bl	8008554 <USBH_GetFreePipe>
 80084e8:	4603      	mov	r3, r0
 80084ea:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80084ec:	89fb      	ldrh	r3, [r7, #14]
 80084ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00a      	beq.n	800850c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	89fb      	ldrh	r3, [r7, #14]
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	33e0      	adds	r3, #224	; 0xe0
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800850c:	89fb      	ldrh	r3, [r7, #14]
 800850e:	b2db      	uxtb	r3, r3
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d80d      	bhi.n	8008546 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800852a:	78fb      	ldrb	r3, [r7, #3]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	33e0      	adds	r3, #224	; 0xe0
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	78fb      	ldrb	r3, [r7, #3]
 8008538:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800853c:	6879      	ldr	r1, [r7, #4]
 800853e:	33e0      	adds	r3, #224	; 0xe0
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
 8008564:	e00f      	b.n	8008586 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	33e0      	adds	r3, #224	; 0xe0
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d102      	bne.n	8008580 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	b29b      	uxth	r3, r3
 800857e:	e007      	b.n	8008590 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	3301      	adds	r3, #1
 8008584:	73fb      	strb	r3, [r7, #15]
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b0f      	cmp	r3, #15
 800858a:	d9ec      	bls.n	8008566 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800858c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085a0:	2201      	movs	r2, #1
 80085a2:	490e      	ldr	r1, [pc, #56]	; (80085dc <MX_USB_HOST_Init+0x40>)
 80085a4:	480e      	ldr	r0, [pc, #56]	; (80085e0 <MX_USB_HOST_Init+0x44>)
 80085a6:	f7fe fba5 	bl	8006cf4 <USBH_Init>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085b0:	f7f8 fe54 	bl	800125c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085b4:	490b      	ldr	r1, [pc, #44]	; (80085e4 <MX_USB_HOST_Init+0x48>)
 80085b6:	480a      	ldr	r0, [pc, #40]	; (80085e0 <MX_USB_HOST_Init+0x44>)
 80085b8:	f7fe fc2a 	bl	8006e10 <USBH_RegisterClass>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085c2:	f7f8 fe4b 	bl	800125c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085c6:	4806      	ldr	r0, [pc, #24]	; (80085e0 <MX_USB_HOST_Init+0x44>)
 80085c8:	f7fe fcae 	bl	8006f28 <USBH_Start>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80085d2:	f7f8 fe43 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085d6:	bf00      	nop
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	080085fd 	.word	0x080085fd
 80085e0:	200001e0 	.word	0x200001e0
 80085e4:	2000000c 	.word	0x2000000c

080085e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80085ec:	4802      	ldr	r0, [pc, #8]	; (80085f8 <MX_USB_HOST_Process+0x10>)
 80085ee:	f7fe fcab 	bl	8006f48 <USBH_Process>
}
 80085f2:	bf00      	nop
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200001e0 	.word	0x200001e0

080085fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	460b      	mov	r3, r1
 8008606:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	3b01      	subs	r3, #1
 800860c:	2b04      	cmp	r3, #4
 800860e:	d819      	bhi.n	8008644 <USBH_UserProcess+0x48>
 8008610:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <USBH_UserProcess+0x1c>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008645 	.word	0x08008645
 800861c:	08008635 	.word	0x08008635
 8008620:	08008645 	.word	0x08008645
 8008624:	0800863d 	.word	0x0800863d
 8008628:	0800862d 	.word	0x0800862d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <USBH_UserProcess+0x58>)
 800862e:	2203      	movs	r2, #3
 8008630:	701a      	strb	r2, [r3, #0]
  break;
 8008632:	e008      	b.n	8008646 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008634:	4b07      	ldr	r3, [pc, #28]	; (8008654 <USBH_UserProcess+0x58>)
 8008636:	2202      	movs	r2, #2
 8008638:	701a      	strb	r2, [r3, #0]
  break;
 800863a:	e004      	b.n	8008646 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800863c:	4b05      	ldr	r3, [pc, #20]	; (8008654 <USBH_UserProcess+0x58>)
 800863e:	2201      	movs	r2, #1
 8008640:	701a      	strb	r2, [r3, #0]
  break;
 8008642:	e000      	b.n	8008646 <USBH_UserProcess+0x4a>

  default:
  break;
 8008644:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	200005b8 	.word	0x200005b8

08008658 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08a      	sub	sp, #40	; 0x28
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008660:	f107 0314 	add.w	r3, r7, #20
 8008664:	2200      	movs	r2, #0
 8008666:	601a      	str	r2, [r3, #0]
 8008668:	605a      	str	r2, [r3, #4]
 800866a:	609a      	str	r2, [r3, #8]
 800866c:	60da      	str	r2, [r3, #12]
 800866e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008678:	d147      	bne.n	800870a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800867a:	2300      	movs	r3, #0
 800867c:	613b      	str	r3, [r7, #16]
 800867e:	4b25      	ldr	r3, [pc, #148]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	4a24      	ldr	r2, [pc, #144]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 8008684:	f043 0301 	orr.w	r3, r3, #1
 8008688:	6313      	str	r3, [r2, #48]	; 0x30
 800868a:	4b22      	ldr	r3, [pc, #136]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	613b      	str	r3, [r7, #16]
 8008694:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800869a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800869c:	2300      	movs	r3, #0
 800869e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086a4:	f107 0314 	add.w	r3, r7, #20
 80086a8:	4619      	mov	r1, r3
 80086aa:	481b      	ldr	r0, [pc, #108]	; (8008718 <HAL_HCD_MspInit+0xc0>)
 80086ac:	f7f9 f962 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80086b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086b6:	2302      	movs	r3, #2
 80086b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086be:	2300      	movs	r3, #0
 80086c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086c2:	230a      	movs	r3, #10
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086c6:	f107 0314 	add.w	r3, r7, #20
 80086ca:	4619      	mov	r1, r3
 80086cc:	4812      	ldr	r0, [pc, #72]	; (8008718 <HAL_HCD_MspInit+0xc0>)
 80086ce:	f7f9 f951 	bl	8001974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d6:	4a0f      	ldr	r2, [pc, #60]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086dc:	6353      	str	r3, [r2, #52]	; 0x34
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e6:	4a0b      	ldr	r2, [pc, #44]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086ec:	6453      	str	r3, [r2, #68]	; 0x44
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <HAL_HCD_MspInit+0xbc>)
 80086f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	2043      	movs	r0, #67	; 0x43
 8008700:	f7f9 f901 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008704:	2043      	movs	r0, #67	; 0x43
 8008706:	f7f9 f91a 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800870a:	bf00      	nop
 800870c:	3728      	adds	r7, #40	; 0x28
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	40023800 	.word	0x40023800
 8008718:	40020000 	.word	0x40020000

0800871c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe ffeb 	bl	8007706 <USBH_LL_IncTimer>
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff f823 	bl	8007792 <USBH_LL_Connect>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008762:	4618      	mov	r0, r3
 8008764:	f7ff f82c 	bl	80077c0 <USBH_LL_Disconnect>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
 800877c:	4613      	mov	r3, r2
 800877e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe ffdd 	bl	800775a <USBH_LL_PortEnabled>
}
 80087a0:	bf00      	nop
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe ffdd 	bl	8007776 <USBH_LL_PortDisabled>
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d12a      	bne.n	800882c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <USBH_LL_Init+0x74>)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a15      	ldr	r2, [pc, #84]	; (8008838 <USBH_LL_Init+0x74>)
 80087e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087e6:	4b14      	ldr	r3, [pc, #80]	; (8008838 <USBH_LL_Init+0x74>)
 80087e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80087ee:	4b12      	ldr	r3, [pc, #72]	; (8008838 <USBH_LL_Init+0x74>)
 80087f0:	2208      	movs	r2, #8
 80087f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80087f4:	4b10      	ldr	r3, [pc, #64]	; (8008838 <USBH_LL_Init+0x74>)
 80087f6:	2201      	movs	r2, #1
 80087f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087fa:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <USBH_LL_Init+0x74>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008800:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <USBH_LL_Init+0x74>)
 8008802:	2202      	movs	r2, #2
 8008804:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <USBH_LL_Init+0x74>)
 8008808:	2200      	movs	r2, #0
 800880a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800880c:	480a      	ldr	r0, [pc, #40]	; (8008838 <USBH_LL_Init+0x74>)
 800880e:	f7f9 fa7e 	bl	8001d0e <HAL_HCD_Init>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008818:	f7f8 fd20 	bl	800125c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800881c:	4806      	ldr	r0, [pc, #24]	; (8008838 <USBH_LL_Init+0x74>)
 800881e:	f7f9 fe62 	bl	80024e6 <HAL_HCD_GetCurrentFrame>
 8008822:	4603      	mov	r3, r0
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7fe ff5e 	bl	80076e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	200005bc 	.word	0x200005bc

0800883c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008852:	4618      	mov	r0, r3
 8008854:	f7f9 fdd1 	bl	80023fa <HAL_HCD_Start>
 8008858:	4603      	mov	r3, r0
 800885a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	4618      	mov	r0, r3
 8008860:	f000 f95c 	bl	8008b1c <USBH_Get_USB_Status>
 8008864:	4603      	mov	r3, r0
 8008866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008868:	7bbb      	ldrb	r3, [r7, #14]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008888:	4618      	mov	r0, r3
 800888a:	f7f9 fdd9 	bl	8002440 <HAL_HCD_Stop>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	4618      	mov	r0, r3
 8008896:	f000 f941 	bl	8008b1c <USBH_Get_USB_Status>
 800889a:	4603      	mov	r3, r0
 800889c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889e:	7bbb      	ldrb	r3, [r7, #14]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088b0:	2301      	movs	r3, #1
 80088b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f9 fe21 	bl	8002502 <HAL_HCD_GetCurrentSpeed>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d00c      	beq.n	80088e0 <USBH_LL_GetSpeed+0x38>
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d80d      	bhi.n	80088e6 <USBH_LL_GetSpeed+0x3e>
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <USBH_LL_GetSpeed+0x2c>
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d003      	beq.n	80088da <USBH_LL_GetSpeed+0x32>
 80088d2:	e008      	b.n	80088e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
    break;
 80088d8:	e008      	b.n	80088ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80088da:	2301      	movs	r3, #1
 80088dc:	73fb      	strb	r3, [r7, #15]
    break;
 80088de:	e005      	b.n	80088ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80088e0:	2302      	movs	r3, #2
 80088e2:	73fb      	strb	r3, [r7, #15]
    break;
 80088e4:	e002      	b.n	80088ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80088e6:	2301      	movs	r3, #1
 80088e8:	73fb      	strb	r3, [r7, #15]
    break;
 80088ea:	bf00      	nop
  }
  return  speed;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800890c:	4618      	mov	r0, r3
 800890e:	f7f9 fdb4 	bl	800247a <HAL_HCD_ResetPort>
 8008912:	4603      	mov	r3, r0
 8008914:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	4618      	mov	r0, r3
 800891a:	f000 f8ff 	bl	8008b1c <USBH_Get_USB_Status>
 800891e:	4603      	mov	r3, r0
 8008920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008922:	7bbb      	ldrb	r3, [r7, #14]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	4611      	mov	r1, r2
 8008942:	4618      	mov	r0, r3
 8008944:	f7f9 fdbb 	bl	80024be <HAL_HCD_HC_GetXferCount>
 8008948:	4603      	mov	r3, r0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008952:	b590      	push	{r4, r7, lr}
 8008954:	b089      	sub	sp, #36	; 0x24
 8008956:	af04      	add	r7, sp, #16
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	461a      	mov	r2, r3
 8008960:	4603      	mov	r3, r0
 8008962:	70fb      	strb	r3, [r7, #3]
 8008964:	460b      	mov	r3, r1
 8008966:	70bb      	strb	r3, [r7, #2]
 8008968:	4613      	mov	r3, r2
 800896a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800897a:	787c      	ldrb	r4, [r7, #1]
 800897c:	78ba      	ldrb	r2, [r7, #2]
 800897e:	78f9      	ldrb	r1, [r7, #3]
 8008980:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008982:	9302      	str	r3, [sp, #8]
 8008984:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008988:	9301      	str	r3, [sp, #4]
 800898a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4623      	mov	r3, r4
 8008992:	f7f9 fa1e 	bl	8001dd2 <HAL_HCD_HC_Init>
 8008996:	4603      	mov	r3, r0
 8008998:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	4618      	mov	r0, r3
 800899e:	f000 f8bd 	bl	8008b1c <USBH_Get_USB_Status>
 80089a2:	4603      	mov	r3, r0
 80089a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd90      	pop	{r4, r7, pc}

080089b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	460b      	mov	r3, r1
 80089ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f9 fa8e 	bl	8001ef0 <HAL_HCD_HC_Halt>
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f89e 	bl	8008b1c <USBH_Get_USB_Status>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80089ee:	b590      	push	{r4, r7, lr}
 80089f0:	b089      	sub	sp, #36	; 0x24
 80089f2:	af04      	add	r7, sp, #16
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	4608      	mov	r0, r1
 80089f8:	4611      	mov	r1, r2
 80089fa:	461a      	mov	r2, r3
 80089fc:	4603      	mov	r3, r0
 80089fe:	70fb      	strb	r3, [r7, #3]
 8008a00:	460b      	mov	r3, r1
 8008a02:	70bb      	strb	r3, [r7, #2]
 8008a04:	4613      	mov	r3, r2
 8008a06:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a16:	787c      	ldrb	r4, [r7, #1]
 8008a18:	78ba      	ldrb	r2, [r7, #2]
 8008a1a:	78f9      	ldrb	r1, [r7, #3]
 8008a1c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a24:	9302      	str	r3, [sp, #8]
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	9301      	str	r3, [sp, #4]
 8008a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	4623      	mov	r3, r4
 8008a32:	f7f9 fa81 	bl	8001f38 <HAL_HCD_HC_SubmitRequest>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f86d 	bl	8008b1c <USBH_Get_USB_Status>
 8008a42:	4603      	mov	r3, r0
 8008a44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd90      	pop	{r4, r7, pc}

08008a50 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	4611      	mov	r1, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f9 fd15 	bl	8002496 <HAL_HCD_HC_GetURBState>
 8008a6c:	4603      	mov	r3, r0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d103      	bne.n	8008a94 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a8c:	78fb      	ldrb	r3, [r7, #3]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f870 	bl	8008b74 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008a94:	20c8      	movs	r0, #200	; 0xc8
 8008a96:	f7f8 fe37 	bl	8001708 <HAL_Delay>
  return USBH_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	212c      	movs	r1, #44	; 0x2c
 8008ac2:	fb01 f303 	mul.w	r3, r1, r3
 8008ac6:	4413      	add	r3, r2
 8008ac8:	333b      	adds	r3, #59	; 0x3b
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d009      	beq.n	8008ae4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	212c      	movs	r1, #44	; 0x2c
 8008ad6:	fb01 f303 	mul.w	r3, r1, r3
 8008ada:	4413      	add	r3, r2
 8008adc:	3354      	adds	r3, #84	; 0x54
 8008ade:	78ba      	ldrb	r2, [r7, #2]
 8008ae0:	701a      	strb	r2, [r3, #0]
 8008ae2:	e008      	b.n	8008af6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	68fa      	ldr	r2, [r7, #12]
 8008ae8:	212c      	movs	r1, #44	; 0x2c
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	3355      	adds	r3, #85	; 0x55
 8008af2:	78ba      	ldrb	r2, [r7, #2]
 8008af4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7f8 fdfb 	bl	8001708 <HAL_Delay>
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d817      	bhi.n	8008b60 <USBH_Get_USB_Status+0x44>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <USBH_Get_USB_Status+0x1c>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b4f 	.word	0x08008b4f
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b5b 	.word	0x08008b5b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	e00b      	b.n	8008b66 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b4e:	2302      	movs	r3, #2
 8008b50:	73fb      	strb	r3, [r7, #15]
    break;
 8008b52:	e008      	b.n	8008b66 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	e005      	b.n	8008b66 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5e:	e002      	b.n	8008b66 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b60:	2302      	movs	r3, #2
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	bf00      	nop
  }
  return usb_status;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008b82:	79fb      	ldrb	r3, [r7, #7]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73fb      	strb	r3, [r7, #15]
 8008b8c:	e001      	b.n	8008b92 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	461a      	mov	r2, r3
 8008b96:	2101      	movs	r1, #1
 8008b98:	4803      	ldr	r0, [pc, #12]	; (8008ba8 <MX_DriverVbusFS+0x34>)
 8008b9a:	f7f9 f89f 	bl	8001cdc <HAL_GPIO_WritePin>
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40020800 	.word	0x40020800

08008bac <malloc>:
 8008bac:	4b02      	ldr	r3, [pc, #8]	; (8008bb8 <malloc+0xc>)
 8008bae:	4601      	mov	r1, r0
 8008bb0:	6818      	ldr	r0, [r3, #0]
 8008bb2:	f000 b82b 	b.w	8008c0c <_malloc_r>
 8008bb6:	bf00      	nop
 8008bb8:	20000078 	.word	0x20000078

08008bbc <free>:
 8008bbc:	4b02      	ldr	r3, [pc, #8]	; (8008bc8 <free+0xc>)
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	f000 b8f3 	b.w	8008dac <_free_r>
 8008bc6:	bf00      	nop
 8008bc8:	20000078 	.word	0x20000078

08008bcc <sbrk_aligned>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	4e0e      	ldr	r6, [pc, #56]	; (8008c08 <sbrk_aligned+0x3c>)
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	6831      	ldr	r1, [r6, #0]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	b911      	cbnz	r1, 8008bde <sbrk_aligned+0x12>
 8008bd8:	f000 f8ac 	bl	8008d34 <_sbrk_r>
 8008bdc:	6030      	str	r0, [r6, #0]
 8008bde:	4621      	mov	r1, r4
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 f8a7 	bl	8008d34 <_sbrk_r>
 8008be6:	1c43      	adds	r3, r0, #1
 8008be8:	d00a      	beq.n	8008c00 <sbrk_aligned+0x34>
 8008bea:	1cc4      	adds	r4, r0, #3
 8008bec:	f024 0403 	bic.w	r4, r4, #3
 8008bf0:	42a0      	cmp	r0, r4
 8008bf2:	d007      	beq.n	8008c04 <sbrk_aligned+0x38>
 8008bf4:	1a21      	subs	r1, r4, r0
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f000 f89c 	bl	8008d34 <_sbrk_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d101      	bne.n	8008c04 <sbrk_aligned+0x38>
 8008c00:	f04f 34ff 	mov.w	r4, #4294967295
 8008c04:	4620      	mov	r0, r4
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	200008c4 	.word	0x200008c4

08008c0c <_malloc_r>:
 8008c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c10:	1ccd      	adds	r5, r1, #3
 8008c12:	f025 0503 	bic.w	r5, r5, #3
 8008c16:	3508      	adds	r5, #8
 8008c18:	2d0c      	cmp	r5, #12
 8008c1a:	bf38      	it	cc
 8008c1c:	250c      	movcc	r5, #12
 8008c1e:	2d00      	cmp	r5, #0
 8008c20:	4607      	mov	r7, r0
 8008c22:	db01      	blt.n	8008c28 <_malloc_r+0x1c>
 8008c24:	42a9      	cmp	r1, r5
 8008c26:	d905      	bls.n	8008c34 <_malloc_r+0x28>
 8008c28:	230c      	movs	r3, #12
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	2600      	movs	r6, #0
 8008c2e:	4630      	mov	r0, r6
 8008c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d08 <_malloc_r+0xfc>
 8008c38:	f000 f868 	bl	8008d0c <__malloc_lock>
 8008c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c40:	461c      	mov	r4, r3
 8008c42:	bb5c      	cbnz	r4, 8008c9c <_malloc_r+0x90>
 8008c44:	4629      	mov	r1, r5
 8008c46:	4638      	mov	r0, r7
 8008c48:	f7ff ffc0 	bl	8008bcc <sbrk_aligned>
 8008c4c:	1c43      	adds	r3, r0, #1
 8008c4e:	4604      	mov	r4, r0
 8008c50:	d155      	bne.n	8008cfe <_malloc_r+0xf2>
 8008c52:	f8d8 4000 	ldr.w	r4, [r8]
 8008c56:	4626      	mov	r6, r4
 8008c58:	2e00      	cmp	r6, #0
 8008c5a:	d145      	bne.n	8008ce8 <_malloc_r+0xdc>
 8008c5c:	2c00      	cmp	r4, #0
 8008c5e:	d048      	beq.n	8008cf2 <_malloc_r+0xe6>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	4631      	mov	r1, r6
 8008c64:	4638      	mov	r0, r7
 8008c66:	eb04 0903 	add.w	r9, r4, r3
 8008c6a:	f000 f863 	bl	8008d34 <_sbrk_r>
 8008c6e:	4581      	cmp	r9, r0
 8008c70:	d13f      	bne.n	8008cf2 <_malloc_r+0xe6>
 8008c72:	6821      	ldr	r1, [r4, #0]
 8008c74:	1a6d      	subs	r5, r5, r1
 8008c76:	4629      	mov	r1, r5
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f7ff ffa7 	bl	8008bcc <sbrk_aligned>
 8008c7e:	3001      	adds	r0, #1
 8008c80:	d037      	beq.n	8008cf2 <_malloc_r+0xe6>
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	442b      	add	r3, r5
 8008c86:	6023      	str	r3, [r4, #0]
 8008c88:	f8d8 3000 	ldr.w	r3, [r8]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d038      	beq.n	8008d02 <_malloc_r+0xf6>
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	42a2      	cmp	r2, r4
 8008c94:	d12b      	bne.n	8008cee <_malloc_r+0xe2>
 8008c96:	2200      	movs	r2, #0
 8008c98:	605a      	str	r2, [r3, #4]
 8008c9a:	e00f      	b.n	8008cbc <_malloc_r+0xb0>
 8008c9c:	6822      	ldr	r2, [r4, #0]
 8008c9e:	1b52      	subs	r2, r2, r5
 8008ca0:	d41f      	bmi.n	8008ce2 <_malloc_r+0xd6>
 8008ca2:	2a0b      	cmp	r2, #11
 8008ca4:	d917      	bls.n	8008cd6 <_malloc_r+0xca>
 8008ca6:	1961      	adds	r1, r4, r5
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	6025      	str	r5, [r4, #0]
 8008cac:	bf18      	it	ne
 8008cae:	6059      	strne	r1, [r3, #4]
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	bf08      	it	eq
 8008cb4:	f8c8 1000 	streq.w	r1, [r8]
 8008cb8:	5162      	str	r2, [r4, r5]
 8008cba:	604b      	str	r3, [r1, #4]
 8008cbc:	4638      	mov	r0, r7
 8008cbe:	f104 060b 	add.w	r6, r4, #11
 8008cc2:	f000 f829 	bl	8008d18 <__malloc_unlock>
 8008cc6:	f026 0607 	bic.w	r6, r6, #7
 8008cca:	1d23      	adds	r3, r4, #4
 8008ccc:	1af2      	subs	r2, r6, r3
 8008cce:	d0ae      	beq.n	8008c2e <_malloc_r+0x22>
 8008cd0:	1b9b      	subs	r3, r3, r6
 8008cd2:	50a3      	str	r3, [r4, r2]
 8008cd4:	e7ab      	b.n	8008c2e <_malloc_r+0x22>
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	6862      	ldr	r2, [r4, #4]
 8008cda:	d1dd      	bne.n	8008c98 <_malloc_r+0x8c>
 8008cdc:	f8c8 2000 	str.w	r2, [r8]
 8008ce0:	e7ec      	b.n	8008cbc <_malloc_r+0xb0>
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	6864      	ldr	r4, [r4, #4]
 8008ce6:	e7ac      	b.n	8008c42 <_malloc_r+0x36>
 8008ce8:	4634      	mov	r4, r6
 8008cea:	6876      	ldr	r6, [r6, #4]
 8008cec:	e7b4      	b.n	8008c58 <_malloc_r+0x4c>
 8008cee:	4613      	mov	r3, r2
 8008cf0:	e7cc      	b.n	8008c8c <_malloc_r+0x80>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	603b      	str	r3, [r7, #0]
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	f000 f80e 	bl	8008d18 <__malloc_unlock>
 8008cfc:	e797      	b.n	8008c2e <_malloc_r+0x22>
 8008cfe:	6025      	str	r5, [r4, #0]
 8008d00:	e7dc      	b.n	8008cbc <_malloc_r+0xb0>
 8008d02:	605b      	str	r3, [r3, #4]
 8008d04:	deff      	udf	#255	; 0xff
 8008d06:	bf00      	nop
 8008d08:	200008c0 	.word	0x200008c0

08008d0c <__malloc_lock>:
 8008d0c:	4801      	ldr	r0, [pc, #4]	; (8008d14 <__malloc_lock+0x8>)
 8008d0e:	f000 b84b 	b.w	8008da8 <__retarget_lock_acquire_recursive>
 8008d12:	bf00      	nop
 8008d14:	20000a04 	.word	0x20000a04

08008d18 <__malloc_unlock>:
 8008d18:	4801      	ldr	r0, [pc, #4]	; (8008d20 <__malloc_unlock+0x8>)
 8008d1a:	f000 b846 	b.w	8008daa <__retarget_lock_release_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20000a04 	.word	0x20000a04

08008d24 <memset>:
 8008d24:	4402      	add	r2, r0
 8008d26:	4603      	mov	r3, r0
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d100      	bne.n	8008d2e <memset+0xa>
 8008d2c:	4770      	bx	lr
 8008d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d32:	e7f9      	b.n	8008d28 <memset+0x4>

08008d34 <_sbrk_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	4d06      	ldr	r5, [pc, #24]	; (8008d50 <_sbrk_r+0x1c>)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	4608      	mov	r0, r1
 8008d3e:	602b      	str	r3, [r5, #0]
 8008d40:	f7f8 fbfe 	bl	8001540 <_sbrk>
 8008d44:	1c43      	adds	r3, r0, #1
 8008d46:	d102      	bne.n	8008d4e <_sbrk_r+0x1a>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	b103      	cbz	r3, 8008d4e <_sbrk_r+0x1a>
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	bd38      	pop	{r3, r4, r5, pc}
 8008d50:	20000a00 	.word	0x20000a00

08008d54 <__errno>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <__errno+0x8>)
 8008d56:	6818      	ldr	r0, [r3, #0]
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	20000078 	.word	0x20000078

08008d60 <__libc_init_array>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	4d0d      	ldr	r5, [pc, #52]	; (8008d98 <__libc_init_array+0x38>)
 8008d64:	4c0d      	ldr	r4, [pc, #52]	; (8008d9c <__libc_init_array+0x3c>)
 8008d66:	1b64      	subs	r4, r4, r5
 8008d68:	10a4      	asrs	r4, r4, #2
 8008d6a:	2600      	movs	r6, #0
 8008d6c:	42a6      	cmp	r6, r4
 8008d6e:	d109      	bne.n	8008d84 <__libc_init_array+0x24>
 8008d70:	4d0b      	ldr	r5, [pc, #44]	; (8008da0 <__libc_init_array+0x40>)
 8008d72:	4c0c      	ldr	r4, [pc, #48]	; (8008da4 <__libc_init_array+0x44>)
 8008d74:	f000 f866 	bl	8008e44 <_init>
 8008d78:	1b64      	subs	r4, r4, r5
 8008d7a:	10a4      	asrs	r4, r4, #2
 8008d7c:	2600      	movs	r6, #0
 8008d7e:	42a6      	cmp	r6, r4
 8008d80:	d105      	bne.n	8008d8e <__libc_init_array+0x2e>
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d88:	4798      	blx	r3
 8008d8a:	3601      	adds	r6, #1
 8008d8c:	e7ee      	b.n	8008d6c <__libc_init_array+0xc>
 8008d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d92:	4798      	blx	r3
 8008d94:	3601      	adds	r6, #1
 8008d96:	e7f2      	b.n	8008d7e <__libc_init_array+0x1e>
 8008d98:	08008eb0 	.word	0x08008eb0
 8008d9c:	08008eb0 	.word	0x08008eb0
 8008da0:	08008eb0 	.word	0x08008eb0
 8008da4:	08008eb4 	.word	0x08008eb4

08008da8 <__retarget_lock_acquire_recursive>:
 8008da8:	4770      	bx	lr

08008daa <__retarget_lock_release_recursive>:
 8008daa:	4770      	bx	lr

08008dac <_free_r>:
 8008dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dae:	2900      	cmp	r1, #0
 8008db0:	d044      	beq.n	8008e3c <_free_r+0x90>
 8008db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008db6:	9001      	str	r0, [sp, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f1a1 0404 	sub.w	r4, r1, #4
 8008dbe:	bfb8      	it	lt
 8008dc0:	18e4      	addlt	r4, r4, r3
 8008dc2:	f7ff ffa3 	bl	8008d0c <__malloc_lock>
 8008dc6:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <_free_r+0x94>)
 8008dc8:	9801      	ldr	r0, [sp, #4]
 8008dca:	6813      	ldr	r3, [r2, #0]
 8008dcc:	b933      	cbnz	r3, 8008ddc <_free_r+0x30>
 8008dce:	6063      	str	r3, [r4, #4]
 8008dd0:	6014      	str	r4, [r2, #0]
 8008dd2:	b003      	add	sp, #12
 8008dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dd8:	f7ff bf9e 	b.w	8008d18 <__malloc_unlock>
 8008ddc:	42a3      	cmp	r3, r4
 8008dde:	d908      	bls.n	8008df2 <_free_r+0x46>
 8008de0:	6825      	ldr	r5, [r4, #0]
 8008de2:	1961      	adds	r1, r4, r5
 8008de4:	428b      	cmp	r3, r1
 8008de6:	bf01      	itttt	eq
 8008de8:	6819      	ldreq	r1, [r3, #0]
 8008dea:	685b      	ldreq	r3, [r3, #4]
 8008dec:	1949      	addeq	r1, r1, r5
 8008dee:	6021      	streq	r1, [r4, #0]
 8008df0:	e7ed      	b.n	8008dce <_free_r+0x22>
 8008df2:	461a      	mov	r2, r3
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	b10b      	cbz	r3, 8008dfc <_free_r+0x50>
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d9fa      	bls.n	8008df2 <_free_r+0x46>
 8008dfc:	6811      	ldr	r1, [r2, #0]
 8008dfe:	1855      	adds	r5, r2, r1
 8008e00:	42a5      	cmp	r5, r4
 8008e02:	d10b      	bne.n	8008e1c <_free_r+0x70>
 8008e04:	6824      	ldr	r4, [r4, #0]
 8008e06:	4421      	add	r1, r4
 8008e08:	1854      	adds	r4, r2, r1
 8008e0a:	42a3      	cmp	r3, r4
 8008e0c:	6011      	str	r1, [r2, #0]
 8008e0e:	d1e0      	bne.n	8008dd2 <_free_r+0x26>
 8008e10:	681c      	ldr	r4, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	6053      	str	r3, [r2, #4]
 8008e16:	440c      	add	r4, r1
 8008e18:	6014      	str	r4, [r2, #0]
 8008e1a:	e7da      	b.n	8008dd2 <_free_r+0x26>
 8008e1c:	d902      	bls.n	8008e24 <_free_r+0x78>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	e7d6      	b.n	8008dd2 <_free_r+0x26>
 8008e24:	6825      	ldr	r5, [r4, #0]
 8008e26:	1961      	adds	r1, r4, r5
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf04      	itt	eq
 8008e2c:	6819      	ldreq	r1, [r3, #0]
 8008e2e:	685b      	ldreq	r3, [r3, #4]
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	bf04      	itt	eq
 8008e34:	1949      	addeq	r1, r1, r5
 8008e36:	6021      	streq	r1, [r4, #0]
 8008e38:	6054      	str	r4, [r2, #4]
 8008e3a:	e7ca      	b.n	8008dd2 <_free_r+0x26>
 8008e3c:	b003      	add	sp, #12
 8008e3e:	bd30      	pop	{r4, r5, pc}
 8008e40:	200008c0 	.word	0x200008c0

08008e44 <_init>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	bf00      	nop
 8008e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4a:	bc08      	pop	{r3}
 8008e4c:	469e      	mov	lr, r3
 8008e4e:	4770      	bx	lr

08008e50 <_fini>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr
